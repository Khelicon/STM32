
F303K8_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001938  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001ac0  08001ac0  00011ac0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001afc  08001afc  00011afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b00  08001b00  00011b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000f0  200000f0  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eea4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f35  00000000  00000000  0002eee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000445e  00000000  00000000  00030e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000678  00000000  00000000  00035278  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008c0  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004575  00000000  00000000  000361b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002c6a  00000000  00000000  0003a725  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003d38f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000117c  00000000  00000000  0003d40c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001aa8 	.word	0x08001aa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001aa8 	.word	0x08001aa8

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 fbb8 	bl	8000954 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 fb7a 	bl	80008ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 fb53 	bl	80008c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fb20 	bl	800186c <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000280:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000282:	6803      	ldr	r3, [r0, #0]
{
 8000284:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000286:	6898      	ldr	r0, [r3, #8]
 8000288:	f000 0003 	and.w	r0, r0, #3
 800028c:	2801      	cmp	r0, #1
 800028e:	d001      	beq.n	8000294 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000290:	2000      	movs	r0, #0
 8000292:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	07d2      	lsls	r2, r2, #31
 8000298:	d5fa      	bpl.n	8000290 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800029a:	689a      	ldr	r2, [r3, #8]
 800029c:	f002 020d 	and.w	r2, r2, #13
 80002a0:	2a01      	cmp	r2, #1
 80002a2:	d11b      	bne.n	80002dc <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 80002a4:	689a      	ldr	r2, [r3, #8]
 80002a6:	f042 0202 	orr.w	r2, r2, #2
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	2203      	movs	r2, #3
 80002ae:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80002b0:	f7ff ffcc 	bl	800024c <HAL_GetTick>
 80002b4:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80002b6:	6823      	ldr	r3, [r4, #0]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	07db      	lsls	r3, r3, #31
 80002bc:	d5e8      	bpl.n	8000290 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80002be:	f7ff ffc5 	bl	800024c <HAL_GetTick>
 80002c2:	1b40      	subs	r0, r0, r5
 80002c4:	2802      	cmp	r0, #2
 80002c6:	d9f6      	bls.n	80002b6 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002d8:	2001      	movs	r0, #1
 80002da:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80002ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080002f0 <HAL_ADC_Init>:
{
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 80002f4:	2300      	movs	r3, #0
 80002f6:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80002f8:	4604      	mov	r4, r0
 80002fa:	2800      	cmp	r0, #0
 80002fc:	f000 80e3 	beq.w	80004c6 <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000302:	06d5      	lsls	r5, r2, #27
 8000304:	f100 80cc 	bmi.w	80004a0 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000308:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800030a:	2b00      	cmp	r3, #0
 800030c:	f000 8092 	beq.w	8000434 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000310:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000312:	6823      	ldr	r3, [r4, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	00d2      	lsls	r2, r2, #3
 8000318:	d502      	bpl.n	8000320 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800031a:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	d50a      	bpl.n	8000336 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000322:	f023 0312 	bic.w	r3, r3, #18
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000334:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000338:	06de      	lsls	r6, r3, #27
 800033a:	f100 80be 	bmi.w	80004ba <HAL_ADC_Init+0x1ca>
 800033e:	2800      	cmp	r0, #0
 8000340:	f040 80bb 	bne.w	80004ba <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000344:	6823      	ldr	r3, [r4, #0]
 8000346:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000348:	f011 0104 	ands.w	r1, r1, #4
 800034c:	f040 80b5 	bne.w	80004ba <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8000350:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000352:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000356:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800035a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800035e:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000360:	bf0c      	ite	eq
 8000362:	4a5a      	ldreq	r2, [pc, #360]	; (80004cc <HAL_ADC_Init+0x1dc>)
 8000364:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000368:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800036a:	689a      	ldr	r2, [r3, #8]
 800036c:	f002 0203 	and.w	r2, r2, #3
 8000370:	2a01      	cmp	r2, #1
 8000372:	d102      	bne.n	800037a <HAL_ADC_Init+0x8a>
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	07d5      	lsls	r5, r2, #31
 8000378:	d410      	bmi.n	800039c <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800037a:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800037c:	b13a      	cbz	r2, 800038e <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800037e:	6895      	ldr	r5, [r2, #8]
 8000380:	f005 0503 	and.w	r5, r5, #3
 8000384:	2d01      	cmp	r5, #1
 8000386:	d102      	bne.n	800038e <HAL_ADC_Init+0x9e>
 8000388:	6812      	ldr	r2, [r2, #0]
 800038a:	07d2      	lsls	r2, r2, #31
 800038c:	d406      	bmi.n	800039c <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800038e:	4d50      	ldr	r5, [pc, #320]	; (80004d0 <HAL_ADC_Init+0x1e0>)
 8000390:	6866      	ldr	r6, [r4, #4]
 8000392:	68aa      	ldr	r2, [r5, #8]
 8000394:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000398:	4332      	orrs	r2, r6
 800039a:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800039c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800039e:	68a6      	ldr	r6, [r4, #8]
 80003a0:	69e5      	ldr	r5, [r4, #28]
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	68e2      	ldr	r2, [r4, #12]
 80003a6:	ea42 0206 	orr.w	r2, r2, r6
 80003aa:	bf18      	it	ne
 80003ac:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 80003b0:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80003b4:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80003b8:	2901      	cmp	r1, #1
 80003ba:	d107      	bne.n	80003cc <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d171      	bne.n	80004a4 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80003c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003c2:	3901      	subs	r1, #1
 80003c4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80003c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80003ce:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80003d0:	bf1e      	ittt	ne
 80003d2:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 80003d4:	4329      	orrne	r1, r5
 80003d6:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80003d8:	6899      	ldr	r1, [r3, #8]
 80003da:	f011 0f0c 	tst.w	r1, #12
 80003de:	d10b      	bne.n	80003f8 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80003e0:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80003e2:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80003e4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80003e8:	f021 0102 	bic.w	r1, r1, #2
 80003ec:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80003ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80003f0:	0049      	lsls	r1, r1, #1
 80003f2:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80003f6:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80003f8:	68dd      	ldr	r5, [r3, #12]
 80003fa:	4936      	ldr	r1, [pc, #216]	; (80004d4 <HAL_ADC_Init+0x1e4>)
 80003fc:	4029      	ands	r1, r5
 80003fe:	430a      	orrs	r2, r1
 8000400:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000402:	6922      	ldr	r2, [r4, #16]
 8000404:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000406:	bf05      	ittet	eq
 8000408:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800040a:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800040c:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800040e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000412:	bf06      	itte	eq
 8000414:	f021 010f 	biceq.w	r1, r1, #15
 8000418:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800041a:	f022 020f 	bicne.w	r2, r2, #15
 800041e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000420:	2300      	movs	r3, #0
 8000422:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000424:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000426:	f023 0303 	bic.w	r3, r3, #3
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000430:	b016      	add	sp, #88	; 0x58
 8000432:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000434:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000436:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000438:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800043a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800043e:	f001 fa5b 	bl	80018f8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000442:	6823      	ldr	r3, [r4, #0]
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	00d8      	lsls	r0, r3, #3
 8000448:	f53f af62 	bmi.w	8000310 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 800044c:	4620      	mov	r0, r4
 800044e:	f7ff ff17 	bl	8000280 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000452:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000454:	06d1      	lsls	r1, r2, #27
 8000456:	f53f af5c 	bmi.w	8000312 <HAL_ADC_Init+0x22>
 800045a:	2800      	cmp	r0, #0
 800045c:	f47f af59 	bne.w	8000312 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 8000460:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000462:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000466:	f023 0302 	bic.w	r3, r3, #2
 800046a:	f043 0302 	orr.w	r3, r3, #2
 800046e:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000470:	6823      	ldr	r3, [r4, #0]
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000478:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000480:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_ADC_Init+0x1e8>)
 8000484:	4a15      	ldr	r2, [pc, #84]	; (80004dc <HAL_ADC_Init+0x1ec>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	fbb3 f2f2 	udiv	r2, r3, r2
 800048c:	230a      	movs	r3, #10
 800048e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000490:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000492:	9b00      	ldr	r3, [sp, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	f43f af3b 	beq.w	8000310 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 800049a:	9b00      	ldr	r3, [sp, #0]
 800049c:	3b01      	subs	r3, #1
 800049e:	e7f7      	b.n	8000490 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004a0:	4618      	mov	r0, r3
 80004a2:	e748      	b.n	8000336 <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 80004a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004a6:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80004aa:	f041 0120 	orr.w	r1, r1, #32
 80004ae:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80004b2:	f041 0101 	orr.w	r1, r1, #1
 80004b6:	64a1      	str	r1, [r4, #72]	; 0x48
 80004b8:	e788      	b.n	80003cc <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 80004ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004bc:	f023 0312 	bic.w	r3, r3, #18
 80004c0:	f043 0310 	orr.w	r3, r3, #16
 80004c4:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80004c6:	2001      	movs	r0, #1
 80004c8:	e7b2      	b.n	8000430 <HAL_ADC_Init+0x140>
 80004ca:	bf00      	nop
 80004cc:	50000100 	.word	0x50000100
 80004d0:	50000300 	.word	0x50000300
 80004d4:	fff0c007 	.word	0xfff0c007
 80004d8:	20000008 	.word	0x20000008
 80004dc:	000f4240 	.word	0x000f4240

080004e0 <HAL_ADC_ConfigChannel>:
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80004e4:	2300      	movs	r3, #0
 80004e6:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 80004e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80004ec:	2b01      	cmp	r3, #1
{
 80004ee:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80004f0:	f000 8151 	beq.w	8000796 <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004f4:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80004f6:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004f8:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80004fa:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004fc:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 80004fe:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000502:	f100 8143 	bmi.w	800078c <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 8000506:	6848      	ldr	r0, [r1, #4]
 8000508:	680c      	ldr	r4, [r1, #0]
 800050a:	2804      	cmp	r0, #4
 800050c:	f04f 0206 	mov.w	r2, #6
 8000510:	d831      	bhi.n	8000576 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000512:	4342      	muls	r2, r0
 8000514:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8000516:	201f      	movs	r0, #31
 8000518:	4090      	lsls	r0, r2
 800051a:	ea27 0000 	bic.w	r0, r7, r0
 800051e:	fa04 f202 	lsl.w	r2, r4, r2
 8000522:	4302      	orrs	r2, r0
 8000524:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000526:	689a      	ldr	r2, [r3, #8]
 8000528:	f012 0f0c 	tst.w	r2, #12
 800052c:	d162      	bne.n	80005f4 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800052e:	2c09      	cmp	r4, #9
 8000530:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000534:	688f      	ldr	r7, [r1, #8]
 8000536:	d946      	bls.n	80005c6 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000538:	4422      	add	r2, r4
 800053a:	6998      	ldr	r0, [r3, #24]
 800053c:	3a1e      	subs	r2, #30
 800053e:	f04f 0e07 	mov.w	lr, #7
 8000542:	fa0e fe02 	lsl.w	lr, lr, r2
 8000546:	ea20 000e 	bic.w	r0, r0, lr
 800054a:	fa07 f202 	lsl.w	r2, r7, r2
 800054e:	4302      	orrs	r2, r0
 8000550:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000552:	68da      	ldr	r2, [r3, #12]
 8000554:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8000558:	694a      	ldr	r2, [r1, #20]
 800055a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800055e:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000562:	690a      	ldr	r2, [r1, #16]
 8000564:	3a01      	subs	r2, #1
 8000566:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800056a:	2a03      	cmp	r2, #3
 800056c:	d873      	bhi.n	8000656 <HAL_ADC_ConfigChannel+0x176>
 800056e:	e8df f002 	tbb	[pc, r2]
 8000572:	5137      	.short	0x5137
 8000574:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8000576:	2809      	cmp	r0, #9
 8000578:	d80b      	bhi.n	8000592 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800057a:	4342      	muls	r2, r0
 800057c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800057e:	3a1e      	subs	r2, #30
 8000580:	201f      	movs	r0, #31
 8000582:	4090      	lsls	r0, r2
 8000584:	ea27 0000 	bic.w	r0, r7, r0
 8000588:	fa04 f202 	lsl.w	r2, r4, r2
 800058c:	4302      	orrs	r2, r0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
 8000590:	e7c9      	b.n	8000526 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000592:	280e      	cmp	r0, #14
 8000594:	d80b      	bhi.n	80005ae <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000596:	4342      	muls	r2, r0
 8000598:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800059a:	3a3c      	subs	r2, #60	; 0x3c
 800059c:	201f      	movs	r0, #31
 800059e:	4090      	lsls	r0, r2
 80005a0:	ea27 0000 	bic.w	r0, r7, r0
 80005a4:	fa04 f202 	lsl.w	r2, r4, r2
 80005a8:	4302      	orrs	r2, r0
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38
 80005ac:	e7bb      	b.n	8000526 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80005ae:	4342      	muls	r2, r0
 80005b0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80005b2:	3a5a      	subs	r2, #90	; 0x5a
 80005b4:	201f      	movs	r0, #31
 80005b6:	4090      	lsls	r0, r2
 80005b8:	ea27 0000 	bic.w	r0, r7, r0
 80005bc:	fa04 f202 	lsl.w	r2, r4, r2
 80005c0:	4302      	orrs	r2, r0
 80005c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005c4:	e7af      	b.n	8000526 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80005c6:	6958      	ldr	r0, [r3, #20]
 80005c8:	4422      	add	r2, r4
 80005ca:	f04f 0e07 	mov.w	lr, #7
 80005ce:	fa0e fe02 	lsl.w	lr, lr, r2
 80005d2:	ea20 000e 	bic.w	r0, r0, lr
 80005d6:	fa07 f202 	lsl.w	r2, r7, r2
 80005da:	4302      	orrs	r2, r0
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	e7b8      	b.n	8000552 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80005e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005e2:	4f7a      	ldr	r7, [pc, #488]	; (80007cc <HAL_ADC_ConfigChannel+0x2ec>)
 80005e4:	4017      	ands	r7, r2
 80005e6:	ea47 020c 	orr.w	r2, r7, ip
 80005ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80005ee:	ea42 020e 	orr.w	r2, r2, lr
 80005f2:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f002 0203 	and.w	r2, r2, #3
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	f040 80cd 	bne.w	800079a <HAL_ADC_ConfigChannel+0x2ba>
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	07d0      	lsls	r0, r2, #31
 8000604:	f140 80c9 	bpl.w	800079a <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000608:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800060a:	2300      	movs	r3, #0
 800060c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000610:	b017      	add	sp, #92	; 0x5c
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000614:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000616:	4f6d      	ldr	r7, [pc, #436]	; (80007cc <HAL_ADC_ConfigChannel+0x2ec>)
 8000618:	4017      	ands	r7, r2
 800061a:	ea47 020c 	orr.w	r2, r7, ip
 800061e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000622:	ea42 020e 	orr.w	r2, r2, lr
 8000626:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8000628:	e7e4      	b.n	80005f4 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800062a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800062c:	4867      	ldr	r0, [pc, #412]	; (80007cc <HAL_ADC_ConfigChannel+0x2ec>)
 800062e:	4010      	ands	r0, r2
 8000630:	ea40 020c 	orr.w	r2, r0, ip
 8000634:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000638:	ea42 020e 	orr.w	r2, r2, lr
 800063c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800063e:	e7d9      	b.n	80005f4 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000640:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000642:	4a62      	ldr	r2, [pc, #392]	; (80007cc <HAL_ADC_ConfigChannel+0x2ec>)
 8000644:	4002      	ands	r2, r0
 8000646:	ea42 020c 	orr.w	r2, r2, ip
 800064a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800064e:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000652:	66da      	str	r2, [r3, #108]	; 0x6c
 8000654:	e7ce      	b.n	80005f4 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000656:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000658:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800065c:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800065e:	bf02      	ittt	eq
 8000660:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000662:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000666:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000668:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800066a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800066e:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000670:	bf02      	ittt	eq
 8000672:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000674:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000678:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800067a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800067c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000680:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000682:	bf02      	ittt	eq
 8000684:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000686:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800068a:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800068c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800068e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000692:	4594      	cmp	ip, r2
 8000694:	d1ae      	bne.n	80005f4 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000696:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000698:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800069c:	e7d9      	b.n	8000652 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800069e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80006a2:	2101      	movs	r1, #1
 80006a4:	40a1      	lsls	r1, r4
 80006a6:	ea22 0201 	bic.w	r2, r2, r1
 80006aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80006ae:	2c10      	cmp	r4, #16
 80006b0:	d143      	bne.n	800073a <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80006b2:	4a47      	ldr	r2, [pc, #284]	; (80007d0 <HAL_ADC_ConfigChannel+0x2f0>)
 80006b4:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80006b6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80006ba:	d1a5      	bne.n	8000608 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80006bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006c0:	bf0c      	ite	eq
 80006c2:	4a44      	ldreq	r2, [pc, #272]	; (80007d4 <HAL_ADC_ConfigChannel+0x2f4>)
 80006c4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80006c8:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	f002 0203 	and.w	r2, r2, #3
 80006d0:	2a01      	cmp	r2, #1
 80006d2:	d102      	bne.n	80006da <HAL_ADC_ConfigChannel+0x1fa>
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	07d1      	lsls	r1, r2, #31
 80006d8:	d452      	bmi.n	8000780 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80006da:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80006dc:	b13a      	cbz	r2, 80006ee <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80006de:	6891      	ldr	r1, [r2, #8]
 80006e0:	f001 0103 	and.w	r1, r1, #3
 80006e4:	2901      	cmp	r1, #1
 80006e6:	d102      	bne.n	80006ee <HAL_ADC_ConfigChannel+0x20e>
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	07d2      	lsls	r2, r2, #31
 80006ec:	d448      	bmi.n	8000780 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80006ee:	2c10      	cmp	r4, #16
 80006f0:	d132      	bne.n	8000758 <HAL_ADC_ConfigChannel+0x278>
 80006f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006f6:	d187      	bne.n	8000608 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80006f8:	4a35      	ldr	r2, [pc, #212]	; (80007d0 <HAL_ADC_ConfigChannel+0x2f0>)
 80006fa:	6893      	ldr	r3, [r2, #8]
 80006fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000700:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000702:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <HAL_ADC_ConfigChannel+0x2f8>)
 8000704:	4a35      	ldr	r2, [pc, #212]	; (80007dc <HAL_ADC_ConfigChannel+0x2fc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	fbb3 f2f2 	udiv	r2, r3, r2
 800070c:	230a      	movs	r3, #10
 800070e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000710:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000712:	9b00      	ldr	r3, [sp, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	f43f af77 	beq.w	8000608 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 800071a:	9b00      	ldr	r3, [sp, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	e7f7      	b.n	8000710 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000720:	1c60      	adds	r0, r4, #1
 8000722:	6959      	ldr	r1, [r3, #20]
 8000724:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000728:	2207      	movs	r2, #7
 800072a:	4082      	lsls	r2, r0
 800072c:	ea21 0102 	bic.w	r1, r1, r2
 8000730:	fa06 f200 	lsl.w	r2, r6, r0
 8000734:	430a      	orrs	r2, r1
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	e7b9      	b.n	80006ae <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800073a:	2c11      	cmp	r4, #17
 800073c:	d104      	bne.n	8000748 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <HAL_ADC_ConfigChannel+0x2f0>)
 8000740:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000742:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000746:	e7b8      	b.n	80006ba <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000748:	2c12      	cmp	r4, #18
 800074a:	f47f af5d 	bne.w	8000608 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <HAL_ADC_ConfigChannel+0x2f0>)
 8000750:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000752:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000756:	e7b0      	b.n	80006ba <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000758:	2c11      	cmp	r4, #17
 800075a:	d109      	bne.n	8000770 <HAL_ADC_ConfigChannel+0x290>
 800075c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000760:	f47f af52 	bne.w	8000608 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000764:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <HAL_ADC_ConfigChannel+0x2f0>)
 8000766:	6893      	ldr	r3, [r2, #8]
 8000768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800076c:	6093      	str	r3, [r2, #8]
 800076e:	e74b      	b.n	8000608 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000770:	2c12      	cmp	r4, #18
 8000772:	f47f af49 	bne.w	8000608 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <HAL_ADC_ConfigChannel+0x2f0>)
 8000778:	6893      	ldr	r3, [r2, #8]
 800077a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800077e:	e7f5      	b.n	800076c <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000780:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000788:	2001      	movs	r0, #1
 800078a:	e73e      	b.n	800060a <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800078c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	646b      	str	r3, [r5, #68]	; 0x44
 8000794:	e739      	b.n	800060a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000796:	2002      	movs	r0, #2
 8000798:	e73a      	b.n	8000610 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800079a:	2e01      	cmp	r6, #1
 800079c:	f47f af7f 	bne.w	800069e <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007a4:	40a6      	lsls	r6, r4
 80007a6:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80007a8:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007aa:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 80007ae:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80007b0:	d9b6      	bls.n	8000720 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 80007b2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80007b6:	6999      	ldr	r1, [r3, #24]
 80007b8:	3a1b      	subs	r2, #27
 80007ba:	2007      	movs	r0, #7
 80007bc:	4090      	lsls	r0, r2
 80007be:	ea21 0100 	bic.w	r1, r1, r0
 80007c2:	fa06 f202 	lsl.w	r2, r6, r2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	619a      	str	r2, [r3, #24]
 80007ca:	e770      	b.n	80006ae <HAL_ADC_ConfigChannel+0x1ce>
 80007cc:	83fff000 	.word	0x83fff000
 80007d0:	50000300 	.word	0x50000300
 80007d4:	50000100 	.word	0x50000100
 80007d8:	20000008 	.word	0x20000008
 80007dc:	000f4240 	.word	0x000f4240

080007e0 <HAL_ADCEx_MultiModeConfigChannel>:
{
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	4603      	mov	r3, r0
 80007e4:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80007e6:	681c      	ldr	r4, [r3, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80007e8:	6808      	ldr	r0, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80007ea:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80007ee:	bf0c      	ite	eq
 80007f0:	4a33      	ldreq	r2, [pc, #204]	; (80008c0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80007f2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80007f6:	9201      	str	r2, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80007f8:	9a01      	ldr	r2, [sp, #4]
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d049      	beq.n	8000892 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 80007fe:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8000802:	2d01      	cmp	r5, #1
 8000804:	d047      	beq.n	8000896 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 8000806:	2501      	movs	r5, #1
 8000808:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800080c:	68a5      	ldr	r5, [r4, #8]
 800080e:	076f      	lsls	r7, r5, #29
 8000810:	d435      	bmi.n	800087e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000812:	6895      	ldr	r5, [r2, #8]
 8000814:	076e      	lsls	r6, r5, #29
 8000816:	d432      	bmi.n	800087e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8000818:	4e2a      	ldr	r6, [pc, #168]	; (80008c4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800081a:	b1a0      	cbz	r0, 8000846 <HAL_ADCEx_MultiModeConfigChannel+0x66>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800081c:	684d      	ldr	r5, [r1, #4]
 800081e:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8000822:	462f      	mov	r7, r5
 8000824:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8000826:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 800082a:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 800082e:	433d      	orrs	r5, r7
 8000830:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000832:	68a5      	ldr	r5, [r4, #8]
 8000834:	f005 0503 	and.w	r5, r5, #3
 8000838:	2d01      	cmp	r5, #1
 800083a:	d12e      	bne.n	800089a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800083c:	6824      	ldr	r4, [r4, #0]
 800083e:	07e5      	lsls	r5, r4, #31
 8000840:	d52b      	bpl.n	800089a <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	e020      	b.n	8000888 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000846:	68b1      	ldr	r1, [r6, #8]
 8000848:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800084c:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800084e:	68a1      	ldr	r1, [r4, #8]
 8000850:	f001 0103 	and.w	r1, r1, #3
 8000854:	2901      	cmp	r1, #1
 8000856:	d102      	bne.n	800085e <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8000858:	6821      	ldr	r1, [r4, #0]
 800085a:	07c9      	lsls	r1, r1, #31
 800085c:	d4f1      	bmi.n	8000842 <HAL_ADCEx_MultiModeConfigChannel+0x62>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800085e:	6891      	ldr	r1, [r2, #8]
 8000860:	f001 0103 	and.w	r1, r1, #3
 8000864:	2901      	cmp	r1, #1
 8000866:	d102      	bne.n	800086e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	07d2      	lsls	r2, r2, #31
 800086c:	d4e9      	bmi.n	8000842 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800086e:	4915      	ldr	r1, [pc, #84]	; (80008c4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8000870:	688a      	ldr	r2, [r1, #8]
 8000872:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000876:	f022 020f 	bic.w	r2, r2, #15
 800087a:	608a      	str	r2, [r1, #8]
 800087c:	e7e1      	b.n	8000842 <HAL_ADCEx_MultiModeConfigChannel+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800087e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000880:	f042 0220 	orr.w	r2, r2, #32
 8000884:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000886:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 800088e:	b017      	add	sp, #92	; 0x5c
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
 8000894:	e7fb      	b.n	800088e <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8000896:	2002      	movs	r0, #2
 8000898:	e7f9      	b.n	800088e <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800089a:	6894      	ldr	r4, [r2, #8]
 800089c:	f004 0403 	and.w	r4, r4, #3
 80008a0:	2c01      	cmp	r4, #1
 80008a2:	d102      	bne.n	80008aa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	07d4      	lsls	r4, r2, #31
 80008a8:	d4cb      	bmi.n	8000842 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80008aa:	4c06      	ldr	r4, [pc, #24]	; (80008c4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80008ac:	6889      	ldr	r1, [r1, #8]
 80008ae:	68a2      	ldr	r2, [r4, #8]
 80008b0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80008b4:	4308      	orrs	r0, r1
 80008b6:	f022 020f 	bic.w	r2, r2, #15
 80008ba:	4310      	orrs	r0, r2
 80008bc:	60a0      	str	r0, [r4, #8]
 80008be:	e7c0      	b.n	8000842 <HAL_ADCEx_MultiModeConfigChannel+0x62>
 80008c0:	50000100 	.word	0x50000100
 80008c4:	50000300 	.word	0x50000300

080008c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008d0:	041b      	lsls	r3, r3, #16
 80008d2:	0c1b      	lsrs	r3, r3, #16
 80008d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008d8:	0200      	lsls	r0, r0, #8
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80008e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008e4:	60d3      	str	r3, [r2, #12]
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ee:	b530      	push	{r4, r5, lr}
 80008f0:	68dc      	ldr	r4, [r3, #12]
 80008f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	bf28      	it	cs
 8000900:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	f04f 0501 	mov.w	r5, #1
 8000908:	fa05 f303 	lsl.w	r3, r5, r3
 800090c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000910:	bf8c      	ite	hi
 8000912:	3c03      	subhi	r4, #3
 8000914:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000916:	4019      	ands	r1, r3
 8000918:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091a:	fa05 f404 	lsl.w	r4, r5, r4
 800091e:	3c01      	subs	r4, #1
 8000920:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000922:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	ea42 0201 	orr.w	r2, r2, r1
 8000928:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092c:	bfaf      	iteee	ge
 800092e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	f000 000f 	andlt.w	r0, r0, #15
 8000936:	4b06      	ldrlt	r3, [pc, #24]	; (8000950 <HAL_NVIC_SetPriority+0x64>)
 8000938:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	bfa5      	ittet	ge
 800093c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000940:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000948:	bd30      	pop	{r4, r5, pc}
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00
 8000950:	e000ed14 	.word	0xe000ed14

08000954 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	3801      	subs	r0, #1
 8000956:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800095a:	d20a      	bcs.n	8000972 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	21f0      	movs	r1, #240	; 0xf0
 8000964:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000982:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000984:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000986:	bf0c      	ite	eq
 8000988:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800098c:	f022 0204 	bicne.w	r2, r2, #4
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	4770      	bx	lr
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000998:	4770      	bx	lr

0800099a <HAL_SYSTICK_IRQHandler>:
{
 800099a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800099c:	f7ff fffc 	bl	8000998 <HAL_SYSTICK_Callback>
 80009a0:	bd08      	pop	{r3, pc}
	...

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009aa:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ac:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000b14 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009b0:	4a56      	ldr	r2, [pc, #344]	; (8000b0c <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009b2:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80009b4:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 80009b8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009ba:	9c01      	ldr	r4, [sp, #4]
 80009bc:	40dc      	lsrs	r4, r3
 80009be:	d102      	bne.n	80009c6 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 80009c0:	b005      	add	sp, #20
 80009c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009c6:	2401      	movs	r4, #1
 80009c8:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80009cc:	9c01      	ldr	r4, [sp, #4]
 80009ce:	ea14 050a 	ands.w	r5, r4, sl
 80009d2:	f000 8093 	beq.w	8000afc <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d6:	684c      	ldr	r4, [r1, #4]
 80009d8:	f024 0b10 	bic.w	fp, r4, #16
 80009dc:	f1bb 0f02 	cmp.w	fp, #2
 80009e0:	d111      	bne.n	8000a06 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80009e2:	08df      	lsrs	r7, r3, #3
 80009e4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009e8:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80009ec:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009ee:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80009f2:	fa09 fc0e 	lsl.w	ip, r9, lr
 80009f6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009fa:	690e      	ldr	r6, [r1, #16]
 80009fc:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a00:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000a04:	623e      	str	r6, [r7, #32]
 8000a06:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a0a:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000a0c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a0e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a12:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a14:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a18:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a1a:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1e:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a22:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a26:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000a2a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a2c:	d811      	bhi.n	8000a52 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000a2e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a30:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a34:	68ce      	ldr	r6, [r1, #12]
 8000a36:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000a3a:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000a3e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a40:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a42:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a46:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000a4a:	409e      	lsls	r6, r3
 8000a4c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000a50:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a52:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a54:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a56:	688e      	ldr	r6, [r1, #8]
 8000a58:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a5c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000a60:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a62:	d54b      	bpl.n	8000afc <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000a68:	f046 0601 	orr.w	r6, r6, #1
 8000a6c:	f8c8 6018 	str.w	r6, [r8, #24]
 8000a70:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000a74:	f023 0703 	bic.w	r7, r3, #3
 8000a78:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a7c:	f006 0601 	and.w	r6, r6, #1
 8000a80:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a84:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a86:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000a8c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a8e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a92:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a96:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a9a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a9e:	d02f      	beq.n	8000b00 <HAL_GPIO_Init+0x15c>
 8000aa0:	4e1b      	ldr	r6, [pc, #108]	; (8000b10 <HAL_GPIO_Init+0x16c>)
 8000aa2:	42b0      	cmp	r0, r6
 8000aa4:	d02e      	beq.n	8000b04 <HAL_GPIO_Init+0x160>
 8000aa6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000aaa:	42b0      	cmp	r0, r6
 8000aac:	d02c      	beq.n	8000b08 <HAL_GPIO_Init+0x164>
 8000aae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ab2:	42b0      	cmp	r0, r6
 8000ab4:	bf14      	ite	ne
 8000ab6:	2605      	movne	r6, #5
 8000ab8:	2603      	moveq	r6, #3
 8000aba:	fa06 f60e 	lsl.w	r6, r6, lr
 8000abe:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ac2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000ac4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ac8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000acc:	bf0c      	ite	eq
 8000ace:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ad0:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000ad2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000ad4:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ada:	bf0c      	ite	eq
 8000adc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ade:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000ae0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000ae2:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ae8:	bf0c      	ite	eq
 8000aea:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000aec:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000aee:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000af0:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000af4:	bf54      	ite	pl
 8000af6:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000af8:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000afa:	60d6      	str	r6, [r2, #12]
    position++;
 8000afc:	3301      	adds	r3, #1
 8000afe:	e75c      	b.n	80009ba <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b00:	2600      	movs	r6, #0
 8000b02:	e7da      	b.n	8000aba <HAL_GPIO_Init+0x116>
 8000b04:	2601      	movs	r6, #1
 8000b06:	e7d8      	b.n	8000aba <HAL_GPIO_Init+0x116>
 8000b08:	2602      	movs	r6, #2
 8000b0a:	e7d6      	b.n	8000aba <HAL_GPIO_Init+0x116>
 8000b0c:	40010400 	.word	0x40010400
 8000b10:	48000400 	.word	0x48000400
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b18:	b10a      	cbz	r2, 8000b1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b1a:	6181      	str	r1, [r0, #24]
 8000b1c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b1e:	6281      	str	r1, [r0, #40]	; 0x28
 8000b20:	4770      	bx	lr

08000b22 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b22:	6943      	ldr	r3, [r0, #20]
 8000b24:	4059      	eors	r1, r3
 8000b26:	6141      	str	r1, [r0, #20]
 8000b28:	4770      	bx	lr
	...

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b30:	4605      	mov	r5, r0
 8000b32:	b918      	cbnz	r0, 8000b3c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b34:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000b36:	b002      	add	sp, #8
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3c:	6803      	ldr	r3, [r0, #0]
 8000b3e:	07da      	lsls	r2, r3, #31
 8000b40:	d411      	bmi.n	8000b66 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	079b      	lsls	r3, r3, #30
 8000b46:	f100 8085 	bmi.w	8000c54 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	071c      	lsls	r4, r3, #28
 8000b4e:	f100 80f6 	bmi.w	8000d3e <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	0758      	lsls	r0, r3, #29
 8000b56:	f100 813f 	bmi.w	8000dd8 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b5a:	69ea      	ldr	r2, [r5, #28]
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	f040 81d6 	bne.w	8000f0e <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000b62:	2000      	movs	r0, #0
 8000b64:	e7e7      	b.n	8000b36 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b66:	4cba      	ldr	r4, [pc, #744]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000b68:	6863      	ldr	r3, [r4, #4]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d007      	beq.n	8000b82 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b72:	6863      	ldr	r3, [r4, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d116      	bne.n	8000baa <HAL_RCC_OscConfig+0x7e>
 8000b7c:	6863      	ldr	r3, [r4, #4]
 8000b7e:	03df      	lsls	r7, r3, #15
 8000b80:	d513      	bpl.n	8000baa <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b86:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b8a:	6821      	ldr	r1, [r4, #0]
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	2201      	movs	r2, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	420b      	tst	r3, r1
 8000ba0:	d0cf      	beq.n	8000b42 <HAL_RCC_OscConfig+0x16>
 8000ba2:	686b      	ldr	r3, [r5, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1cc      	bne.n	8000b42 <HAL_RCC_OscConfig+0x16>
 8000ba8:	e7c4      	b.n	8000b34 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000baa:	686a      	ldr	r2, [r5, #4]
 8000bac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000bb0:	d125      	bne.n	8000bfe <HAL_RCC_OscConfig+0xd2>
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bbc:	68a9      	ldr	r1, [r5, #8]
 8000bbe:	f023 030f 	bic.w	r3, r3, #15
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc6:	b352      	cbz	r2, 8000c1e <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fb40 	bl	800024c <HAL_GetTick>
 8000bcc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000bd0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	2701      	movs	r7, #1
 8000bd4:	fa96 f3a6 	rbit	r3, r6
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	fa96 f3a6 	rbit	r3, r6
 8000bde:	fab3 f383 	clz	r3, r3
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	fa07 f303 	lsl.w	r3, r7, r3
 8000bea:	4213      	tst	r3, r2
 8000bec:	d1a9      	bne.n	8000b42 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bee:	f7ff fb2d 	bl	800024c <HAL_GetTick>
 8000bf2:	eba0 0008 	sub.w	r0, r0, r8
 8000bf6:	2864      	cmp	r0, #100	; 0x64
 8000bf8:	d9ec      	bls.n	8000bd4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	e79b      	b.n	8000b36 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	b932      	cbnz	r2, 8000c10 <HAL_RCC_OscConfig+0xe4>
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c06:	6023      	str	r3, [r4, #0]
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0e:	e7d3      	b.n	8000bb8 <HAL_RCC_OscConfig+0x8c>
 8000c10:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000c14:	d1f5      	bne.n	8000c02 <HAL_RCC_OscConfig+0xd6>
 8000c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1a:	6023      	str	r3, [r4, #0]
 8000c1c:	e7c9      	b.n	8000bb2 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fb15 	bl	800024c <HAL_GetTick>
 8000c22:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fa96 f3a6 	rbit	r3, r6
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	fa96 f3a6 	rbit	r3, r6
 8000c34:	fab3 f383 	clz	r3, r3
 8000c38:	f003 031f 	and.w	r3, r3, #31
 8000c3c:	fa07 f303 	lsl.w	r3, r7, r3
 8000c40:	4213      	tst	r3, r2
 8000c42:	f43f af7e 	beq.w	8000b42 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c46:	f7ff fb01 	bl	800024c <HAL_GetTick>
 8000c4a:	eba0 0008 	sub.w	r0, r0, r8
 8000c4e:	2864      	cmp	r0, #100	; 0x64
 8000c50:	d9eb      	bls.n	8000c2a <HAL_RCC_OscConfig+0xfe>
 8000c52:	e7d2      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c54:	4c7e      	ldr	r4, [pc, #504]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	f013 0f0c 	tst.w	r3, #12
 8000c5c:	d007      	beq.n	8000c6e <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c5e:	6863      	ldr	r3, [r4, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d122      	bne.n	8000cae <HAL_RCC_OscConfig+0x182>
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	03de      	lsls	r6, r3, #15
 8000c6c:	d41f      	bmi.n	8000cae <HAL_RCC_OscConfig+0x182>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c74:	6821      	ldr	r1, [r4, #0]
 8000c76:	fa93 f3a3 	rbit	r3, r3
 8000c7a:	fab3 f383 	clz	r3, r3
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	2201      	movs	r2, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	420b      	tst	r3, r1
 8000c8a:	d003      	beq.n	8000c94 <HAL_RCC_OscConfig+0x168>
 8000c8c:	692b      	ldr	r3, [r5, #16]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f47f af50 	bne.w	8000b34 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c94:	6821      	ldr	r1, [r4, #0]
 8000c96:	23f8      	movs	r3, #248	; 0xf8
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	fab3 f283 	clz	r2, r3
 8000ca0:	696b      	ldr	r3, [r5, #20]
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	6023      	str	r3, [r4, #0]
 8000cac:	e74d      	b.n	8000b4a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cae:	692a      	ldr	r2, [r5, #16]
 8000cb0:	2601      	movs	r6, #1
 8000cb2:	b30a      	cbz	r2, 8000cf8 <HAL_RCC_OscConfig+0x1cc>
 8000cb4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000cb8:	fab3 f383 	clz	r3, r3
 8000cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	2702      	movs	r7, #2
 8000cc8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000cca:	f7ff fabf 	bl	800024c <HAL_GetTick>
 8000cce:	4680      	mov	r8, r0
 8000cd0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	6822      	ldr	r2, [r4, #0]
 8000cd6:	fa97 f3a7 	rbit	r3, r7
 8000cda:	fab3 f383 	clz	r3, r3
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	fa06 f303 	lsl.w	r3, r6, r3
 8000ce6:	4213      	tst	r3, r2
 8000ce8:	d1d4      	bne.n	8000c94 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cea:	f7ff faaf 	bl	800024c <HAL_GetTick>
 8000cee:	eba0 0008 	sub.w	r0, r0, r8
 8000cf2:	2802      	cmp	r0, #2
 8000cf4:	d9ec      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x1a4>
 8000cf6:	e780      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000cf8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000cfc:	fab3 f383 	clz	r3, r3
 8000d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	2702      	movs	r7, #2
 8000d0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fa9d 	bl	800024c <HAL_GetTick>
 8000d12:	4680      	mov	r8, r0
 8000d14:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	fa97 f3a7 	rbit	r3, r7
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	fa06 f303 	lsl.w	r3, r6, r3
 8000d2a:	4213      	tst	r3, r2
 8000d2c:	f43f af0d 	beq.w	8000b4a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff fa8c 	bl	800024c <HAL_GetTick>
 8000d34:	eba0 0008 	sub.w	r0, r0, r8
 8000d38:	2802      	cmp	r0, #2
 8000d3a:	d9eb      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1e8>
 8000d3c:	e75d      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3e:	69aa      	ldr	r2, [r5, #24]
 8000d40:	4e43      	ldr	r6, [pc, #268]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000d42:	4944      	ldr	r1, [pc, #272]	; (8000e54 <HAL_RCC_OscConfig+0x328>)
 8000d44:	2401      	movs	r4, #1
 8000d46:	b31a      	cbz	r2, 8000d90 <HAL_RCC_OscConfig+0x264>
 8000d48:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000d4c:	fab3 f383 	clz	r3, r3
 8000d50:	440b      	add	r3, r1
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	2702      	movs	r7, #2
 8000d56:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000d58:	f7ff fa78 	bl	800024c <HAL_GetTick>
 8000d5c:	4680      	mov	r8, r0
 8000d5e:	fa97 f3a7 	rbit	r3, r7
 8000d62:	fa97 f3a7 	rbit	r3, r7
 8000d66:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000d6c:	fa97 f3a7 	rbit	r3, r7
 8000d70:	fab3 f383 	clz	r3, r3
 8000d74:	f003 031f 	and.w	r3, r3, #31
 8000d78:	fa04 f303 	lsl.w	r3, r4, r3
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	f47f aee8 	bne.w	8000b52 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d82:	f7ff fa63 	bl	800024c <HAL_GetTick>
 8000d86:	eba0 0008 	sub.w	r0, r0, r8
 8000d8a:	2802      	cmp	r0, #2
 8000d8c:	d9e7      	bls.n	8000d5e <HAL_RCC_OscConfig+0x232>
 8000d8e:	e734      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000d90:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	440b      	add	r3, r1
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	2702      	movs	r7, #2
 8000d9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000da0:	f7ff fa54 	bl	800024c <HAL_GetTick>
 8000da4:	4680      	mov	r8, r0
 8000da6:	fa97 f3a7 	rbit	r3, r7
 8000daa:	fa97 f3a7 	rbit	r3, r7
 8000dae:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000db4:	fa97 f3a7 	rbit	r3, r7
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	fa04 f303 	lsl.w	r3, r4, r3
 8000dc4:	4213      	tst	r3, r2
 8000dc6:	f43f aec4 	beq.w	8000b52 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dca:	f7ff fa3f 	bl	800024c <HAL_GetTick>
 8000dce:	eba0 0008 	sub.w	r0, r0, r8
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9e7      	bls.n	8000da6 <HAL_RCC_OscConfig+0x27a>
 8000dd6:	e710      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd8:	4c1d      	ldr	r4, [pc, #116]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000dda:	69e3      	ldr	r3, [r4, #28]
 8000ddc:	00d9      	lsls	r1, r3, #3
 8000dde:	d434      	bmi.n	8000e4a <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	69e3      	ldr	r3, [r4, #28]
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de6:	61e3      	str	r3, [r4, #28]
 8000de8:	69e3      	ldr	r3, [r4, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000df2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	4f18      	ldr	r7, [pc, #96]	; (8000e58 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	05da      	lsls	r2, r3, #23
 8000dfa:	d52f      	bpl.n	8000e5c <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	68eb      	ldr	r3, [r5, #12]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d13d      	bne.n	8000e7e <HAL_RCC_OscConfig+0x352>
 8000e02:	6a23      	ldr	r3, [r4, #32]
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fa1f 	bl	800024c <HAL_GetTick>
 8000e0e:	2702      	movs	r7, #2
 8000e10:	4682      	mov	sl, r0
 8000e12:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	f04f 0801 	mov.w	r8, #1
 8000e18:	fa97 f3a7 	rbit	r3, r7
 8000e1c:	fa97 f3a7 	rbit	r3, r7
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d06c      	beq.n	8000efe <HAL_RCC_OscConfig+0x3d2>
 8000e24:	6a22      	ldr	r2, [r4, #32]
 8000e26:	fa99 f3a9 	rbit	r3, r9
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	fa08 f303 	lsl.w	r3, r8, r3
 8000e36:	4213      	tst	r3, r2
 8000e38:	d058      	beq.n	8000eec <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f43f ae8d 	beq.w	8000b5a <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e40:	69e3      	ldr	r3, [r4, #28]
 8000e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e46:	61e3      	str	r3, [r4, #28]
 8000e48:	e687      	b.n	8000b5a <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	e7d2      	b.n	8000df4 <HAL_RCC_OscConfig+0x2c8>
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	10908120 	.word	0x10908120
 8000e58:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e64:	f7ff f9f2 	bl	800024c <HAL_GetTick>
 8000e68:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	d4c5      	bmi.n	8000dfc <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e70:	f7ff f9ec 	bl	800024c <HAL_GetTick>
 8000e74:	eba0 0008 	sub.w	r0, r0, r8
 8000e78:	2864      	cmp	r0, #100	; 0x64
 8000e7a:	d9f6      	bls.n	8000e6a <HAL_RCC_OscConfig+0x33e>
 8000e7c:	e6bd      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7e:	bb3b      	cbnz	r3, 8000ed0 <HAL_RCC_OscConfig+0x3a4>
 8000e80:	6a23      	ldr	r3, [r4, #32]
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	6223      	str	r3, [r4, #32]
 8000e88:	6a23      	ldr	r3, [r4, #32]
 8000e8a:	f023 0304 	bic.w	r3, r3, #4
 8000e8e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e90:	f7ff f9dc 	bl	800024c <HAL_GetTick>
 8000e94:	2702      	movs	r7, #2
 8000e96:	4682      	mov	sl, r0
 8000e98:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e9a:	f04f 0801 	mov.w	r8, #1
 8000e9e:	fa97 f3a7 	rbit	r3, r7
 8000ea2:	fa97 f3a7 	rbit	r3, r7
 8000ea6:	b373      	cbz	r3, 8000f06 <HAL_RCC_OscConfig+0x3da>
 8000ea8:	6a22      	ldr	r2, [r4, #32]
 8000eaa:	fa99 f3a9 	rbit	r3, r9
 8000eae:	fab3 f383 	clz	r3, r3
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	fa08 f303 	lsl.w	r3, r8, r3
 8000eba:	4213      	tst	r3, r2
 8000ebc:	d0bd      	beq.n	8000e3a <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f7ff f9c5 	bl	800024c <HAL_GetTick>
 8000ec2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ec6:	eba0 000a 	sub.w	r0, r0, sl
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d9e7      	bls.n	8000e9e <HAL_RCC_OscConfig+0x372>
 8000ece:	e694      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	6a23      	ldr	r3, [r4, #32]
 8000ed4:	d103      	bne.n	8000ede <HAL_RCC_OscConfig+0x3b2>
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6223      	str	r3, [r4, #32]
 8000edc:	e791      	b.n	8000e02 <HAL_RCC_OscConfig+0x2d6>
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6223      	str	r3, [r4, #32]
 8000ee4:	6a23      	ldr	r3, [r4, #32]
 8000ee6:	f023 0304 	bic.w	r3, r3, #4
 8000eea:	e78d      	b.n	8000e08 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eec:	f7ff f9ae 	bl	800024c <HAL_GetTick>
 8000ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef4:	eba0 000a 	sub.w	r0, r0, sl
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	d98d      	bls.n	8000e18 <HAL_RCC_OscConfig+0x2ec>
 8000efc:	e67d      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000efe:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f04:	e78f      	b.n	8000e26 <HAL_RCC_OscConfig+0x2fa>
 8000f06:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f0c:	e7cd      	b.n	8000eaa <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0e:	4c41      	ldr	r4, [pc, #260]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	f43f ae0c 	beq.w	8000b34 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1c:	2a02      	cmp	r2, #2
 8000f1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f22:	d152      	bne.n	8000fca <HAL_RCC_OscConfig+0x49e>
 8000f24:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f3a:	f7ff f987 	bl	800024c <HAL_GetTick>
 8000f3e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000f42:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f44:	2601      	movs	r6, #1
 8000f46:	fa97 f3a7 	rbit	r3, r7
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	fa97 f3a7 	rbit	r3, r7
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	fa06 f303 	lsl.w	r3, r6, r3
 8000f5c:	4213      	tst	r3, r2
 8000f5e:	d12d      	bne.n	8000fbc <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f60:	6862      	ldr	r2, [r4, #4]
 8000f62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f64:	6a29      	ldr	r1, [r5, #32]
 8000f66:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	6063      	str	r3, [r4, #4]
 8000f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f74:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f8a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f8c:	f7ff f95e 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f90:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000f92:	4607      	mov	r7, r0
 8000f94:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f98:	6822      	ldr	r2, [r4, #0]
 8000f9a:	fa95 f3a5 	rbit	r3, r5
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	fa06 f303 	lsl.w	r3, r6, r3
 8000faa:	4213      	tst	r3, r2
 8000fac:	f47f add9 	bne.w	8000b62 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb0:	f7ff f94c 	bl	800024c <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9ec      	bls.n	8000f94 <HAL_RCC_OscConfig+0x468>
 8000fba:	e61e      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbc:	f7ff f946 	bl	800024c <HAL_GetTick>
 8000fc0:	eba0 0008 	sub.w	r0, r0, r8
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9be      	bls.n	8000f46 <HAL_RCC_OscConfig+0x41a>
 8000fc8:	e617      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000fca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000fce:	fab3 f383 	clz	r3, r3
 8000fd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fe0:	f7ff f934 	bl	800024c <HAL_GetTick>
 8000fe4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000fe8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	2601      	movs	r6, #1
 8000fec:	fa95 f3a5 	rbit	r3, r5
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	fa95 f3a5 	rbit	r3, r5
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	fa06 f303 	lsl.w	r3, r6, r3
 8001002:	4213      	tst	r3, r2
 8001004:	f43f adad 	beq.w	8000b62 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001008:	f7ff f920 	bl	800024c <HAL_GetTick>
 800100c:	1bc0      	subs	r0, r0, r7
 800100e:	2802      	cmp	r0, #2
 8001010:	d9ec      	bls.n	8000fec <HAL_RCC_OscConfig+0x4c0>
 8001012:	e5f2      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001018:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800101a:	4c13      	ldr	r4, [pc, #76]	; (8001068 <HAL_RCC_GetSysClockFreq+0x50>)
 800101c:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800101e:	f001 030c 	and.w	r3, r1, #12
 8001022:	2b08      	cmp	r3, #8
 8001024:	d11e      	bne.n	8001064 <HAL_RCC_GetSysClockFreq+0x4c>
 8001026:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800102a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800102e:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_RCC_GetSysClockFreq+0x54>)
 800103c:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800103e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001040:	220f      	movs	r2, #15
 8001042:	fa92 f2a2 	rbit	r2, r2
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	40d3      	lsrs	r3, r2
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_RCC_GetSysClockFreq+0x58>)
 8001052:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001054:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001056:	bf4a      	itet	mi
 8001058:	4b06      	ldrmi	r3, [pc, #24]	; (8001074 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800105a:	4b07      	ldrpl	r3, [pc, #28]	; (8001078 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800105c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001060:	4358      	muls	r0, r3
 8001062:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001066:	bd10      	pop	{r4, pc}
 8001068:	40021000 	.word	0x40021000
 800106c:	08001ac0 	.word	0x08001ac0
 8001070:	08001ad0 	.word	0x08001ad0
 8001074:	007a1200 	.word	0x007a1200
 8001078:	003d0900 	.word	0x003d0900

0800107c <HAL_RCC_ClockConfig>:
{
 800107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001080:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001082:	4604      	mov	r4, r0
 8001084:	b910      	cbnz	r0, 800108c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001086:	2001      	movs	r0, #1
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_RCC_ClockConfig+0x144>)
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	428b      	cmp	r3, r1
 8001096:	d32e      	bcc.n	80010f6 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001098:	6822      	ldr	r2, [r4, #0]
 800109a:	0791      	lsls	r1, r2, #30
 800109c:	d436      	bmi.n	800110c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109e:	07d2      	lsls	r2, r2, #31
 80010a0:	d43c      	bmi.n	800111c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010a2:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <HAL_RCC_ClockConfig+0x144>)
 80010a4:	6813      	ldr	r3, [r2, #0]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	429d      	cmp	r5, r3
 80010ac:	d375      	bcc.n	800119a <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	4d44      	ldr	r5, [pc, #272]	; (80011c4 <HAL_RCC_ClockConfig+0x148>)
 80010b2:	f012 0f04 	tst.w	r2, #4
 80010b6:	d17c      	bne.n	80011b2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	0713      	lsls	r3, r2, #28
 80010ba:	d506      	bpl.n	80010ca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010bc:	686b      	ldr	r3, [r5, #4]
 80010be:	6922      	ldr	r2, [r4, #16]
 80010c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010c8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010ca:	f7ff ffa5 	bl	8001018 <HAL_RCC_GetSysClockFreq>
 80010ce:	686b      	ldr	r3, [r5, #4]
 80010d0:	22f0      	movs	r2, #240	; 0xf0
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	fab2 f282 	clz	r2, r2
 80010da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010de:	40d3      	lsrs	r3, r2
 80010e0:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <HAL_RCC_ClockConfig+0x14c>)
 80010e2:	5cd3      	ldrb	r3, [r2, r3]
 80010e4:	40d8      	lsrs	r0, r3
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_RCC_ClockConfig+0x150>)
 80010e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff f86c 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80010f0:	2000      	movs	r0, #0
 80010f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	f023 0307 	bic.w	r3, r3, #7
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	4299      	cmp	r1, r3
 8001108:	d1bd      	bne.n	8001086 <HAL_RCC_ClockConfig+0xa>
 800110a:	e7c5      	b.n	8001098 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	492d      	ldr	r1, [pc, #180]	; (80011c4 <HAL_RCC_ClockConfig+0x148>)
 800110e:	68a0      	ldr	r0, [r4, #8]
 8001110:	684b      	ldr	r3, [r1, #4]
 8001112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001116:	4303      	orrs	r3, r0
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	e7c0      	b.n	800109e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111c:	6862      	ldr	r2, [r4, #4]
 800111e:	4e29      	ldr	r6, [pc, #164]	; (80011c4 <HAL_RCC_ClockConfig+0x148>)
 8001120:	2a01      	cmp	r2, #1
 8001122:	d127      	bne.n	8001174 <HAL_RCC_ClockConfig+0xf8>
 8001124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001128:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112c:	6831      	ldr	r1, [r6, #0]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	d0a1      	beq.n	8001086 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001142:	6873      	ldr	r3, [r6, #4]
 8001144:	f023 0303 	bic.w	r3, r3, #3
 8001148:	431a      	orrs	r2, r3
 800114a:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800114c:	f7ff f87e 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001154:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	6873      	ldr	r3, [r6, #4]
 8001158:	6862      	ldr	r2, [r4, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001162:	d09e      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001164:	f7ff f872 	bl	800024c <HAL_GetTick>
 8001168:	1bc0      	subs	r0, r0, r7
 800116a:	4540      	cmp	r0, r8
 800116c:	d9f3      	bls.n	8001156 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800116e:	2003      	movs	r0, #3
}
 8001170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001174:	2a02      	cmp	r2, #2
 8001176:	bf0c      	ite	eq
 8001178:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800117c:	2302      	movne	r3, #2
 800117e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001182:	6830      	ldr	r0, [r6, #0]
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	4203      	tst	r3, r0
 8001198:	e7d2      	b.n	8001140 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	6813      	ldr	r3, [r2, #0]
 800119c:	f023 0307 	bic.w	r3, r3, #7
 80011a0:	432b      	orrs	r3, r5
 80011a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	429d      	cmp	r5, r3
 80011ac:	f47f af6b 	bne.w	8001086 <HAL_RCC_ClockConfig+0xa>
 80011b0:	e77d      	b.n	80010ae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b2:	686b      	ldr	r3, [r5, #4]
 80011b4:	68e1      	ldr	r1, [r4, #12]
 80011b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011ba:	430b      	orrs	r3, r1
 80011bc:	606b      	str	r3, [r5, #4]
 80011be:	e77b      	b.n	80010b8 <HAL_RCC_ClockConfig+0x3c>
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	08001ae4 	.word	0x08001ae4
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80011d0:	4b01      	ldr	r3, [pc, #4]	; (80011d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	fa92 f2a2 	rbit	r2, r2
 80011e8:	fab2 f282 	clz	r2, r2
 80011ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011f0:	40d3      	lsrs	r3, r2
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80011f8:	6810      	ldr	r0, [r2, #0]
}    
 80011fa:	40d8      	lsrs	r0, r3
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	08001af4 	.word	0x08001af4
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_RCC_GetPCLK2Freq+0x24>)
 800120e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	fa92 f2a2 	rbit	r2, r2
 8001218:	fab2 f282 	clz	r2, r2
 800121c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001220:	40d3      	lsrs	r3, r2
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001228:	6810      	ldr	r0, [r2, #0]
} 
 800122a:	40d8      	lsrs	r0, r3
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	08001af4 	.word	0x08001af4
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800123c:	6803      	ldr	r3, [r0, #0]
{
 800123e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001242:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001244:	03d8      	lsls	r0, r3, #15
 8001246:	d520      	bpl.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001248:	4c50      	ldr	r4, [pc, #320]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800124a:	69e3      	ldr	r3, [r4, #28]
 800124c:	00d9      	lsls	r1, r3, #3
 800124e:	d444      	bmi.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	69e3      	ldr	r3, [r4, #28]
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001256:	61e3      	str	r3, [r4, #28]
 8001258:	69e3      	ldr	r3, [r4, #28]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001262:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4f4a      	ldr	r7, [pc, #296]	; (8001390 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	05da      	lsls	r2, r3, #23
 800126a:	d538      	bpl.n	80012de <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800126c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800126e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001272:	d148      	bne.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001274:	6a23      	ldr	r3, [r4, #32]
 8001276:	686a      	ldr	r2, [r5, #4]
 8001278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800127c:	4313      	orrs	r3, r2
 800127e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001280:	b11e      	cbz	r6, 800128a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001282:	69e3      	ldr	r3, [r4, #28]
 8001284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001288:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800128a:	6828      	ldr	r0, [r5, #0]
 800128c:	07c1      	lsls	r1, r0, #31
 800128e:	d506      	bpl.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001290:	4a3e      	ldr	r2, [pc, #248]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001292:	68a9      	ldr	r1, [r5, #8]
 8001294:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	430b      	orrs	r3, r1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800129e:	0682      	lsls	r2, r0, #26
 80012a0:	d506      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012a2:	4a3a      	ldr	r2, [pc, #232]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80012a4:	68e9      	ldr	r1, [r5, #12]
 80012a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012a8:	f023 0310 	bic.w	r3, r3, #16
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80012b0:	0603      	lsls	r3, r0, #24
 80012b2:	d506      	bpl.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80012b4:	4a35      	ldr	r2, [pc, #212]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80012b6:	6929      	ldr	r1, [r5, #16]
 80012b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80012ba:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80012be:	430b      	orrs	r3, r1
 80012c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80012c2:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80012c6:	d01b      	beq.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80012c8:	4a30      	ldr	r2, [pc, #192]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80012ca:	6969      	ldr	r1, [r5, #20]
 80012cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012d2:	430b      	orrs	r3, r1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80012d6:	2000      	movs	r0, #0
 80012d8:	e012      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 80012da:	2600      	movs	r6, #0
 80012dc:	e7c2      	b.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80012e6:	f7fe ffb1 	bl	800024c <HAL_GetTick>
 80012ea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	d4bc      	bmi.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7fe ffab 	bl	800024c <HAL_GetTick>
 80012f6:	eba0 0008 	sub.w	r0, r0, r8
 80012fa:	2864      	cmp	r0, #100	; 0x64
 80012fc:	d9f6      	bls.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 80012fe:	2003      	movs	r0, #3
}
 8001300:	b002      	add	sp, #8
 8001302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001306:	686a      	ldr	r2, [r5, #4]
 8001308:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800130c:	4293      	cmp	r3, r2
 800130e:	d0b1      	beq.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001310:	6a21      	ldr	r1, [r4, #32]
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800131a:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800131e:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001394 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001322:	fab2 f282 	clz	r2, r2
 8001326:	4472      	add	r2, lr
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	2701      	movs	r7, #1
 800132c:	6017      	str	r7, [r2, #0]
 800132e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	4473      	add	r3, lr
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800133e:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001340:	07c8      	lsls	r0, r1, #31
 8001342:	d597      	bpl.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001344:	f7fe ff82 	bl	800024c <HAL_GetTick>
 8001348:	f04f 0802 	mov.w	r8, #2
 800134c:	4682      	mov	sl, r0
 800134e:	46c1      	mov	r9, r8
 8001350:	fa98 f3a8 	rbit	r3, r8
 8001354:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001358:	b19b      	cbz	r3, 8001382 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800135a:	6a22      	ldr	r2, [r4, #32]
 800135c:	fa99 f3a9 	rbit	r3, r9
 8001360:	fab3 f383 	clz	r3, r3
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa07 f303 	lsl.w	r3, r7, r3
 800136c:	4213      	tst	r3, r2
 800136e:	d181      	bne.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001370:	f7fe ff6c 	bl	800024c <HAL_GetTick>
 8001374:	f241 3388 	movw	r3, #5000	; 0x1388
 8001378:	eba0 000a 	sub.w	r0, r0, sl
 800137c:	4298      	cmp	r0, r3
 800137e:	d9e7      	bls.n	8001350 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001380:	e7bd      	b.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8001382:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001386:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001388:	e7e8      	b.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
 8001394:	10908100 	.word	0x10908100

08001398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800139c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800139e:	6921      	ldr	r1, [r4, #16]
 80013a0:	68a3      	ldr	r3, [r4, #8]
 80013a2:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013a4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013a6:	430b      	orrs	r3, r1
 80013a8:	6961      	ldr	r1, [r4, #20]
 80013aa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013ac:	4949      	ldr	r1, [pc, #292]	; (80014d4 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013ae:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013b0:	4001      	ands	r1, r0
 80013b2:	430b      	orrs	r3, r1
 80013b4:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013b6:	686b      	ldr	r3, [r5, #4]
 80013b8:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013ba:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c0:	430b      	orrs	r3, r1
 80013c2:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80013c4:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013c6:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80013c8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013cc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80013ce:	430b      	orrs	r3, r1
 80013d0:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <UART_SetConfig+0x140>)
 80013d4:	429d      	cmp	r5, r3
 80013d6:	d112      	bne.n	80013fe <UART_SetConfig+0x66>
 80013d8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80013dc:	493f      	ldr	r1, [pc, #252]	; (80014dc <UART_SetConfig+0x144>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80013e8:	5ccb      	ldrb	r3, [r1, r3]
 80013ea:	d13b      	bne.n	8001464 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d836      	bhi.n	800145e <UART_SetConfig+0xc6>
 80013f0:	e8df f003 	tbb	[pc, r3]
 80013f4:	3524210f 	.word	0x3524210f
 80013f8:	3535352d 	.word	0x3535352d
 80013fc:	30          	.byte	0x30
 80013fd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <UART_SetConfig+0x148>)
 8001400:	429d      	cmp	r5, r3
 8001402:	d003      	beq.n	800140c <UART_SetConfig+0x74>
 8001404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001408:	429d      	cmp	r5, r3
 800140a:	d15e      	bne.n	80014ca <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800140c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001410:	d131      	bne.n	8001476 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001412:	f7ff fee3 	bl	80011dc <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001416:	6861      	ldr	r1, [r4, #4]
 8001418:	084a      	lsrs	r2, r1, #1
 800141a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001422:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001424:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001426:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 800142a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800142c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001430:	4313      	orrs	r3, r2
 8001432:	60cb      	str	r3, [r1, #12]
 8001434:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001436:	f7ff fee9 	bl	800120c <HAL_RCC_GetPCLK2Freq>
 800143a:	e7ec      	b.n	8001416 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800143c:	6860      	ldr	r0, [r4, #4]
 800143e:	0843      	lsrs	r3, r0, #1
 8001440:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001444:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001448:	fbb3 f3f0 	udiv	r3, r3, r0
 800144c:	e7e9      	b.n	8001422 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800144e:	f7ff fde3 	bl	8001018 <HAL_RCC_GetSysClockFreq>
 8001452:	e7e0      	b.n	8001416 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001454:	6860      	ldr	r0, [r4, #4]
 8001456:	0843      	lsrs	r3, r0, #1
 8001458:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800145c:	e7f4      	b.n	8001448 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 800145e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001460:	2300      	movs	r3, #0
 8001462:	e7e0      	b.n	8001426 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001464:	2b08      	cmp	r3, #8
 8001466:	d833      	bhi.n	80014d0 <UART_SetConfig+0x138>
 8001468:	e8df f003 	tbb	[pc, r3]
 800146c:	321b1005 	.word	0x321b1005
 8001470:	32323227 	.word	0x32323227
 8001474:	2a          	.byte	0x2a
 8001475:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001476:	f7ff feb1 	bl	80011dc <HAL_RCC_GetPCLK1Freq>
 800147a:	6863      	ldr	r3, [r4, #4]
 800147c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001480:	fbb0 f0f3 	udiv	r0, r0, r3
 8001484:	b280      	uxth	r0, r0
 8001486:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001488:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 800148a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800148c:	f7ff febe 	bl	800120c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001496:	fbb0 f0f3 	udiv	r0, r0, r3
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <UART_SetConfig+0x140>)
 800149c:	b280      	uxth	r0, r0
 800149e:	60d8      	str	r0, [r3, #12]
 80014a0:	e7f2      	b.n	8001488 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014a2:	6862      	ldr	r2, [r4, #4]
 80014a4:	0853      	lsrs	r3, r2, #1
 80014a6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80014aa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <UART_SetConfig+0x140>)
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	60d3      	str	r3, [r2, #12]
 80014b8:	e7e6      	b.n	8001488 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014ba:	f7ff fdad 	bl	8001018 <HAL_RCC_GetSysClockFreq>
 80014be:	e7e7      	b.n	8001490 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014c0:	6862      	ldr	r2, [r4, #4]
 80014c2:	0853      	lsrs	r3, r2, #1
 80014c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014c8:	e7f1      	b.n	80014ae <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80014ce:	d0c6      	beq.n	800145e <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	efff69f3 	.word	0xefff69f3
 80014d8:	40013800 	.word	0x40013800
 80014dc:	08001ae0 	.word	0x08001ae0
 80014e0:	40004400 	.word	0x40004400

080014e4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014e6:	07da      	lsls	r2, r3, #31
{
 80014e8:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014ea:	d506      	bpl.n	80014fa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80014ec:	6801      	ldr	r1, [r0, #0]
 80014ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80014f0:	684a      	ldr	r2, [r1, #4]
 80014f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80014f6:	4322      	orrs	r2, r4
 80014f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80014fa:	079c      	lsls	r4, r3, #30
 80014fc:	d506      	bpl.n	800150c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80014fe:	6801      	ldr	r1, [r0, #0]
 8001500:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001502:	684a      	ldr	r2, [r1, #4]
 8001504:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001508:	4322      	orrs	r2, r4
 800150a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800150c:	0759      	lsls	r1, r3, #29
 800150e:	d506      	bpl.n	800151e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001510:	6801      	ldr	r1, [r0, #0]
 8001512:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001514:	684a      	ldr	r2, [r1, #4]
 8001516:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800151a:	4322      	orrs	r2, r4
 800151c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800151e:	071a      	lsls	r2, r3, #28
 8001520:	d506      	bpl.n	8001530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001522:	6801      	ldr	r1, [r0, #0]
 8001524:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001526:	684a      	ldr	r2, [r1, #4]
 8001528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800152c:	4322      	orrs	r2, r4
 800152e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001530:	06dc      	lsls	r4, r3, #27
 8001532:	d506      	bpl.n	8001542 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001534:	6801      	ldr	r1, [r0, #0]
 8001536:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001538:	688a      	ldr	r2, [r1, #8]
 800153a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800153e:	4322      	orrs	r2, r4
 8001540:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001542:	0699      	lsls	r1, r3, #26
 8001544:	d506      	bpl.n	8001554 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001546:	6801      	ldr	r1, [r0, #0]
 8001548:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800154a:	688a      	ldr	r2, [r1, #8]
 800154c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001550:	4322      	orrs	r2, r4
 8001552:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001554:	065a      	lsls	r2, r3, #25
 8001556:	d50f      	bpl.n	8001578 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001558:	6801      	ldr	r1, [r0, #0]
 800155a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800155c:	684a      	ldr	r2, [r1, #4]
 800155e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001562:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001564:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001568:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800156a:	d105      	bne.n	8001578 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800156c:	684a      	ldr	r2, [r1, #4]
 800156e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001570:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001574:	4322      	orrs	r2, r4
 8001576:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	d506      	bpl.n	800158a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001580:	6853      	ldr	r3, [r2, #4]
 8001582:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001586:	430b      	orrs	r3, r1
 8001588:	6053      	str	r3, [r2, #4]
 800158a:	bd10      	pop	{r4, pc}

0800158c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001590:	9d06      	ldr	r5, [sp, #24]
 8001592:	4604      	mov	r4, r0
 8001594:	460f      	mov	r7, r1
 8001596:	4616      	mov	r6, r2
 8001598:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800159a:	6821      	ldr	r1, [r4, #0]
 800159c:	69ca      	ldr	r2, [r1, #28]
 800159e:	ea37 0302 	bics.w	r3, r7, r2
 80015a2:	bf0c      	ite	eq
 80015a4:	2201      	moveq	r2, #1
 80015a6:	2200      	movne	r2, #0
 80015a8:	42b2      	cmp	r2, r6
 80015aa:	d002      	beq.n	80015b2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80015ac:	2000      	movs	r0, #0
}
 80015ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80015b2:	1c6b      	adds	r3, r5, #1
 80015b4:	d0f2      	beq.n	800159c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015b6:	b99d      	cbnz	r5, 80015e0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80015ca:	2320      	movs	r3, #32
 80015cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80015d0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80015d4:	2300      	movs	r3, #0
 80015d6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80015da:	2003      	movs	r0, #3
 80015dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015e0:	f7fe fe34 	bl	800024c <HAL_GetTick>
 80015e4:	eba0 0008 	sub.w	r0, r0, r8
 80015e8:	4285      	cmp	r5, r0
 80015ea:	d2d6      	bcs.n	800159a <UART_WaitOnFlagUntilTimeout+0xe>
 80015ec:	e7e4      	b.n	80015b8 <UART_WaitOnFlagUntilTimeout+0x2c>

080015ee <UART_CheckIdleState>:
{
 80015ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015f0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f2:	2600      	movs	r6, #0
 80015f4:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80015f6:	f7fe fe29 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001600:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001602:	d417      	bmi.n	8001634 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	075b      	lsls	r3, r3, #29
 800160a:	d50a      	bpl.n	8001622 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800160c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2200      	movs	r2, #0
 8001614:	462b      	mov	r3, r5
 8001616:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff ffb6 	bl	800158c <UART_WaitOnFlagUntilTimeout>
 8001620:	b9a0      	cbnz	r0, 800164c <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001622:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001624:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001626:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800162a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800162e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001632:	e00c      	b.n	800164e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	4632      	mov	r2, r6
 800163c:	4603      	mov	r3, r0
 800163e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff ffa2 	bl	800158c <UART_WaitOnFlagUntilTimeout>
 8001648:	2800      	cmp	r0, #0
 800164a:	d0db      	beq.n	8001604 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800164c:	2003      	movs	r0, #3
}
 800164e:	b002      	add	sp, #8
 8001650:	bd70      	pop	{r4, r5, r6, pc}

08001652 <HAL_UART_Init>:
{
 8001652:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001654:	4604      	mov	r4, r0
 8001656:	b360      	cbz	r0, 80016b2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001658:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800165c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001660:	b91b      	cbnz	r3, 800166a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001662:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001666:	f000 f967 	bl	8001938 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800166a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800166c:	2324      	movs	r3, #36	; 0x24
 800166e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fe8c 	bl	8001398 <UART_SetConfig>
 8001680:	2801      	cmp	r0, #1
 8001682:	d016      	beq.n	80016b2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001686:	b113      	cbz	r3, 800168e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff ff2b 	bl	80014e4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800169e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80016a6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80016ae:	f7ff bf9e 	b.w	80015ee <UART_CheckIdleState>
}
 80016b2:	2001      	movs	r0, #1
 80016b4:	bd10      	pop	{r4, pc}

080016b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b6:	b510      	push	{r4, lr}
 80016b8:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ba:	2301      	movs	r3, #1
 80016bc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80016be:	2310      	movs	r3, #16
 80016c0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c2:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016ca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ce:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016d2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f7ff fa2a 	bl	8000b2c <HAL_RCC_OscConfig>
 80016d8:	b100      	cbz	r0, 80016dc <SystemClock_Config+0x26>
 80016da:	e7fe      	b.n	80016da <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e6:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e8:	4621      	mov	r1, r4
 80016ea:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ee:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f0:	f7ff fcc4 	bl	800107c <HAL_RCC_ClockConfig>
 80016f4:	b100      	cbz	r0, 80016f8 <SystemClock_Config+0x42>
 80016f6:	e7fe      	b.n	80016f6 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80016f8:	2381      	movs	r3, #129	; 0x81
 80016fa:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80016fc:	9008      	str	r0, [sp, #32]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80016fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001702:	a806      	add	r0, sp, #24
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001704:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001706:	f7ff fd99 	bl	800123c <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4604      	mov	r4, r0
 800170c:	b100      	cbz	r0, 8001710 <SystemClock_Config+0x5a>
 800170e:	e7fe      	b.n	800170e <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001710:	f7ff fd5e 	bl	80011d0 <HAL_RCC_GetHCLKFreq>
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	fbb0 f0f3 	udiv	r0, r0, r3
 800171c:	f7ff f91a 	bl	8000954 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001720:	2004      	movs	r0, #4
 8001722:	f7ff f92d 	bl	8000980 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001726:	4622      	mov	r2, r4
 8001728:	4621      	mov	r1, r4
 800172a:	f04f 30ff 	mov.w	r0, #4294967295
 800172e:	f7ff f8dd 	bl	80008ec <HAL_NVIC_SetPriority>
}
 8001732:	b016      	add	sp, #88	; 0x58
 8001734:	bd10      	pop	{r4, pc}
	...

08001738 <main>:
{
 8001738:	b530      	push	{r4, r5, lr}
 800173a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800173c:	f7fe fd68 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001740:	f7ff ffb9 	bl	80016b6 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b44      	ldr	r3, [pc, #272]	; (8001858 <main+0x120>)
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001754:	9201      	str	r2, [sp, #4]
 8001756:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001766:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2120      	movs	r1, #32
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001772:	f7ff f9d1 	bl	8000b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2108      	movs	r1, #8
 800177a:	4838      	ldr	r0, [pc, #224]	; (800185c <main+0x124>)

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800177e:	f7ff f9cb 	bl	8000b18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001784:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	a906      	add	r1, sp, #24
 8001788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800178c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f7ff f906 	bl	80009a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001798:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	4830      	ldr	r0, [pc, #192]	; (800185c <main+0x124>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f7ff f8fd 	bl	80009a4 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 80017aa:	482d      	ldr	r0, [pc, #180]	; (8001860 <main+0x128>)
  huart1.Init.BaudRate = 38400;
 80017ac:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <main+0x12c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 38400;
 80017b0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80017b4:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ba:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017bc:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017be:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c0:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c2:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c4:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c6:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c8:	f7ff ff43 	bl	8001652 <HAL_UART_Init>
 80017cc:	b100      	cbz	r0, 80017d0 <main+0x98>
 80017ce:	e7fe      	b.n	80017ce <main+0x96>
  hadc1.Instance = ADC1;
 80017d0:	4c25      	ldr	r4, [pc, #148]	; (8001868 <main+0x130>)
 80017d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017d6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017d8:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017da:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017dc:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017de:	61e0      	str	r0, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e0:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017e2:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e4:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e6:	6360      	str	r0, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e8:	2304      	movs	r3, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017ea:	61a0      	str	r0, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017ec:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ee:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f0:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 80017f2:	6225      	str	r5, [r4, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f4:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f6:	f7fe fd7b 	bl	80002f0 <HAL_ADC_Init>
 80017fa:	b100      	cbz	r0, 80017fe <main+0xc6>
 80017fc:	e7fe      	b.n	80017fc <main+0xc4>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017fe:	a90c      	add	r1, sp, #48	; 0x30
 8001800:	f841 0d24 	str.w	r0, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001804:	4620      	mov	r0, r4
 8001806:	f7fe ffeb 	bl	80007e0 <HAL_ADCEx_MultiModeConfigChannel>
 800180a:	b100      	cbz	r0, 800180e <main+0xd6>
 800180c:	e7fe      	b.n	800180c <main+0xd4>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800180e:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001810:	9008      	str	r0, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001812:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 8001814:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001816:	a906      	add	r1, sp, #24
 8001818:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800181a:	9506      	str	r5, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800181c:	9507      	str	r5, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181e:	f7fe fe5f 	bl	80004e0 <HAL_ADC_ConfigChannel>
 8001822:	b100      	cbz	r0, 8001826 <main+0xee>
 8001824:	e7fe      	b.n	8001824 <main+0xec>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001826:	4d0d      	ldr	r5, [pc, #52]	; (800185c <main+0x124>)
{
 8001828:	2414      	movs	r4, #20
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800182a:	2108      	movs	r1, #8
 800182c:	4628      	mov	r0, r5
 800182e:	f7ff f978 	bl	8000b22 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001832:	2064      	movs	r0, #100	; 0x64
 8001834:	f7fe fd10 	bl	8000258 <HAL_Delay>
	for(int i=0; i<20; i++) {
 8001838:	3c01      	subs	r4, #1
 800183a:	d1f6      	bne.n	800182a <main+0xf2>
 800183c:	2405      	movs	r4, #5
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800183e:	2120      	movs	r1, #32
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f7ff f96d 	bl	8000b22 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8001848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184c:	f7fe fd04 	bl	8000258 <HAL_Delay>
	for(int i=0; i<5; i++) {
 8001850:	3c01      	subs	r4, #1
 8001852:	d1f4      	bne.n	800183e <main+0x106>
 8001854:	e7e8      	b.n	8001828 <main+0xf0>
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400
 8001860:	20000080 	.word	0x20000080
 8001864:	40013800 	.word	0x40013800
 8001868:	2000002c 	.word	0x2000002c

0800186c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_MspInit+0x88>)
{
 800186e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	f002 0201 	and.w	r2, r2, #1
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001888:	61da      	str	r2, [r3, #28]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001896:	f7ff f817 	bl	80008c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	4611      	mov	r1, r2
 800189e:	f06f 000b 	mvn.w	r0, #11
 80018a2:	f7ff f823 	bl	80008ec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	4611      	mov	r1, r2
 80018aa:	f06f 000a 	mvn.w	r0, #10
 80018ae:	f7ff f81d 	bl	80008ec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	4611      	mov	r1, r2
 80018b6:	f06f 0009 	mvn.w	r0, #9
 80018ba:	f7ff f817 	bl	80008ec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	4611      	mov	r1, r2
 80018c2:	f06f 0004 	mvn.w	r0, #4
 80018c6:	f7ff f811 	bl	80008ec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	4611      	mov	r1, r2
 80018ce:	f06f 0003 	mvn.w	r0, #3
 80018d2:	f7ff f80b 	bl	80008ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	4611      	mov	r1, r2
 80018da:	f06f 0001 	mvn.w	r0, #1
 80018de:	f7ff f805 	bl	80008ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	4611      	mov	r1, r2
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	f7fe ffff 	bl	80008ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	b003      	add	sp, #12
 80018f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80018fa:	6803      	ldr	r3, [r0, #0]
 80018fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001900:	d117      	bne.n	8001932 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001902:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001906:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191e:	2301      	movs	r3, #1
 8001920:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f7ff f839 	bl	80009a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001932:	b007      	add	sp, #28
 8001934:	f85d fb04 	ldr.w	pc, [sp], #4

08001938 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800193a:	6802      	ldr	r2, [r0, #0]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_UART_MspInit+0x48>)
 800193e:	429a      	cmp	r2, r3
 8001940:	d11a      	bne.n	8001978 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001942:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800194e:	619a      	str	r2, [r3, #24]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800195a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800195e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001970:	2307      	movs	r3, #7
 8001972:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f7ff f816 	bl	80009a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001978:	b007      	add	sp, #28
 800197a:	f85d fb04 	ldr.w	pc, [sp], #4
 800197e:	bf00      	nop
 8001980:	40013800 	.word	0x40013800

08001984 <NMI_Handler>:
 8001984:	4770      	bx	lr

08001986 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler>

08001988 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler>

0800198a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800198a:	e7fe      	b.n	800198a <BusFault_Handler>

0800198c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler>

0800198e <SVC_Handler>:
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001996:	f7fe fc4d 	bl	8000234 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800199e:	f7fe bffc 	b.w	800099a <HAL_SYSTICK_IRQHandler>
	...

080019a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4915      	ldr	r1, [pc, #84]	; (80019fc <SystemInit+0x58>)
 80019a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <SystemInit+0x5c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80019bc:	6858      	ldr	r0, [r3, #4]
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <SystemInit+0x60>)
 80019c0:	4002      	ands	r2, r0
 80019c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80019ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80019de:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80019e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e2:	f022 020f 	bic.w	r2, r2, #15
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80019e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <SystemInit+0x64>)
 80019ec:	4002      	ands	r2, r0
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019f8:	608b      	str	r3, [r1, #8]
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	40021000 	.word	0x40021000
 8001a04:	f87fc00c 	.word	0xf87fc00c
 8001a08:	ff00fccc 	.word	0xff00fccc

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a12:	e003      	b.n	8001a1c <LoopCopyDataInit>

08001a14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a1a:	3104      	adds	r1, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a24:	d3f6      	bcc.n	8001a14 <CopyDataInit>
	ldr	r2, =_sbss
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a28:	e002      	b.n	8001a30 <LoopFillZerobss>

08001a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a2c:	f842 3b04 	str.w	r3, [r2], #4

08001a30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <LoopForever+0x16>)
	cmp	r2, r3
 8001a32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a34:	d3f9      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a36:	f7ff ffb5 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f000 f811 	bl	8001a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff fe7b 	bl	8001738 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a44:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001a48:	08001b04 	.word	0x08001b04
	ldr	r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a50:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001a54:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001a58:	200000f0 	.word	0x200000f0

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <__libc_init_array>:
 8001a60:	b570      	push	{r4, r5, r6, lr}
 8001a62:	4e0d      	ldr	r6, [pc, #52]	; (8001a98 <__libc_init_array+0x38>)
 8001a64:	4c0d      	ldr	r4, [pc, #52]	; (8001a9c <__libc_init_array+0x3c>)
 8001a66:	1ba4      	subs	r4, r4, r6
 8001a68:	10a4      	asrs	r4, r4, #2
 8001a6a:	2500      	movs	r5, #0
 8001a6c:	42a5      	cmp	r5, r4
 8001a6e:	d109      	bne.n	8001a84 <__libc_init_array+0x24>
 8001a70:	4e0b      	ldr	r6, [pc, #44]	; (8001aa0 <__libc_init_array+0x40>)
 8001a72:	4c0c      	ldr	r4, [pc, #48]	; (8001aa4 <__libc_init_array+0x44>)
 8001a74:	f000 f818 	bl	8001aa8 <_init>
 8001a78:	1ba4      	subs	r4, r4, r6
 8001a7a:	10a4      	asrs	r4, r4, #2
 8001a7c:	2500      	movs	r5, #0
 8001a7e:	42a5      	cmp	r5, r4
 8001a80:	d105      	bne.n	8001a8e <__libc_init_array+0x2e>
 8001a82:	bd70      	pop	{r4, r5, r6, pc}
 8001a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a88:	4798      	blx	r3
 8001a8a:	3501      	adds	r5, #1
 8001a8c:	e7ee      	b.n	8001a6c <__libc_init_array+0xc>
 8001a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a92:	4798      	blx	r3
 8001a94:	3501      	adds	r5, #1
 8001a96:	e7f2      	b.n	8001a7e <__libc_init_array+0x1e>
 8001a98:	08001afc 	.word	0x08001afc
 8001a9c:	08001afc 	.word	0x08001afc
 8001aa0:	08001afc 	.word	0x08001afc
 8001aa4:	08001b00 	.word	0x08001b00

08001aa8 <_init>:
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	bf00      	nop
 8001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aae:	bc08      	pop	{r3}
 8001ab0:	469e      	mov	lr, r3
 8001ab2:	4770      	bx	lr

08001ab4 <_fini>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	bf00      	nop
 8001ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aba:	bc08      	pop	{r3}
 8001abc:	469e      	mov	lr, r3
 8001abe:	4770      	bx	lr
