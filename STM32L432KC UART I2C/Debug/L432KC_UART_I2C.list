
L432KC_UART_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  080038c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f8  2000006c  08003934  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000164  08003934  00020164  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000159dc  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000285b  00000000  00000000  00035a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007623  00000000  00000000  000382d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b8  00000000  00000000  0003f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b50  00000000  00000000  000402b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005f5e  00000000  00000000  00040e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003b71  00000000  00000000  00046d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004a8cf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002194  00000000  00000000  0004a94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037d4 	.word	0x080037d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080037d4 	.word	0x080037d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_uldivmod>:
 8000c54:	b953      	cbnz	r3, 8000c6c <__aeabi_uldivmod+0x18>
 8000c56:	b94a      	cbnz	r2, 8000c6c <__aeabi_uldivmod+0x18>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	2800      	cmpeq	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f04f 31ff 	movne.w	r1, #4294967295
 8000c64:	f04f 30ff 	movne.w	r0, #4294967295
 8000c68:	f000 b97a 	b.w	8000f60 <__aeabi_idiv0>
 8000c6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c74:	f000 f806 	bl	8000c84 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	468c      	mov	ip, r1
 8000c8a:	460d      	mov	r5, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	9e08      	ldr	r6, [sp, #32]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d151      	bne.n	8000d38 <__udivmoddi4+0xb4>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d96d      	bls.n	8000d76 <__udivmoddi4+0xf2>
 8000c9a:	fab2 fe82 	clz	lr, r2
 8000c9e:	f1be 0f00 	cmp.w	lr, #0
 8000ca2:	d00b      	beq.n	8000cbc <__udivmoddi4+0x38>
 8000ca4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ca8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cb0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cb8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cbc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cc0:	0c25      	lsrs	r5, r4, #16
 8000cc2:	fbbc f8fa 	udiv	r8, ip, sl
 8000cc6:	fa1f f987 	uxth.w	r9, r7
 8000cca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cd2:	fb08 f309 	mul.w	r3, r8, r9
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x6c>
 8000cda:	19ed      	adds	r5, r5, r7
 8000cdc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ce0:	f080 8123 	bcs.w	8000f2a <__udivmoddi4+0x2a6>
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	f240 8120 	bls.w	8000f2a <__udivmoddi4+0x2a6>
 8000cea:	f1a8 0802 	sub.w	r8, r8, #2
 8000cee:	443d      	add	r5, r7
 8000cf0:	1aed      	subs	r5, r5, r3
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cf8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb00 f909 	mul.w	r9, r0, r9
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x98>
 8000d08:	19e4      	adds	r4, r4, r7
 8000d0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0e:	f080 810a 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000d12:	45a1      	cmp	r9, r4
 8000d14:	f240 8107 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	443c      	add	r4, r7
 8000d1c:	eba4 0409 	sub.w	r4, r4, r9
 8000d20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d24:	2100      	movs	r1, #0
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d061      	beq.n	8000dee <__udivmoddi4+0x16a>
 8000d2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d2e:	2300      	movs	r3, #0
 8000d30:	6034      	str	r4, [r6, #0]
 8000d32:	6073      	str	r3, [r6, #4]
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xc8>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d054      	beq.n	8000dea <__udivmoddi4+0x166>
 8000d40:	2100      	movs	r1, #0
 8000d42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d46:	4608      	mov	r0, r1
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	fab3 f183 	clz	r1, r3
 8000d50:	2900      	cmp	r1, #0
 8000d52:	f040 808e 	bne.w	8000e72 <__udivmoddi4+0x1ee>
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xdc>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80fa 	bhi.w	8000f54 <__udivmoddi4+0x2d0>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb65 0503 	sbc.w	r5, r5, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	46ac      	mov	ip, r5
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d03f      	beq.n	8000dee <__udivmoddi4+0x16a>
 8000d6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	b912      	cbnz	r2, 8000d7e <__udivmoddi4+0xfa>
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d7e:	fab7 fe87 	clz	lr, r7
 8000d82:	f1be 0f00 	cmp.w	lr, #0
 8000d86:	d134      	bne.n	8000df2 <__udivmoddi4+0x16e>
 8000d88:	1beb      	subs	r3, r5, r7
 8000d8a:	0c3a      	lsrs	r2, r7, #16
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d96:	0c25      	lsrs	r5, r4, #16
 8000d98:	fb02 3318 	mls	r3, r2, r8, r3
 8000d9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000da0:	fb0c f308 	mul.w	r3, ip, r8
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x134>
 8000da8:	19ed      	adds	r5, r5, r7
 8000daa:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x132>
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	f200 80d1 	bhi.w	8000f58 <__udivmoddi4+0x2d4>
 8000db6:	4680      	mov	r8, r0
 8000db8:	1aed      	subs	r5, r5, r3
 8000dba:	b2a3      	uxth	r3, r4
 8000dbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x15c>
 8000dd0:	19e4      	adds	r4, r4, r7
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x15a>
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	f200 80b8 	bhi.w	8000f4e <__udivmoddi4+0x2ca>
 8000dde:	4618      	mov	r0, r3
 8000de0:	eba4 040c 	sub.w	r4, r4, ip
 8000de4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de8:	e79d      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000dea:	4631      	mov	r1, r6
 8000dec:	4630      	mov	r0, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1ce 0420 	rsb	r4, lr, #32
 8000df6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000e02:	0c3a      	lsrs	r2, r7, #16
 8000e04:	fa25 f404 	lsr.w	r4, r5, r4
 8000e08:	ea48 0803 	orr.w	r8, r8, r3
 8000e0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e14:	fb02 4411 	mls	r4, r2, r1, r4
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e20:	fb01 f30c 	mul.w	r3, r1, ip
 8000e24:	42ab      	cmp	r3, r5
 8000e26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x1bc>
 8000e2c:	19ed      	adds	r5, r5, r7
 8000e2e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e32:	f080 808a 	bcs.w	8000f4a <__udivmoddi4+0x2c6>
 8000e36:	42ab      	cmp	r3, r5
 8000e38:	f240 8087 	bls.w	8000f4a <__udivmoddi4+0x2c6>
 8000e3c:	3902      	subs	r1, #2
 8000e3e:	443d      	add	r5, r7
 8000e40:	1aeb      	subs	r3, r5, r3
 8000e42:	fa1f f588 	uxth.w	r5, r8
 8000e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000e4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e52:	fb00 f30c 	mul.w	r3, r0, ip
 8000e56:	42ab      	cmp	r3, r5
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1e6>
 8000e5a:	19ed      	adds	r5, r5, r7
 8000e5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e60:	d26f      	bcs.n	8000f42 <__udivmoddi4+0x2be>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d96d      	bls.n	8000f42 <__udivmoddi4+0x2be>
 8000e66:	3802      	subs	r0, #2
 8000e68:	443d      	add	r5, r7
 8000e6a:	1aeb      	subs	r3, r5, r3
 8000e6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e70:	e78f      	b.n	8000d92 <__udivmoddi4+0x10e>
 8000e72:	f1c1 0720 	rsb	r7, r1, #32
 8000e76:	fa22 f807 	lsr.w	r8, r2, r7
 8000e7a:	408b      	lsls	r3, r1
 8000e7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000e80:	ea48 0303 	orr.w	r3, r8, r3
 8000e84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e9e:	fa1f f883 	uxth.w	r8, r3
 8000ea2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea6:	fb09 f408 	mul.w	r4, r9, r8
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x244>
 8000eb6:	18ed      	adds	r5, r5, r3
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d243      	bcs.n	8000f46 <__udivmoddi4+0x2c2>
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	d941      	bls.n	8000f46 <__udivmoddi4+0x2c2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	441d      	add	r5, r3
 8000ec8:	1b2d      	subs	r5, r5, r4
 8000eca:	fa1f fe8e 	uxth.w	lr, lr
 8000ece:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ed2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ed6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45a0      	cmp	r8, r4
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x26e>
 8000ee2:	18e4      	adds	r4, r4, r3
 8000ee4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee8:	d229      	bcs.n	8000f3e <__udivmoddi4+0x2ba>
 8000eea:	45a0      	cmp	r8, r4
 8000eec:	d927      	bls.n	8000f3e <__udivmoddi4+0x2ba>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	441c      	add	r4, r3
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba4 0408 	sub.w	r4, r4, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	464d      	mov	r5, r9
 8000f04:	d315      	bcc.n	8000f32 <__udivmoddi4+0x2ae>
 8000f06:	d012      	beq.n	8000f2e <__udivmoddi4+0x2aa>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x29c>
 8000f0a:	ebba 030e 	subs.w	r3, sl, lr
 8000f0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40cb      	lsrs	r3, r1
 8000f18:	431f      	orrs	r7, r3
 8000f1a:	40cc      	lsrs	r4, r1
 8000f1c:	6037      	str	r7, [r6, #0]
 8000f1e:	6074      	str	r4, [r6, #4]
 8000f20:	2100      	movs	r1, #0
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	4618      	mov	r0, r3
 8000f28:	e6f8      	b.n	8000d1c <__udivmoddi4+0x98>
 8000f2a:	4690      	mov	r8, r2
 8000f2c:	e6e0      	b.n	8000cf0 <__udivmoddi4+0x6c>
 8000f2e:	45c2      	cmp	sl, r8
 8000f30:	d2ea      	bcs.n	8000f08 <__udivmoddi4+0x284>
 8000f32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f36:	eb69 0503 	sbc.w	r5, r9, r3
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7e4      	b.n	8000f08 <__udivmoddi4+0x284>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e7d7      	b.n	8000ef2 <__udivmoddi4+0x26e>
 8000f42:	4640      	mov	r0, r8
 8000f44:	e791      	b.n	8000e6a <__udivmoddi4+0x1e6>
 8000f46:	4681      	mov	r9, r0
 8000f48:	e7be      	b.n	8000ec8 <__udivmoddi4+0x244>
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	e778      	b.n	8000e40 <__udivmoddi4+0x1bc>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	e745      	b.n	8000de0 <__udivmoddi4+0x15c>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xe6>
 8000f58:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5c:	443d      	add	r5, r7
 8000f5e:	e72b      	b.n	8000db8 <__udivmoddi4+0x134>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_InitTick+0x24>)
{
 8000f68:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f70:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f74:	f000 f878 	bl	8001068 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f83e 	bl	8001000 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f84:	2000      	movs	r0, #0
 8000f86:	bd10      	pop	{r4, pc}
 8000f88:	20000000 	.word	0x20000000

08000f8c <HAL_Init>:
{
 8000f8c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f824 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff ffe5 	bl	8000f64 <HAL_InitTick>
  HAL_MspInit();
 8000f9a:	f001 fe15 	bl	8002bc8 <HAL_MspInit>
}
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	bd08      	pop	{r3, pc}
	...

08000fa4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fa4:	4a02      	ldr	r2, [pc, #8]	; (8000fb0 <HAL_IncTick+0xc>)
 8000fa6:	6813      	ldr	r3, [r2, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000094 	.word	0x20000094

08000fb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fb4:	4b01      	ldr	r3, [pc, #4]	; (8000fbc <HAL_GetTick+0x8>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000094 	.word	0x20000094

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff fff6 	bl	8000fb4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000fca:	4605      	mov	r5, r0
  {
    wait++;
 8000fcc:	bf18      	it	ne
 8000fce:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000fd0:	f7ff fff0 	bl	8000fb4 <HAL_GetTick>
 8000fd4:	1b40      	subs	r0, r0, r5
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d8fa      	bhi.n	8000fd0 <HAL_Delay+0x10>
  {
  }
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}

08000fdc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fde:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fe4:	041b      	lsls	r3, r3, #16
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fec:	0200      	lsls	r0, r0, #8
 8000fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ff6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ff8:	60d3      	str	r3, [r2, #12]
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001002:	b530      	push	{r4, r5, lr}
 8001004:	68dc      	ldr	r4, [r3, #12]
 8001006:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	2b04      	cmp	r3, #4
 8001012:	bf28      	it	cs
 8001014:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 0501 	mov.w	r5, #1
 800101c:	fa05 f303 	lsl.w	r3, r5, r3
 8001020:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001024:	bf8c      	ite	hi
 8001026:	3c03      	subhi	r4, #3
 8001028:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102a:	4019      	ands	r1, r3
 800102c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102e:	fa05 f404 	lsl.w	r4, r5, r4
 8001032:	3c01      	subs	r4, #1
 8001034:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001036:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	ea42 0201 	orr.w	r2, r2, r1
 800103c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	bfaf      	iteee	ge
 8001042:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	f000 000f 	andlt.w	r0, r0, #15
 800104a:	4b06      	ldrlt	r3, [pc, #24]	; (8001064 <HAL_NVIC_SetPriority+0x64>)
 800104c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	bfa5      	ittet	ge
 8001050:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001054:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800105c:	bd30      	pop	{r4, r5, pc}
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	e000ed14 	.word	0xe000ed14

08001068 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	3801      	subs	r0, #1
 800106a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800106e:	d20a      	bcs.n	8001086 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001074:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	21f0      	movs	r1, #240	; 0xf0
 8001078:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001096:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001098:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800109a:	bf0c      	ite	eq
 800109c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010a0:	f022 0204 	bicne.w	r2, r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	4770      	bx	lr
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010ac:	4770      	bx	lr

080010ae <HAL_SYSTICK_IRQHandler>:
{
 80010ae:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010b0:	f7ff fffc 	bl	80010ac <HAL_SYSTICK_Callback>
 80010b4:	bd08      	pop	{r3, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010bc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010be:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800121c <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010c4:	4a53      	ldr	r2, [pc, #332]	; (8001214 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010c6:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010c8:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 80010cc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010ce:	9c01      	ldr	r4, [sp, #4]
 80010d0:	40dc      	lsrs	r4, r3
 80010d2:	d102      	bne.n	80010da <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 80010d4:	b005      	add	sp, #20
 80010d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010da:	2401      	movs	r4, #1
 80010dc:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80010e0:	9c01      	ldr	r4, [sp, #4]
 80010e2:	ea14 050a 	ands.w	r5, r4, sl
 80010e6:	f000 808f 	beq.w	8001208 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ea:	684c      	ldr	r4, [r1, #4]
 80010ec:	f024 0b10 	bic.w	fp, r4, #16
 80010f0:	f1bb 0f02 	cmp.w	fp, #2
 80010f4:	d111      	bne.n	800111a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80010f6:	08df      	lsrs	r7, r3, #3
 80010f8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010fc:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001100:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001102:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001106:	fa09 fc0e 	lsl.w	ip, r9, lr
 800110a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800110e:	690e      	ldr	r6, [r1, #16]
 8001110:	fa06 f60e 	lsl.w	r6, r6, lr
 8001114:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001118:	623e      	str	r6, [r7, #32]
 800111a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800111e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001120:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001122:	fa07 f70c 	lsl.w	r7, r7, ip
 8001126:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001128:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800112c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800112e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001132:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001136:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800113e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001140:	d811      	bhi.n	8001166 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001142:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001144:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001148:	68ce      	ldr	r6, [r1, #12]
 800114a:	fa06 fe0c 	lsl.w	lr, r6, ip
 800114e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001152:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001154:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800115a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800115e:	409e      	lsls	r6, r3
 8001160:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001164:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001166:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001168:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800116a:	688e      	ldr	r6, [r1, #8]
 800116c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001170:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001172:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001174:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001176:	d547      	bpl.n	8001208 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 800117c:	f046 0601 	orr.w	r6, r6, #1
 8001180:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8001184:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8001188:	f023 0703 	bic.w	r7, r3, #3
 800118c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001190:	f006 0601 	and.w	r6, r6, #1
 8001194:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001198:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800119a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80011a0:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011a2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011a6:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011aa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011ae:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011b2:	d02b      	beq.n	800120c <HAL_GPIO_Init+0x154>
 80011b4:	4e18      	ldr	r6, [pc, #96]	; (8001218 <HAL_GPIO_Init+0x160>)
 80011b6:	42b0      	cmp	r0, r6
 80011b8:	d02a      	beq.n	8001210 <HAL_GPIO_Init+0x158>
 80011ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011be:	42b0      	cmp	r0, r6
 80011c0:	bf14      	ite	ne
 80011c2:	2607      	movne	r6, #7
 80011c4:	2602      	moveq	r6, #2
 80011c6:	fa06 f60e 	lsl.w	r6, r6, lr
 80011ca:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ce:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80011d0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011d8:	bf0c      	ite	eq
 80011da:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80011dc:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 80011de:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 80011e0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011e6:	bf0c      	ite	eq
 80011e8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80011ea:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 80011ec:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 80011ee:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011f4:	bf0c      	ite	eq
 80011f6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80011f8:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80011fa:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 80011fc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001200:	bf54      	ite	pl
 8001202:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001204:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001206:	60d6      	str	r6, [r2, #12]
    position++;
 8001208:	3301      	adds	r3, #1
 800120a:	e760      	b.n	80010ce <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800120c:	2600      	movs	r6, #0
 800120e:	e7da      	b.n	80011c6 <HAL_GPIO_Init+0x10e>
 8001210:	2601      	movs	r6, #1
 8001212:	e7d8      	b.n	80011c6 <HAL_GPIO_Init+0x10e>
 8001214:	40010400 	.word	0x40010400
 8001218:	48000400 	.word	0x48000400
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	b10a      	cbz	r2, 8001226 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001222:	6181      	str	r1, [r0, #24]
 8001224:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001226:	6281      	str	r1, [r0, #40]	; 0x28
 8001228:	4770      	bx	lr

0800122a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800122a:	6943      	ldr	r3, [r0, #20]
 800122c:	4059      	eors	r1, r3
 800122e:	6141      	str	r1, [r0, #20]
 8001230:	4770      	bx	lr

08001232 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001232:	6803      	ldr	r3, [r0, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001238:	bf44      	itt	mi
 800123a:	2200      	movmi	r2, #0
 800123c:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001242:	bf5e      	ittt	pl
 8001244:	699a      	ldrpl	r2, [r3, #24]
 8001246:	f042 0201 	orrpl.w	r2, r2, #1
 800124a:	619a      	strpl	r2, [r3, #24]
 800124c:	4770      	bx	lr

0800124e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800124e:	b530      	push	{r4, r5, lr}
 8001250:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001252:	6805      	ldr	r5, [r0, #0]
 8001254:	4323      	orrs	r3, r4
 8001256:	0d64      	lsrs	r4, r4, #21
 8001258:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800125c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001260:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001264:	6868      	ldr	r0, [r5, #4]
 8001266:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800126a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800126e:	4319      	orrs	r1, r3
 8001270:	f044 0403 	orr.w	r4, r4, #3
 8001274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001278:	ea20 0404 	bic.w	r4, r0, r4
 800127c:	4321      	orrs	r1, r4
 800127e:	6069      	str	r1, [r5, #4]
 8001280:	bd30      	pop	{r4, r5, pc}

08001282 <I2C_WaitOnFlagUntilTimeout>:
{
 8001282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001286:	9f06      	ldr	r7, [sp, #24]
 8001288:	4604      	mov	r4, r0
 800128a:	4688      	mov	r8, r1
 800128c:	4616      	mov	r6, r2
 800128e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	6993      	ldr	r3, [r2, #24]
 8001294:	ea38 0303 	bics.w	r3, r8, r3
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	42b3      	cmp	r3, r6
 80012a0:	d002      	beq.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80012a2:	2000      	movs	r0, #0
}
 80012a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012a8:	1c6b      	adds	r3, r5, #1
 80012aa:	d0f2      	beq.n	8001292 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ac:	f7ff fe82 	bl	8000fb4 <HAL_GetTick>
 80012b0:	1bc0      	subs	r0, r0, r7
 80012b2:	4285      	cmp	r5, r0
 80012b4:	d301      	bcc.n	80012ba <I2C_WaitOnFlagUntilTimeout+0x38>
 80012b6:	2d00      	cmp	r5, #0
 80012b8:	d1ea      	bne.n	8001290 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012c2:	2320      	movs	r3, #32
 80012c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80012ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80012d2:	2001      	movs	r0, #1
 80012d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080012d8 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012d8:	6803      	ldr	r3, [r0, #0]
{
 80012da:	b570      	push	{r4, r5, r6, lr}
 80012dc:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012de:	6998      	ldr	r0, [r3, #24]
 80012e0:	f010 0010 	ands.w	r0, r0, #16
{
 80012e4:	460d      	mov	r5, r1
 80012e6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012e8:	d116      	bne.n	8001318 <I2C_IsAcknowledgeFailed+0x40>
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80012ec:	1c69      	adds	r1, r5, #1
 80012ee:	d014      	beq.n	800131a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012f0:	f7ff fe60 	bl	8000fb4 <HAL_GetTick>
 80012f4:	1b80      	subs	r0, r0, r6
 80012f6:	4285      	cmp	r5, r0
 80012f8:	d300      	bcc.n	80012fc <I2C_IsAcknowledgeFailed+0x24>
 80012fa:	b96d      	cbnz	r5, 8001318 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001304:	2320      	movs	r3, #32
 8001306:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800130a:	2300      	movs	r3, #0
 800130c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001310:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001314:	2001      	movs	r0, #1
}
 8001316:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	6999      	ldr	r1, [r3, #24]
 800131c:	068a      	lsls	r2, r1, #26
 800131e:	d5e5      	bpl.n	80012ec <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001320:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001322:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001324:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001326:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001328:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800132a:	f7ff ff82 	bl	8001232 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800132e:	6822      	ldr	r2, [r4, #0]
 8001330:	6853      	ldr	r3, [r2, #4]
 8001332:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001336:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800133a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001344:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800134c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001350:	e7db      	b.n	800130a <I2C_IsAcknowledgeFailed+0x32>

08001352 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001352:	b570      	push	{r4, r5, r6, lr}
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	079b      	lsls	r3, r3, #30
 8001360:	d501      	bpl.n	8001366 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001362:	2000      	movs	r0, #0
 8001364:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001366:	4632      	mov	r2, r6
 8001368:	4629      	mov	r1, r5
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff ffb4 	bl	80012d8 <I2C_IsAcknowledgeFailed>
 8001370:	b9a0      	cbnz	r0, 800139c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001372:	1c6a      	adds	r2, r5, #1
 8001374:	d0f1      	beq.n	800135a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001376:	f7ff fe1d 	bl	8000fb4 <HAL_GetTick>
 800137a:	1b80      	subs	r0, r0, r6
 800137c:	4285      	cmp	r5, r0
 800137e:	d301      	bcc.n	8001384 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001380:	2d00      	cmp	r5, #0
 8001382:	d1ea      	bne.n	800135a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800138c:	2320      	movs	r3, #32
 800138e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001392:	2300      	movs	r3, #0
 8001394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001398:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
}
 800139e:	bd70      	pop	{r4, r5, r6, pc}

080013a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	069b      	lsls	r3, r3, #26
 80013ae:	d501      	bpl.n	80013b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80013b0:	2000      	movs	r0, #0
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b4:	4632      	mov	r2, r6
 80013b6:	4629      	mov	r1, r5
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff ff8d 	bl	80012d8 <I2C_IsAcknowledgeFailed>
 80013be:	b990      	cbnz	r0, 80013e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c0:	f7ff fdf8 	bl	8000fb4 <HAL_GetTick>
 80013c4:	1b80      	subs	r0, r0, r6
 80013c6:	4285      	cmp	r5, r0
 80013c8:	d301      	bcc.n	80013ce <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80013ca:	2d00      	cmp	r5, #0
 80013cc:	d1ec      	bne.n	80013a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	2320      	movs	r3, #32
 80013d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80013e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80013e6:	2001      	movs	r0, #1
}
 80013e8:	bd70      	pop	{r4, r5, r6, pc}

080013ea <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80013ea:	b570      	push	{r4, r5, r6, lr}
 80013ec:	4604      	mov	r4, r0
 80013ee:	460d      	mov	r5, r1
 80013f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	075b      	lsls	r3, r3, #29
 80013f8:	d40e      	bmi.n	8001418 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fa:	4632      	mov	r2, r6
 80013fc:	4629      	mov	r1, r5
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ff6a 	bl	80012d8 <I2C_IsAcknowledgeFailed>
 8001404:	b9f0      	cbnz	r0, 8001444 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	699a      	ldr	r2, [r3, #24]
 800140a:	0691      	lsls	r1, r2, #26
 800140c:	d51c      	bpl.n	8001448 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	0752      	lsls	r2, r2, #29
 8001412:	d503      	bpl.n	800141c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8001414:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001416:	b10a      	cbz	r2, 800141c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8001418:	2000      	movs	r0, #0
 800141a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800141c:	2120      	movs	r1, #32
 800141e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001426:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800142a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001438:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800143c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001440:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001444:	2001      	movs	r0, #1
}
 8001446:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001448:	f7ff fdb4 	bl	8000fb4 <HAL_GetTick>
 800144c:	1b80      	subs	r0, r0, r6
 800144e:	4285      	cmp	r5, r0
 8001450:	d301      	bcc.n	8001456 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8001452:	2d00      	cmp	r5, #0
 8001454:	d1cd      	bne.n	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001456:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800145e:	2320      	movs	r3, #32
 8001460:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001464:	2300      	movs	r3, #0
 8001466:	e7eb      	b.n	8001440 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08001468 <HAL_I2C_Init>:
{
 8001468:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800146a:	4604      	mov	r4, r0
 800146c:	b908      	cbnz	r0, 8001472 <HAL_I2C_Init+0xa>
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800146e:	6460      	str	r0, [r4, #68]	; 0x44
 8001470:	deff      	udf	#255	; 0xff
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001472:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001476:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800147a:	b91b      	cbnz	r3, 8001484 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800147c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001480:	f001 fbe8 	bl	8002c54 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001484:	2324      	movs	r3, #36	; 0x24
 8001486:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800148a:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800148c:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001496:	6862      	ldr	r2, [r4, #4]
 8001498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800149c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800149e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a0:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014aa:	d124      	bne.n	80014f6 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b2:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014b4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80014ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014be:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014c8:	6922      	ldr	r2, [r4, #16]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	69a1      	ldr	r1, [r4, #24]
 80014ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014d4:	6a21      	ldr	r1, [r4, #32]
 80014d6:	69e2      	ldr	r2, [r4, #28]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80014f4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014fa:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014fc:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014fe:	bf04      	itt	eq
 8001500:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001504:	605a      	streq	r2, [r3, #4]
 8001506:	e7d4      	b.n	80014b2 <HAL_I2C_Init+0x4a>

08001508 <HAL_I2C_Master_Transmit>:
{
 8001508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800150c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800150e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001512:	2b20      	cmp	r3, #32
{
 8001514:	4604      	mov	r4, r0
 8001516:	460e      	mov	r6, r1
 8001518:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800151a:	f040 8084 	bne.w	8001626 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 800151e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001522:	2b01      	cmp	r3, #1
 8001524:	d07f      	beq.n	8001626 <HAL_I2C_Master_Transmit+0x11e>
 8001526:	2701      	movs	r7, #1
 8001528:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800152c:	f7ff fd42 	bl	8000fb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001530:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001532:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001534:	9000      	str	r0, [sp, #0]
 8001536:	463a      	mov	r2, r7
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff fea0 	bl	8001282 <I2C_WaitOnFlagUntilTimeout>
 8001542:	b118      	cbz	r0, 800154c <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001544:	2001      	movs	r0, #1
}
 8001546:	b003      	add	sp, #12
 8001548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800154c:	2321      	movs	r3, #33	; 0x21
 800154e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001552:	2310      	movs	r3, #16
 8001554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001558:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800155a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800155e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001560:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001564:	b29b      	uxth	r3, r3
 8001566:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001568:	6360      	str	r0, [r4, #52]	; 0x34
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800156c:	d926      	bls.n	80015bc <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001572:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001578:	4631      	mov	r1, r6
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fe67 	bl	800124e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001582:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001584:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001586:	462a      	mov	r2, r5
 8001588:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800158a:	b9fb      	cbnz	r3, 80015cc <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158c:	f7ff ff08 	bl	80013a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001590:	2800      	cmp	r0, #0
 8001592:	d1d7      	bne.n	8001544 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	2120      	movs	r1, #32
 8001598:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80015a0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80015a4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80015b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80015ba:	e7c4      	b.n	8001546 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80015bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80015be:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80015c0:	b292      	uxth	r2, r2
 80015c2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	e7d5      	b.n	8001578 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015cc:	f7ff fec1 	bl	8001352 <I2C_WaitOnTXISFlagUntilTimeout>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d1b7      	bne.n	8001544 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80015d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	6261      	str	r1, [r4, #36]	; 0x24
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80015e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80015e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80015ec:	3a01      	subs	r2, #1
 80015ee:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015f0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80015f2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0c3      	beq.n	8001580 <HAL_I2C_Master_Transmit+0x78>
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	d1c1      	bne.n	8001580 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015fc:	9500      	str	r5, [sp, #0]
 80015fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fe3d 	bl	8001282 <I2C_WaitOnFlagUntilTimeout>
 8001608:	2800      	cmp	r0, #0
 800160a:	d19b      	bne.n	8001544 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800160c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800160e:	b29b      	uxth	r3, r3
 8001610:	2bff      	cmp	r3, #255	; 0xff
 8001612:	d903      	bls.n	800161c <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001614:	22ff      	movs	r2, #255	; 0xff
 8001616:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001618:	9000      	str	r0, [sp, #0]
 800161a:	e7ab      	b.n	8001574 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 800161c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800161e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001620:	b292      	uxth	r2, r2
 8001622:	8522      	strh	r2, [r4, #40]	; 0x28
 8001624:	e7ce      	b.n	80015c4 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8001626:	2002      	movs	r0, #2
 8001628:	e78d      	b.n	8001546 <HAL_I2C_Master_Transmit+0x3e>
 800162a:	bf00      	nop
 800162c:	80002000 	.word	0x80002000

08001630 <HAL_I2C_Master_Receive>:
{
 8001630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001634:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001636:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800163a:	2b20      	cmp	r3, #32
{
 800163c:	4604      	mov	r4, r0
 800163e:	460e      	mov	r6, r1
 8001640:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001642:	f040 8084 	bne.w	800174e <HAL_I2C_Master_Receive+0x11e>
    __HAL_LOCK(hi2c);
 8001646:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800164a:	2b01      	cmp	r3, #1
 800164c:	d07f      	beq.n	800174e <HAL_I2C_Master_Receive+0x11e>
 800164e:	2701      	movs	r7, #1
 8001650:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001654:	f7ff fcae 	bl	8000fb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001658:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800165a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800165c:	9000      	str	r0, [sp, #0]
 800165e:	463a      	mov	r2, r7
 8001660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fe0c 	bl	8001282 <I2C_WaitOnFlagUntilTimeout>
 800166a:	b118      	cbz	r0, 8001674 <HAL_I2C_Master_Receive+0x44>
      return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
}
 800166e:	b003      	add	sp, #12
 8001670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001674:	2322      	movs	r3, #34	; 0x22
 8001676:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800167a:	2310      	movs	r3, #16
 800167c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001682:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001686:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001688:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800168c:	b29b      	uxth	r3, r3
 800168e:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001690:	6360      	str	r0, [r4, #52]	; 0x34
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_I2C_Master_Receive+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001694:	d926      	bls.n	80016e4 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800169a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800169c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016a0:	4631      	mov	r1, r6
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff fdd3 	bl	800124e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80016ac:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ae:	462a      	mov	r2, r5
 80016b0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80016b2:	b9fb      	cbnz	r3, 80016f4 <HAL_I2C_Master_Receive+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b4:	f7ff fe74 	bl	80013a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d1d7      	bne.n	800166c <HAL_I2C_Master_Receive+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	2120      	movs	r1, #32
 80016c0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80016c8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80016cc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80016da:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016de:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80016e2:	e7c4      	b.n	800166e <HAL_I2C_Master_Receive+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80016e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016e6:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80016e8:	b292      	uxth	r2, r2
 80016ea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	e7d5      	b.n	80016a0 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f4:	f7ff fe79 	bl	80013ea <I2C_WaitOnRXNEFlagUntilTimeout>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	d1b7      	bne.n	800166c <HAL_I2C_Master_Receive+0x3c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80016fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	6262      	str	r2, [r4, #36]	; 0x24
 8001702:	6822      	ldr	r2, [r4, #0]
 8001704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001706:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001708:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800170a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800170c:	3b01      	subs	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001712:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001714:	3a01      	subs	r2, #1
 8001716:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001718:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800171a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0c3      	beq.n	80016a8 <HAL_I2C_Master_Receive+0x78>
 8001720:	2a00      	cmp	r2, #0
 8001722:	d1c1      	bne.n	80016a8 <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001724:	9500      	str	r5, [sp, #0]
 8001726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff fda9 	bl	8001282 <I2C_WaitOnFlagUntilTimeout>
 8001730:	2800      	cmp	r0, #0
 8001732:	d19b      	bne.n	800166c <HAL_I2C_Master_Receive+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001734:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001736:	b29b      	uxth	r3, r3
 8001738:	2bff      	cmp	r3, #255	; 0xff
 800173a:	d903      	bls.n	8001744 <HAL_I2C_Master_Receive+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800173c:	22ff      	movs	r2, #255	; 0xff
 800173e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001740:	9000      	str	r0, [sp, #0]
 8001742:	e7ab      	b.n	800169c <HAL_I2C_Master_Receive+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001744:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001746:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001748:	b292      	uxth	r2, r2
 800174a:	8522      	strh	r2, [r4, #40]	; 0x28
 800174c:	e7ce      	b.n	80016ec <HAL_I2C_Master_Receive+0xbc>
    return HAL_BUSY;
 800174e:	2002      	movs	r0, #2
 8001750:	e78d      	b.n	800166e <HAL_I2C_Master_Receive+0x3e>
 8001752:	bf00      	nop
 8001754:	80002400 	.word	0x80002400

08001758 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001758:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	2a20      	cmp	r2, #32
{
 8001760:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	d11d      	bne.n	80017a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001764:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001768:	2b01      	cmp	r3, #1
 800176a:	d019      	beq.n	80017a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800176c:	2324      	movs	r3, #36	; 0x24
 800176e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	681c      	ldr	r4, [r3, #0]
 8001776:	f024 0401 	bic.w	r4, r4, #1
 800177a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800177c:	681c      	ldr	r4, [r3, #0]
 800177e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001782:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001784:	681c      	ldr	r4, [r3, #0]
 8001786:	4321      	orrs	r1, r4
 8001788:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	f041 0101 	orr.w	r1, r1, #1
 8001790:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001792:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001794:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001798:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800179c:	4618      	mov	r0, r3
 800179e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80017a0:	2002      	movs	r0, #2
  }
}
 80017a2:	bd10      	pop	{r4, pc}

080017a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017a4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80017aa:	b2e4      	uxtb	r4, r4
 80017ac:	2c20      	cmp	r4, #32
 80017ae:	d11c      	bne.n	80017ea <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d018      	beq.n	80017ea <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b8:	2324      	movs	r3, #36	; 0x24
 80017ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017be:	6803      	ldr	r3, [r0, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017c8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017ca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017ce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017d2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017dc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80017de:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80017e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80017ea:	2002      	movs	r0, #2
  }
}
 80017ec:	bd10      	pop	{r4, pc}
	...

080017f0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_PWREx_GetVoltageRange+0xc>)
 80017f2:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80017f4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001802:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001804:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001808:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800180c:	d11a      	bne.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800180e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001812:	d013      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001814:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001816:	4912      	ldr	r1, [pc, #72]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001818:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800181c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001820:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	fbb2 f1f1 	udiv	r1, r2, r1
 800182a:	2232      	movs	r2, #50	; 0x32
 800182c:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800182e:	b112      	cbz	r2, 8001836 <HAL_PWREx_ControlVoltageScaling+0x36>
 8001830:	6959      	ldr	r1, [r3, #20]
 8001832:	0549      	lsls	r1, r1, #21
 8001834:	d404      	bmi.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	055b      	lsls	r3, r3, #21
 800183a:	d40d      	bmi.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 800183c:	2000      	movs	r0, #0
 800183e:	4770      	bx	lr
        wait_loop_index--;
 8001840:	3a01      	subs	r2, #1
 8001842:	e7f4      	b.n	800182e <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001844:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001848:	bf1f      	itttt	ne
 800184a:	681a      	ldrne	r2, [r3, #0]
 800184c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001850:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001854:	601a      	strne	r2, [r3, #0]
 8001856:	e7f1      	b.n	800183c <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
}  
 800185a:	4770      	bx	lr
 800185c:	40007000 	.word	0x40007000
 8001860:	000f4240 	.word	0x000f4240
 8001864:	20000000 	.word	0x20000000

08001868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001868:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800186a:	4d1e      	ldr	r5, [pc, #120]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800186c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800186e:	00da      	lsls	r2, r3, #3
{
 8001870:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001872:	d518      	bpl.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001874:	f7ff ffbc 	bl	80017f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001878:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800187c:	d123      	bne.n	80018c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800187e:	2c80      	cmp	r4, #128	; 0x80
 8001880:	d929      	bls.n	80018d6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001882:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001884:	bf8c      	ite	hi
 8001886:	2002      	movhi	r0, #2
 8001888:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	4303      	orrs	r3, r0
 8001894:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800189c:	1a18      	subs	r0, r3, r0
 800189e:	bf18      	it	ne
 80018a0:	2001      	movne	r0, #1
 80018a2:	b003      	add	sp, #12
 80018a4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	65ab      	str	r3, [r5, #88]	; 0x58
 80018ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80018b8:	f7ff ff9a 	bl	80017f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c2:	65ab      	str	r3, [r5, #88]	; 0x58
 80018c4:	e7d8      	b.n	8001878 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80018c6:	2c80      	cmp	r4, #128	; 0x80
 80018c8:	d807      	bhi.n	80018da <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80018ca:	d008      	beq.n	80018de <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80018cc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80018d0:	4258      	negs	r0, r3
 80018d2:	4158      	adcs	r0, r3
 80018d4:	e7d9      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7d7      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80018da:	2003      	movs	r0, #3
 80018dc:	e7d5      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80018de:	2002      	movs	r0, #2
 80018e0:	e7d3      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_RCC_GetSysClockFreq+0xc0>)
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	f012 0f0c 	tst.w	r2, #12
{
 80018f4:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018f6:	d009      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018fe:	2a0c      	cmp	r2, #12
 8001900:	d12d      	bne.n	800195e <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	f002 0203 	and.w	r2, r2, #3
 8001908:	2a01      	cmp	r2, #1
 800190a:	d128      	bne.n	800195e <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800190c:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800190e:	4928      	ldr	r1, [pc, #160]	; (80019b0 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001910:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001912:	bf55      	itete	pl
 8001914:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001918:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800191a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800191e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001922:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001926:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001928:	f011 0f0c 	tst.w	r1, #12
 800192c:	bf0c      	ite	eq
 800192e:	4610      	moveq	r0, r2
 8001930:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	f001 010c 	and.w	r1, r1, #12
 8001938:	290c      	cmp	r1, #12
 800193a:	d130      	bne.n	800199e <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800193c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800193e:	68d8      	ldr	r0, [r3, #12]
 8001940:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001944:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001946:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800194a:	2802      	cmp	r0, #2
 800194c:	d019      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x96>
 800194e:	2803      	cmp	r0, #3
 8001950:	d026      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001952:	fbb2 f2f1 	udiv	r2, r2, r1
 8001956:	68d8      	ldr	r0, [r3, #12]
 8001958:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800195c:	e017      	b.n	800198e <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	f002 020c 	and.w	r2, r2, #12
 8001964:	2a04      	cmp	r2, #4
 8001966:	d007      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	f002 020c 	and.w	r2, r2, #12
 800196e:	2a08      	cmp	r2, #8
 8001970:	d104      	bne.n	800197c <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001972:	4810      	ldr	r0, [pc, #64]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001974:	2200      	movs	r2, #0
 8001976:	e7dc      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001978:	480f      	ldr	r0, [pc, #60]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800197a:	e7fb      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 800197c:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800197e:	4602      	mov	r2, r0
 8001980:	e7d7      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001986:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800198a:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001994:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001996:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001998:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800199a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800199e:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019a4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80019a8:	e7ef      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x9e>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08003854 	.word	0x08003854
 80019b4:	007a1200 	.word	0x007a1200
 80019b8:	00f42400 	.word	0x00f42400

080019bc <HAL_RCC_OscConfig>:
{
 80019bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 80019c0:	4605      	mov	r5, r0
 80019c2:	b908      	cbnz	r0, 80019c8 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 80019c4:	2001      	movs	r0, #1
 80019c6:	e08d      	b.n	8001ae4 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019c8:	6803      	ldr	r3, [r0, #0]
 80019ca:	06d8      	lsls	r0, r3, #27
 80019cc:	d538      	bpl.n	8001a40 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80019ce:	4cab      	ldr	r4, [pc, #684]	; (8001c7c <HAL_RCC_OscConfig+0x2c0>)
 80019d0:	68a3      	ldr	r3, [r4, #8]
 80019d2:	f013 0f0c 	tst.w	r3, #12
 80019d6:	d161      	bne.n	8001a9c <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	0799      	lsls	r1, r3, #30
 80019dc:	d502      	bpl.n	80019e4 <HAL_RCC_OscConfig+0x28>
 80019de:	69ab      	ldr	r3, [r5, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ef      	beq.n	80019c4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	6a28      	ldr	r0, [r5, #32]
 80019e8:	071a      	lsls	r2, r3, #28
 80019ea:	bf56      	itet	pl
 80019ec:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80019f0:	6823      	ldrmi	r3, [r4, #0]
 80019f2:	091b      	lsrpl	r3, r3, #4
 80019f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f8:	4283      	cmp	r3, r0
 80019fa:	d23a      	bcs.n	8001a72 <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019fc:	f7ff ff34 	bl	8001868 <RCC_SetFlashLatencyFromMSIRange>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d1df      	bne.n	80019c4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6023      	str	r3, [r4, #0]
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	6a2a      	ldr	r2, [r5, #32]
 8001a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a14:	4313      	orrs	r3, r2
 8001a16:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	69ea      	ldr	r2, [r5, #28]
 8001a1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a24:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a26:	f7ff ff61 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8001a2a:	68a3      	ldr	r3, [r4, #8]
 8001a2c:	4a94      	ldr	r2, [pc, #592]	; (8001c80 <HAL_RCC_OscConfig+0x2c4>)
 8001a2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	40d8      	lsrs	r0, r3
 8001a36:	4b93      	ldr	r3, [pc, #588]	; (8001c84 <HAL_RCC_OscConfig+0x2c8>)
 8001a38:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fa92 	bl	8000f64 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	07d8      	lsls	r0, r3, #31
 8001a44:	d461      	bmi.n	8001b0a <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	0799      	lsls	r1, r3, #30
 8001a4a:	f100 80a9 	bmi.w	8001ba0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	071a      	lsls	r2, r3, #28
 8001a52:	f100 80e7 	bmi.w	8001c24 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	075b      	lsls	r3, r3, #29
 8001a5a:	f100 8115 	bmi.w	8001c88 <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a5e:	682b      	ldr	r3, [r5, #0]
 8001a60:	069a      	lsls	r2, r3, #26
 8001a62:	f100 817c 	bmi.w	8001d5e <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	f040 81a3 	bne.w	8001db4 <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e038      	b.n	8001ae4 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a80:	4303      	orrs	r3, r0
 8001a82:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a84:	6863      	ldr	r3, [r4, #4]
 8001a86:	69ea      	ldr	r2, [r5, #28]
 8001a88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a90:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a92:	f7ff fee9 	bl	8001868 <RCC_SetFlashLatencyFromMSIRange>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d0c5      	beq.n	8001a26 <HAL_RCC_OscConfig+0x6a>
 8001a9a:	e793      	b.n	80019c4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a9c:	69ab      	ldr	r3, [r5, #24]
 8001a9e:	b323      	cbz	r3, 8001aea <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa84 	bl	8000fb4 <HAL_GetTick>
 8001aac:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	079b      	lsls	r3, r3, #30
 8001ab2:	d511      	bpl.n	8001ad8 <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6023      	str	r3, [r4, #0]
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	6a2a      	ldr	r2, [r5, #32]
 8001ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	69ea      	ldr	r2, [r5, #28]
 8001acc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ad0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ad4:	6063      	str	r3, [r4, #4]
 8001ad6:	e7b3      	b.n	8001a40 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fa6c 	bl	8000fb4 <HAL_GetTick>
 8001adc:	1b80      	subs	r0, r0, r6
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	d9e5      	bls.n	8001aae <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 8001ae2:	2003      	movs	r0, #3
}
 8001ae4:	b002      	add	sp, #8
 8001ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001af2:	f7ff fa5f 	bl	8000fb4 <HAL_GetTick>
 8001af6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	079f      	lsls	r7, r3, #30
 8001afc:	d5a0      	bpl.n	8001a40 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afe:	f7ff fa59 	bl	8000fb4 <HAL_GetTick>
 8001b02:	1b80      	subs	r0, r0, r6
 8001b04:	2802      	cmp	r0, #2
 8001b06:	d9f7      	bls.n	8001af8 <HAL_RCC_OscConfig+0x13c>
 8001b08:	e7eb      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001b0a:	4c5c      	ldr	r4, [pc, #368]	; (8001c7c <HAL_RCC_OscConfig+0x2c0>)
 8001b0c:	68a3      	ldr	r3, [r4, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b16:	68a3      	ldr	r3, [r4, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d10b      	bne.n	8001b38 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b20:	68e3      	ldr	r3, [r4, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	039a      	lsls	r2, r3, #14
 8001b2e:	d58a      	bpl.n	8001a46 <HAL_RCC_OscConfig+0x8a>
 8001b30:	686b      	ldr	r3, [r5, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d187      	bne.n	8001a46 <HAL_RCC_OscConfig+0x8a>
 8001b36:	e745      	b.n	80019c4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	686b      	ldr	r3, [r5, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d110      	bne.n	8001b62 <HAL_RCC_OscConfig+0x1a6>
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b48:	f7ff fa34 	bl	8000fb4 <HAL_GetTick>
 8001b4c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	039b      	lsls	r3, r3, #14
 8001b52:	f53f af78 	bmi.w	8001a46 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b56:	f7ff fa2d 	bl	8000fb4 <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	2864      	cmp	r0, #100	; 0x64
 8001b5e:	d9f6      	bls.n	8001b4e <HAL_RCC_OscConfig+0x192>
 8001b60:	e7bf      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b66:	d104      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1b6>
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6e:	6023      	str	r3, [r4, #0]
 8001b70:	e7e6      	b.n	8001b40 <HAL_RCC_OscConfig+0x184>
 8001b72:	6822      	ldr	r2, [r4, #0]
 8001b74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b78:	6022      	str	r2, [r4, #0]
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b80:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8001b86:	f7ff fa15 	bl	8000fb4 <HAL_GetTick>
 8001b8a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	039f      	lsls	r7, r3, #14
 8001b90:	f57f af59 	bpl.w	8001a46 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fa0e 	bl	8000fb4 <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	2864      	cmp	r0, #100	; 0x64
 8001b9c:	d9f6      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1d0>
 8001b9e:	e7a0      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001ba0:	4c36      	ldr	r4, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x2c0>)
 8001ba2:	68a3      	ldr	r3, [r4, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bac:	68a3      	ldr	r3, [r4, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d113      	bne.n	8001bde <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bb6:	68e3      	ldr	r3, [r4, #12]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d10e      	bne.n	8001bde <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	055e      	lsls	r6, r3, #21
 8001bc4:	d503      	bpl.n	8001bce <HAL_RCC_OscConfig+0x212>
 8001bc6:	68eb      	ldr	r3, [r5, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f43f aefb 	beq.w	80019c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	6863      	ldr	r3, [r4, #4]
 8001bd0:	692a      	ldr	r2, [r5, #16]
 8001bd2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001bd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bda:	6063      	str	r3, [r4, #4]
 8001bdc:	e737      	b.n	8001a4e <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bde:	68eb      	ldr	r3, [r5, #12]
 8001be0:	b17b      	cbz	r3, 8001c02 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bea:	f7ff f9e3 	bl	8000fb4 <HAL_GetTick>
 8001bee:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	0558      	lsls	r0, r3, #21
 8001bf4:	d4eb      	bmi.n	8001bce <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f9dd 	bl	8000fb4 <HAL_GetTick>
 8001bfa:	1b80      	subs	r0, r0, r6
 8001bfc:	2802      	cmp	r0, #2
 8001bfe:	d9f7      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x234>
 8001c00:	e76f      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f9d3 	bl	8000fb4 <HAL_GetTick>
 8001c0e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	0559      	lsls	r1, r3, #21
 8001c14:	f57f af1b 	bpl.w	8001a4e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff f9cc 	bl	8000fb4 <HAL_GetTick>
 8001c1c:	1b80      	subs	r0, r0, r6
 8001c1e:	2802      	cmp	r0, #2
 8001c20:	d9f6      	bls.n	8001c10 <HAL_RCC_OscConfig+0x254>
 8001c22:	e75e      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	696b      	ldr	r3, [r5, #20]
 8001c26:	4c15      	ldr	r4, [pc, #84]	; (8001c7c <HAL_RCC_OscConfig+0x2c0>)
 8001c28:	b19b      	cbz	r3, 8001c52 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c36:	f7ff f9bd 	bl	8000fb4 <HAL_GetTick>
 8001c3a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001c3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c40:	079f      	lsls	r7, r3, #30
 8001c42:	f53f af08 	bmi.w	8001a56 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c46:	f7ff f9b5 	bl	8000fb4 <HAL_GetTick>
 8001c4a:	1b80      	subs	r0, r0, r6
 8001c4c:	2802      	cmp	r0, #2
 8001c4e:	d9f5      	bls.n	8001c3c <HAL_RCC_OscConfig+0x280>
 8001c50:	e747      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8001c52:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f9a9 	bl	8000fb4 <HAL_GetTick>
 8001c62:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001c64:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c68:	0798      	lsls	r0, r3, #30
 8001c6a:	f57f aef4 	bpl.w	8001a56 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f9a1 	bl	8000fb4 <HAL_GetTick>
 8001c72:	1b80      	subs	r0, r0, r6
 8001c74:	2802      	cmp	r0, #2
 8001c76:	d9f5      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2a8>
 8001c78:	e733      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	0800383a 	.word	0x0800383a
 8001c84:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c88:	4c79      	ldr	r4, [pc, #484]	; (8001e70 <HAL_RCC_OscConfig+0x4b4>)
 8001c8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c8c:	00d9      	lsls	r1, r3, #3
 8001c8e:	d427      	bmi.n	8001ce0 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c96:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ca2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	4e73      	ldr	r6, [pc, #460]	; (8001e74 <HAL_RCC_OscConfig+0x4b8>)
 8001ca6:	6833      	ldr	r3, [r6, #0]
 8001ca8:	05da      	lsls	r2, r3, #23
 8001caa:	d51b      	bpl.n	8001ce4 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	68ab      	ldr	r3, [r5, #8]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d129      	bne.n	8001d06 <HAL_RCC_OscConfig+0x34a>
 8001cb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f979 	bl	8000fb4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cc6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001cc8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ccc:	0798      	lsls	r0, r3, #30
 8001cce:	d540      	bpl.n	8001d52 <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8001cd0:	2f00      	cmp	r7, #0
 8001cd2:	f43f aec4 	beq.w	8001a5e <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8001cde:	e6be      	b.n	8001a5e <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001ce0:	2700      	movs	r7, #0
 8001ce2:	e7df      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce4:	6833      	ldr	r3, [r6, #0]
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001cec:	f7ff f962 	bl	8000fb4 <HAL_GetTick>
 8001cf0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf2:	6833      	ldr	r3, [r6, #0]
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	d4d9      	bmi.n	8001cac <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7ff f95c 	bl	8000fb4 <HAL_GetTick>
 8001cfc:	eba0 0008 	sub.w	r0, r0, r8
 8001d00:	2802      	cmp	r0, #2
 8001d02:	d9f6      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x336>
 8001d04:	e6ed      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x35c>
 8001d0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001d16:	e7cc      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2f6>
 8001d18:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001d24:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001d28:	f022 0204 	bic.w	r2, r2, #4
 8001d2c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1c4      	bne.n	8001cbe <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 8001d34:	f7ff f93e 	bl	8000fb4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d3c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001d3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d42:	0799      	lsls	r1, r3, #30
 8001d44:	d5c4      	bpl.n	8001cd0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff f935 	bl	8000fb4 <HAL_GetTick>
 8001d4a:	1b80      	subs	r0, r0, r6
 8001d4c:	4540      	cmp	r0, r8
 8001d4e:	d9f6      	bls.n	8001d3e <HAL_RCC_OscConfig+0x382>
 8001d50:	e6c7      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff f92f 	bl	8000fb4 <HAL_GetTick>
 8001d56:	1b80      	subs	r0, r0, r6
 8001d58:	4540      	cmp	r0, r8
 8001d5a:	d9b5      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x30c>
 8001d5c:	e6c1      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d60:	4c43      	ldr	r4, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x4b4>)
 8001d62:	b19b      	cbz	r3, 8001d8c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 8001d64:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001d70:	f7ff f920 	bl	8000fb4 <HAL_GetTick>
 8001d74:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001d76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d7a:	079b      	lsls	r3, r3, #30
 8001d7c:	f53f ae73 	bmi.w	8001a66 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d80:	f7ff f918 	bl	8000fb4 <HAL_GetTick>
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f5      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3ba>
 8001d8a:	e6aa      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 8001d8c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001d98:	f7ff f90c 	bl	8000fb4 <HAL_GetTick>
 8001d9c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001d9e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001da2:	079f      	lsls	r7, r3, #30
 8001da4:	f57f ae5f 	bpl.w	8001a66 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da8:	f7ff f904 	bl	8000fb4 <HAL_GetTick>
 8001dac:	1b80      	subs	r0, r0, r6
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d9f5      	bls.n	8001d9e <HAL_RCC_OscConfig+0x3e2>
 8001db2:	e696      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001db4:	4c2e      	ldr	r4, [pc, #184]	; (8001e70 <HAL_RCC_OscConfig+0x4b4>)
 8001db6:	68a3      	ldr	r3, [r4, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	f43f ae01 	beq.w	80019c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dcc:	d136      	bne.n	8001e3c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8001dce:	f7ff f8f1 	bl	8000fb4 <HAL_GetTick>
 8001dd2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	0198      	lsls	r0, r3, #6
 8001dd8:	d42a      	bmi.n	8001e30 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dda:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001ddc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001dde:	06db      	lsls	r3, r3, #27
 8001de0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001de4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001de6:	4313      	orrs	r3, r2
 8001de8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001dea:	3a01      	subs	r2, #1
 8001dec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001df0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001df2:	0852      	lsrs	r2, r2, #1
 8001df4:	3a01      	subs	r2, #1
 8001df6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001dfa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001dfc:	0852      	lsrs	r2, r2, #1
 8001dfe:	3a01      	subs	r2, #1
 8001e00:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001e04:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e0e:	68e3      	ldr	r3, [r4, #12]
 8001e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e14:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001e16:	f7ff f8cd 	bl	8000fb4 <HAL_GetTick>
 8001e1a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	0199      	lsls	r1, r3, #6
 8001e20:	f53f ae25 	bmi.w	8001a6e <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff f8c6 	bl	8000fb4 <HAL_GetTick>
 8001e28:	1b40      	subs	r0, r0, r5
 8001e2a:	2802      	cmp	r0, #2
 8001e2c:	d9f6      	bls.n	8001e1c <HAL_RCC_OscConfig+0x460>
 8001e2e:	e658      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff f8c0 	bl	8000fb4 <HAL_GetTick>
 8001e34:	1b80      	subs	r0, r0, r6
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9cc      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x418>
 8001e3a:	e652      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e40:	bf5e      	ittt	pl
 8001e42:	68e3      	ldrpl	r3, [r4, #12]
 8001e44:	f023 0303 	bicpl.w	r3, r3, #3
 8001e48:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e4a:	68e3      	ldr	r3, [r4, #12]
 8001e4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001e56:	f7ff f8ad 	bl	8000fb4 <HAL_GetTick>
 8001e5a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	019b      	lsls	r3, r3, #6
 8001e60:	f57f ae05 	bpl.w	8001a6e <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff f8a6 	bl	8000fb4 <HAL_GetTick>
 8001e68:	1b40      	subs	r0, r0, r5
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	d9f6      	bls.n	8001e5c <HAL_RCC_OscConfig+0x4a0>
 8001e6e:	e638      	b.n	8001ae2 <HAL_RCC_OscConfig+0x126>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000

08001e78 <HAL_RCC_ClockConfig>:
{
 8001e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001e7e:	4604      	mov	r4, r0
 8001e80:	b910      	cbnz	r0, 8001e88 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e82:	2001      	movs	r0, #1
 8001e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <HAL_RCC_ClockConfig+0x114>)
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	428b      	cmp	r3, r1
 8001e92:	d328      	bcc.n	8001ee6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	07d9      	lsls	r1, r3, #31
 8001e98:	d430      	bmi.n	8001efc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9a:	6821      	ldr	r1, [r4, #0]
 8001e9c:	078a      	lsls	r2, r1, #30
 8001e9e:	d45a      	bmi.n	8001f56 <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <HAL_RCC_ClockConfig+0x114>)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	429e      	cmp	r6, r3
 8001eaa:	d35c      	bcc.n	8001f66 <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	f011 0f04 	tst.w	r1, #4
 8001eb0:	4d37      	ldr	r5, [pc, #220]	; (8001f90 <HAL_RCC_ClockConfig+0x118>)
 8001eb2:	d163      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	070b      	lsls	r3, r1, #28
 8001eb6:	d506      	bpl.n	8001ec6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb8:	68ab      	ldr	r3, [r5, #8]
 8001eba:	6922      	ldr	r2, [r4, #16]
 8001ebc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ec0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ec4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec6:	f7ff fd11 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8001eca:	68ab      	ldr	r3, [r5, #8]
 8001ecc:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <HAL_RCC_ClockConfig+0x11c>)
 8001ece:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	40d8      	lsrs	r0, r3
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_ClockConfig+0x120>)
 8001ed8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff f842 	bl	8000f64 <HAL_InitTick>
  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	6813      	ldr	r3, [r2, #0]
 8001ee8:	f023 0307 	bic.w	r3, r3, #7
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	4299      	cmp	r1, r3
 8001ef8:	d1c3      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xa>
 8001efa:	e7cb      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efc:	6862      	ldr	r2, [r4, #4]
 8001efe:	4d24      	ldr	r5, [pc, #144]	; (8001f90 <HAL_RCC_ClockConfig+0x118>)
 8001f00:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001f02:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f04:	d11b      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001f06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f0a:	d0ba      	beq.n	8001e82 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	68ab      	ldr	r3, [r5, #8]
 8001f0e:	f023 0303 	bic.w	r3, r3, #3
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001f16:	f7ff f84d 	bl	8000fb4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f1e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	68ab      	ldr	r3, [r5, #8]
 8001f22:	6862      	ldr	r2, [r4, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f2c:	d0b5      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7ff f841 	bl	8000fb4 <HAL_GetTick>
 8001f32:	1bc0      	subs	r0, r0, r7
 8001f34:	4540      	cmp	r0, r8
 8001f36:	d9f3      	bls.n	8001f20 <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 8001f38:	2003      	movs	r0, #3
}
 8001f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	2a02      	cmp	r2, #2
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001f42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f46:	e7e0      	b.n	8001f0a <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f48:	b912      	cbnz	r2, 8001f50 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001f4a:	f013 0f02 	tst.w	r3, #2
 8001f4e:	e7dc      	b.n	8001f0a <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001f54:	e7d9      	b.n	8001f0a <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_RCC_ClockConfig+0x118>)
 8001f58:	68a0      	ldr	r0, [r4, #8]
 8001f5a:	6893      	ldr	r3, [r2, #8]
 8001f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f60:	4303      	orrs	r3, r0
 8001f62:	6093      	str	r3, [r2, #8]
 8001f64:	e79c      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	6813      	ldr	r3, [r2, #0]
 8001f68:	f023 0307 	bic.w	r3, r3, #7
 8001f6c:	4333      	orrs	r3, r6
 8001f6e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	6813      	ldr	r3, [r2, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	429e      	cmp	r6, r3
 8001f78:	d183      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xa>
 8001f7a:	e797      	b.n	8001eac <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	68ab      	ldr	r3, [r5, #8]
 8001f7e:	68e2      	ldr	r2, [r4, #12]
 8001f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60ab      	str	r3, [r5, #8]
 8001f88:	e794      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x3c>
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	0800383a 	.word	0x0800383a
 8001f98:	20000000 	.word	0x20000000

08001f9c <HAL_RCC_GetHCLKFreq>:
}
 8001f9c:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fb6:	6810      	ldr	r0, [r2, #0]
}
 8001fb8:	40d8      	lsrs	r0, r3
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	0800384a 	.word	0x0800384a
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x14>)
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	4a03      	ldr	r2, [pc, #12]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fd6:	6810      	ldr	r0, [r2, #0]
}
 8001fd8:	40d8      	lsrs	r0, r3
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	0800384a 	.word	0x0800384a
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <RCCEx_PLLSAI1_Config+0x114>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	f012 0f03 	tst.w	r2, #3
{
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	460e      	mov	r6, r1
 8001ff6:	461c      	mov	r4, r3
 8001ff8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ffa:	d039      	beq.n	8002070 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	f002 0203 	and.w	r2, r2, #3
 8002002:	4282      	cmp	r2, r0
 8002004:	d14b      	bne.n	800209e <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8002006:	2a00      	cmp	r2, #0
 8002008:	d049      	beq.n	800209e <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800200a:	68db      	ldr	r3, [r3, #12]
       ||
 800200c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800200e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002012:	3301      	adds	r3, #1
       ||
 8002014:	4293      	cmp	r3, r2
 8002016:	d142      	bne.n	800209e <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800201e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002020:	f7fe ffc8 	bl	8000fb4 <HAL_GetTick>
 8002024:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	011a      	lsls	r2, r3, #4
 800202a:	d441      	bmi.n	80020b0 <RCCEx_PLLSAI1_Config+0xc8>
 800202c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800202e:	2e00      	cmp	r6, #0
 8002030:	d045      	beq.n	80020be <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002032:	2e01      	cmp	r6, #1
 8002034:	d14f      	bne.n	80020d6 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002036:	6922      	ldr	r2, [r4, #16]
 8002038:	6928      	ldr	r0, [r5, #16]
 800203a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800203e:	0840      	lsrs	r0, r0, #1
 8002040:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002044:	3801      	subs	r0, #1
 8002046:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800204a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800204e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002056:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7fe ffac 	bl	8000fb4 <HAL_GetTick>
 800205c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	d545      	bpl.n	80020f0 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002064:	6923      	ldr	r3, [r4, #16]
 8002066:	69aa      	ldr	r2, [r5, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	6123      	str	r3, [r4, #16]
 800206c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002070:	2802      	cmp	r0, #2
 8002072:	d010      	beq.n	8002096 <RCCEx_PLLSAI1_Config+0xae>
 8002074:	2803      	cmp	r0, #3
 8002076:	d014      	beq.n	80020a2 <RCCEx_PLLSAI1_Config+0xba>
 8002078:	2801      	cmp	r0, #1
 800207a:	d110      	bne.n	800209e <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	079f      	lsls	r7, r3, #30
 8002080:	d5f5      	bpl.n	800206e <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002082:	68e3      	ldr	r3, [r4, #12]
 8002084:	686a      	ldr	r2, [r5, #4]
 8002086:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800208a:	3a01      	subs	r2, #1
 800208c:	4318      	orrs	r0, r3
 800208e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002092:	60e0      	str	r0, [r4, #12]
 8002094:	e7c0      	b.n	8002018 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800209c:	d1f1      	bne.n	8002082 <RCCEx_PLLSAI1_Config+0x9a>
 800209e:	2001      	movs	r0, #1
 80020a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	0391      	lsls	r1, r2, #14
 80020a6:	d4ec      	bmi.n	8002082 <RCCEx_PLLSAI1_Config+0x9a>
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80020ae:	e7f5      	b.n	800209c <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020b0:	f7fe ff80 	bl	8000fb4 <HAL_GetTick>
 80020b4:	1bc0      	subs	r0, r0, r7
 80020b6:	2802      	cmp	r0, #2
 80020b8:	d9b5      	bls.n	8002026 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80020ba:	2003      	movs	r0, #3
 80020bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020be:	6922      	ldr	r2, [r4, #16]
 80020c0:	68e9      	ldr	r1, [r5, #12]
 80020c2:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80020c6:	06c9      	lsls	r1, r1, #27
 80020c8:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80020cc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80020d0:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020d2:	6123      	str	r3, [r4, #16]
 80020d4:	e7bc      	b.n	8002050 <RCCEx_PLLSAI1_Config+0x68>
 80020d6:	6923      	ldr	r3, [r4, #16]
 80020d8:	6968      	ldr	r0, [r5, #20]
 80020da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020de:	0840      	lsrs	r0, r0, #1
 80020e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020e4:	3801      	subs	r0, #1
 80020e6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80020ea:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80020ee:	e7f0      	b.n	80020d2 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020f0:	f7fe ff60 	bl	8000fb4 <HAL_GetTick>
 80020f4:	1b80      	subs	r0, r0, r6
 80020f6:	2802      	cmp	r0, #2
 80020f8:	d9b1      	bls.n	800205e <RCCEx_PLLSAI1_Config+0x76>
 80020fa:	e7de      	b.n	80020ba <RCCEx_PLLSAI1_Config+0xd2>
 80020fc:	40021000 	.word	0x40021000

08002100 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002104:	6805      	ldr	r5, [r0, #0]
 8002106:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800210a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800210c:	d00e      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800210e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002110:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002114:	d05b      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002116:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800211a:	d05d      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800211c:	2900      	cmp	r1, #0
 800211e:	d166      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002120:	3004      	adds	r0, #4
 8002122:	f7ff ff61 	bl	8001fe8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8002126:	4605      	mov	r5, r0
 8002128:	2800      	cmp	r0, #0
 800212a:	d055      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	039e      	lsls	r6, r3, #14
 8002130:	d56d      	bpl.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4e92      	ldr	r6, [pc, #584]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002134:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002136:	00d8      	lsls	r0, r3, #3
 8002138:	d45b      	bmi.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	65b3      	str	r3, [r6, #88]	; 0x58
 8002142:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800214c:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800214e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8002380 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002152:	f8d8 3000 	ldr.w	r3, [r8]
 8002156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215a:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 800215e:	f7fe ff29 	bl	8000fb4 <HAL_GetTick>
 8002162:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002164:	f8d8 3000 	ldr.w	r3, [r8]
 8002168:	05d9      	lsls	r1, r3, #23
 800216a:	d544      	bpl.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 800216c:	2d00      	cmp	r5, #0
 800216e:	d149      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002170:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002174:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002178:	d014      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800217a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800217c:	4293      	cmp	r3, r2
 800217e:	d011      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002180:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002188:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800218c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002190:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002198:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800219c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80021a0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a4:	07da      	lsls	r2, r3, #31
 80021a6:	d509      	bpl.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff04 	bl	8000fb4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80021b0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80021b2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80021b6:	079b      	lsls	r3, r3, #30
 80021b8:	f140 80c2 	bpl.w	8002340 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021bc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80021c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80021c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80021cc:	e01a      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021ce:	4a6b      	ldr	r2, [pc, #428]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021d0:	68d3      	ldr	r3, [r2, #12]
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d8:	4a68      	ldr	r2, [pc, #416]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80021dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021e4:	430b      	orrs	r3, r1
 80021e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80021ea:	2500      	movs	r5, #0
 80021ec:	e79e      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 80021ee:	2501      	movs	r5, #1
 80021f0:	e79c      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2700      	movs	r7, #0
 80021f4:	e7ab      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fedd 	bl	8000fb4 <HAL_GetTick>
 80021fa:	eba0 0009 	sub.w	r0, r0, r9
 80021fe:	2802      	cmp	r0, #2
 8002200:	d9b0      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8002202:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002204:	b11f      	cbz	r7, 800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	07df      	lsls	r7, r3, #31
 8002212:	d508      	bpl.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002214:	4959      	ldr	r1, [pc, #356]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002216:	6a20      	ldr	r0, [r4, #32]
 8002218:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800221c:	f022 0203 	bic.w	r2, r2, #3
 8002220:	4302      	orrs	r2, r0
 8002222:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002226:	079e      	lsls	r6, r3, #30
 8002228:	d508      	bpl.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800222a:	4954      	ldr	r1, [pc, #336]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800222c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800222e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002232:	f022 020c 	bic.w	r2, r2, #12
 8002236:	4302      	orrs	r2, r0
 8002238:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800223c:	0698      	lsls	r0, r3, #26
 800223e:	d508      	bpl.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002240:	494e      	ldr	r1, [pc, #312]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002242:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002244:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002248:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800224c:	4302      	orrs	r2, r0
 800224e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002252:	0599      	lsls	r1, r3, #22
 8002254:	d508      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002256:	4949      	ldr	r1, [pc, #292]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002258:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800225a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800225e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002262:	4302      	orrs	r2, r0
 8002264:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002268:	055a      	lsls	r2, r3, #21
 800226a:	d508      	bpl.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800226c:	4943      	ldr	r1, [pc, #268]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800226e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002270:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002274:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002278:	4302      	orrs	r2, r0
 800227a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227e:	065f      	lsls	r7, r3, #25
 8002280:	d508      	bpl.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	493e      	ldr	r1, [pc, #248]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002284:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002286:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800228a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800228e:	4302      	orrs	r2, r0
 8002290:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002294:	05de      	lsls	r6, r3, #23
 8002296:	d508      	bpl.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002298:	4938      	ldr	r1, [pc, #224]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800229a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800229c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022a0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80022a4:	4302      	orrs	r2, r0
 80022a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022aa:	0498      	lsls	r0, r3, #18
 80022ac:	d50f      	bpl.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ae:	4a33      	ldr	r2, [pc, #204]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80022b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022b6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80022ba:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c4:	d144      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c6:	68d3      	ldr	r3, [r2, #12]
 80022c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022cc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	0359      	lsls	r1, r3, #13
 80022d2:	d50f      	bpl.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80022d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022dc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80022e0:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ea:	d13c      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	68d3      	ldr	r3, [r2, #12]
 80022ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	045a      	lsls	r2, r3, #17
 80022f8:	d512      	bpl.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022fa:	4920      	ldr	r1, [pc, #128]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80022fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002302:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002306:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002308:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002310:	d106      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002312:	2102      	movs	r1, #2
 8002314:	1d20      	adds	r0, r4, #4
 8002316:	f7ff fe67 	bl	8001fe8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800231a:	2800      	cmp	r0, #0
 800231c:	bf18      	it	ne
 800231e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	d508      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002328:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800232a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800232e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002332:	430b      	orrs	r3, r1
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002338:	4628      	mov	r0, r5
 800233a:	b003      	add	sp, #12
 800233c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe fe38 	bl	8000fb4 <HAL_GetTick>
 8002344:	eba0 0008 	sub.w	r0, r0, r8
 8002348:	4548      	cmp	r0, r9
 800234a:	f67f af32 	bls.w	80021b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800234e:	e758      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002350:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002354:	d1bb      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002356:	2101      	movs	r1, #1
 8002358:	1d20      	adds	r0, r4, #4
 800235a:	f7ff fe45 	bl	8001fe8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800235e:	2800      	cmp	r0, #0
 8002360:	bf18      	it	ne
 8002362:	4605      	movne	r5, r0
 8002364:	e7b3      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002366:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800236a:	d1c3      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236c:	2101      	movs	r1, #1
 800236e:	1d20      	adds	r0, r4, #4
 8002370:	f7ff fe3a 	bl	8001fe8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002374:	2800      	cmp	r0, #0
 8002376:	bf18      	it	ne
 8002378:	4605      	movne	r5, r0
 800237a:	e7bb      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000

08002384 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002384:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002386:	69c1      	ldr	r1, [r0, #28]
{
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800238c:	6883      	ldr	r3, [r0, #8]
 800238e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002390:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002392:	4303      	orrs	r3, r0
 8002394:	6960      	ldr	r0, [r4, #20]
 8002396:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002398:	4882      	ldr	r0, [pc, #520]	; (80025a4 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800239a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800239c:	4028      	ands	r0, r5
 800239e:	4303      	orrs	r3, r0
 80023a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a2:	6853      	ldr	r3, [r2, #4]
 80023a4:	68e0      	ldr	r0, [r4, #12]
 80023a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023aa:	4303      	orrs	r3, r0
 80023ac:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023ae:	4b7e      	ldr	r3, [pc, #504]	; (80025a8 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023b0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023b2:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023b4:	bf1c      	itt	ne
 80023b6:	6a23      	ldrne	r3, [r4, #32]
 80023b8:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ba:	6893      	ldr	r3, [r2, #8]
 80023bc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80023c0:	4303      	orrs	r3, r0
 80023c2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c4:	4b79      	ldr	r3, [pc, #484]	; (80025ac <UART_SetConfig+0x228>)
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d114      	bne.n	80023f4 <UART_SetConfig+0x70>
 80023ca:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80023ce:	4a78      	ldr	r2, [pc, #480]	; (80025b0 <UART_SetConfig+0x22c>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	f040 80aa 	bne.w	8002536 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d820      	bhi.n	8002428 <UART_SetConfig+0xa4>
 80023e6:	e8df f003 	tbb	[pc, r3]
 80023ea:	8f77      	.short	0x8f77
 80023ec:	1f9b1f92 	.word	0x1f9b1f92
 80023f0:	1f1f      	.short	0x1f1f
 80023f2:	9e          	.byte	0x9e
 80023f3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f4:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <UART_SetConfig+0x230>)
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d107      	bne.n	800240a <UART_SetConfig+0x86>
 80023fa:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80023fe:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <UART_SetConfig+0x234>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	e7e6      	b.n	80023d8 <UART_SetConfig+0x54>
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <UART_SetConfig+0x224>)
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 80c2 	bne.w	8002596 <UART_SetConfig+0x212>
 8002412:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002416:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800241a:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800241e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002422:	d02a      	beq.n	800247a <UART_SetConfig+0xf6>
 8002424:	d806      	bhi.n	8002434 <UART_SetConfig+0xb0>
 8002426:	b315      	cbz	r5, 800246e <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8002428:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800242e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002430:	4610      	mov	r0, r2
 8002432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002434:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002438:	d006      	beq.n	8002448 <UART_SetConfig+0xc4>
 800243a:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800243e:	d1f3      	bne.n	8002428 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002440:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002444:	2508      	movs	r5, #8
 8002446:	e001      	b.n	800244c <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002448:	485c      	ldr	r0, [pc, #368]	; (80025bc <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800244a:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800244c:	6862      	ldr	r2, [r4, #4]
 800244e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002452:	4283      	cmp	r3, r0
 8002454:	d8e8      	bhi.n	8002428 <UART_SetConfig+0xa4>
 8002456:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800245a:	d8e5      	bhi.n	8002428 <UART_SetConfig+0xa4>
        switch (clocksource)
 800245c:	2d08      	cmp	r5, #8
 800245e:	d838      	bhi.n	80024d2 <UART_SetConfig+0x14e>
 8002460:	e8df f005 	tbb	[pc, r5]
 8002464:	3726370f 	.word	0x3726370f
 8002468:	3737372e 	.word	0x3737372e
 800246c:	31          	.byte	0x31
 800246d:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800246e:	f7ff fd9b 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8002472:	2800      	cmp	r0, #0
 8002474:	d1ea      	bne.n	800244c <UART_SetConfig+0xc8>
 8002476:	4602      	mov	r2, r0
 8002478:	e7d7      	b.n	800242a <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800247a:	f7ff fa37 	bl	80018ec <HAL_RCC_GetSysClockFreq>
        break;
 800247e:	2504      	movs	r5, #4
 8002480:	e7f7      	b.n	8002472 <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002482:	f7ff fd91 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248c:	0856      	lsrs	r6, r2, #1
 800248e:	2700      	movs	r7, #0
 8002490:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002494:	2300      	movs	r3, #0
 8002496:	4630      	mov	r0, r6
 8002498:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800249a:	f7fe fbdb 	bl	8000c54 <__aeabi_uldivmod>
            break;
 800249e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024a0:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <UART_SetConfig+0x23c>)
 80024a2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80024a6:	4299      	cmp	r1, r3
 80024a8:	d8be      	bhi.n	8002428 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	60d8      	str	r0, [r3, #12]
 80024ae:	e7bc      	b.n	800242a <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80024b0:	4844      	ldr	r0, [pc, #272]	; (80025c4 <UART_SetConfig+0x240>)
 80024b2:	0855      	lsrs	r5, r2, #1
 80024b4:	2300      	movs	r3, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80024ba:	f141 0100 	adc.w	r1, r1, #0
 80024be:	e7ec      	b.n	800249a <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024c0:	f7ff fa14 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80024c4:	e7df      	b.n	8002486 <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80024c6:	0850      	lsrs	r0, r2, #1
 80024c8:	2100      	movs	r1, #0
 80024ca:	2300      	movs	r3, #0
 80024cc:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80024d0:	e7f3      	b.n	80024ba <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 80024d2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024d4:	2000      	movs	r0, #0
 80024d6:	e7e3      	b.n	80024a0 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024d8:	f7ff fd66 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024dc:	6861      	ldr	r1, [r4, #4]
 80024de:	084a      	lsrs	r2, r1, #1
 80024e0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80024e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ea:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024ec:	f1a3 0010 	sub.w	r0, r3, #16
 80024f0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80024f4:	4288      	cmp	r0, r1
 80024f6:	d897      	bhi.n	8002428 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 80024f8:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80024fc:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024fe:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002502:	430b      	orrs	r3, r1
 8002504:	60c3      	str	r3, [r0, #12]
 8002506:	e790      	b.n	800242a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002508:	f7ff fd5e 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 800250c:	e7e6      	b.n	80024dc <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800250e:	6860      	ldr	r0, [r4, #4]
 8002510:	0843      	lsrs	r3, r0, #1
 8002512:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002516:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800251a:	fbb3 f3f0 	udiv	r3, r3, r0
 800251e:	e7e3      	b.n	80024e8 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002520:	f7ff f9e4 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8002524:	e7da      	b.n	80024dc <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002526:	6860      	ldr	r0, [r4, #4]
 8002528:	0843      	lsrs	r3, r0, #1
 800252a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800252e:	e7f4      	b.n	800251a <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8002530:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002532:	2300      	movs	r3, #0
 8002534:	e7da      	b.n	80024ec <UART_SetConfig+0x168>
    switch (clocksource)
 8002536:	2b08      	cmp	r3, #8
 8002538:	d830      	bhi.n	800259c <UART_SetConfig+0x218>
 800253a:	e8df f003 	tbb	[pc, r3]
 800253e:	1805      	.short	0x1805
 8002540:	2f242f1b 	.word	0x2f242f1b
 8002544:	2f2f      	.short	0x2f2f
 8002546:	27          	.byte	0x27
 8002547:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002548:	f7ff fd2e 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800254c:	6862      	ldr	r2, [r4, #4]
 800254e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002552:	fbb3 f3f2 	udiv	r3, r3, r2
 8002556:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002558:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800255a:	f1a3 0010 	sub.w	r0, r3, #16
 800255e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002562:	4288      	cmp	r0, r1
 8002564:	f63f af60 	bhi.w	8002428 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8002568:	6821      	ldr	r1, [r4, #0]
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e75d      	b.n	800242a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800256e:	f7ff fd2b 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8002572:	e7eb      	b.n	800254c <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002574:	6860      	ldr	r0, [r4, #4]
 8002576:	0843      	lsrs	r3, r0, #1
 8002578:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800257c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002580:	fbb3 f3f0 	udiv	r3, r3, r0
 8002584:	e7e7      	b.n	8002556 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002586:	f7ff f9b1 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 800258a:	e7df      	b.n	800254c <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800258c:	6860      	ldr	r0, [r4, #4]
 800258e:	0843      	lsrs	r3, r0, #1
 8002590:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002594:	e7f4      	b.n	8002580 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002596:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800259a:	d0c9      	beq.n	8002530 <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 800259c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800259e:	2300      	movs	r3, #0
 80025a0:	e7db      	b.n	800255a <UART_SetConfig+0x1d6>
 80025a2:	bf00      	nop
 80025a4:	efff69f3 	.word	0xefff69f3
 80025a8:	40008000 	.word	0x40008000
 80025ac:	40013800 	.word	0x40013800
 80025b0:	080037ec 	.word	0x080037ec
 80025b4:	40004400 	.word	0x40004400
 80025b8:	080037f0 	.word	0x080037f0
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	000ffcff 	.word	0x000ffcff
 80025c4:	f4240000 	.word	0xf4240000

080025c8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025ca:	07da      	lsls	r2, r3, #31
{
 80025cc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025ce:	d506      	bpl.n	80025de <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025d0:	6801      	ldr	r1, [r0, #0]
 80025d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80025d4:	684a      	ldr	r2, [r1, #4]
 80025d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025da:	4322      	orrs	r2, r4
 80025dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025de:	079c      	lsls	r4, r3, #30
 80025e0:	d506      	bpl.n	80025f0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025e2:	6801      	ldr	r1, [r0, #0]
 80025e4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80025e6:	684a      	ldr	r2, [r1, #4]
 80025e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025ec:	4322      	orrs	r2, r4
 80025ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025f0:	0759      	lsls	r1, r3, #29
 80025f2:	d506      	bpl.n	8002602 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025f4:	6801      	ldr	r1, [r0, #0]
 80025f6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80025f8:	684a      	ldr	r2, [r1, #4]
 80025fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025fe:	4322      	orrs	r2, r4
 8002600:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002602:	071a      	lsls	r2, r3, #28
 8002604:	d506      	bpl.n	8002614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002606:	6801      	ldr	r1, [r0, #0]
 8002608:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800260a:	684a      	ldr	r2, [r1, #4]
 800260c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002610:	4322      	orrs	r2, r4
 8002612:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002614:	06dc      	lsls	r4, r3, #27
 8002616:	d506      	bpl.n	8002626 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002618:	6801      	ldr	r1, [r0, #0]
 800261a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800261c:	688a      	ldr	r2, [r1, #8]
 800261e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002622:	4322      	orrs	r2, r4
 8002624:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002626:	0699      	lsls	r1, r3, #26
 8002628:	d506      	bpl.n	8002638 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800262a:	6801      	ldr	r1, [r0, #0]
 800262c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800262e:	688a      	ldr	r2, [r1, #8]
 8002630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002634:	4322      	orrs	r2, r4
 8002636:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002638:	065a      	lsls	r2, r3, #25
 800263a:	d50f      	bpl.n	800265c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800263c:	6801      	ldr	r1, [r0, #0]
 800263e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002640:	684a      	ldr	r2, [r1, #4]
 8002642:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002646:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002648:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800264c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800264e:	d105      	bne.n	800265c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002650:	684a      	ldr	r2, [r1, #4]
 8002652:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002654:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002658:	4322      	orrs	r2, r4
 800265a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	d506      	bpl.n	800266e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002660:	6802      	ldr	r2, [r0, #0]
 8002662:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002664:	6853      	ldr	r3, [r2, #4]
 8002666:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800266a:	430b      	orrs	r3, r1
 800266c:	6053      	str	r3, [r2, #4]
 800266e:	bd10      	pop	{r4, pc}

08002670 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002674:	9d06      	ldr	r5, [sp, #24]
 8002676:	4604      	mov	r4, r0
 8002678:	460f      	mov	r7, r1
 800267a:	4616      	mov	r6, r2
 800267c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800267e:	6821      	ldr	r1, [r4, #0]
 8002680:	69ca      	ldr	r2, [r1, #28]
 8002682:	ea37 0302 	bics.w	r3, r7, r2
 8002686:	bf0c      	ite	eq
 8002688:	2201      	moveq	r2, #1
 800268a:	2200      	movne	r2, #0
 800268c:	42b2      	cmp	r2, r6
 800268e:	d002      	beq.n	8002696 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002690:	2000      	movs	r0, #0
}
 8002692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002696:	1c6b      	adds	r3, r5, #1
 8002698:	d0f2      	beq.n	8002680 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800269a:	b99d      	cbnz	r5, 80026c4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80026ae:	2320      	movs	r3, #32
 80026b0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80026b4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80026b8:	2300      	movs	r3, #0
 80026ba:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80026be:	2003      	movs	r0, #3
 80026c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026c4:	f7fe fc76 	bl	8000fb4 <HAL_GetTick>
 80026c8:	eba0 0008 	sub.w	r0, r0, r8
 80026cc:	4285      	cmp	r5, r0
 80026ce:	d2d6      	bcs.n	800267e <UART_WaitOnFlagUntilTimeout+0xe>
 80026d0:	e7e4      	b.n	800269c <UART_WaitOnFlagUntilTimeout+0x2c>

080026d2 <HAL_UART_Transmit>:
{
 80026d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026d6:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80026d8:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80026dc:	2b20      	cmp	r3, #32
{
 80026de:	4604      	mov	r4, r0
 80026e0:	460d      	mov	r5, r1
 80026e2:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80026e4:	d14a      	bne.n	800277c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80026e6:	2900      	cmp	r1, #0
 80026e8:	d046      	beq.n	8002778 <HAL_UART_Transmit+0xa6>
 80026ea:	2a00      	cmp	r2, #0
 80026ec:	d044      	beq.n	8002778 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80026ee:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d042      	beq.n	800277c <HAL_UART_Transmit+0xaa>
 80026f6:	2301      	movs	r3, #1
 80026f8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002700:	2321      	movs	r3, #33	; 0x21
 8002702:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002706:	f7fe fc55 	bl	8000fb4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800270a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800270e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002710:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002714:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002718:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 800271a:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800271c:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 800271e:	b952      	cbnz	r2, 8002736 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002720:	2140      	movs	r1, #64	; 0x40
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff ffa4 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002728:	b958      	cbnz	r0, 8002742 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800272a:	2320      	movs	r3, #32
 800272c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002730:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002734:	e006      	b.n	8002744 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002736:	2200      	movs	r2, #0
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff ff98 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002740:	b118      	cbz	r0, 800274a <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002742:	2003      	movs	r0, #3
}
 8002744:	b002      	add	sp, #8
 8002746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274a:	68a3      	ldr	r3, [r4, #8]
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	d10d      	bne.n	8002770 <HAL_UART_Transmit+0x9e>
 8002754:	6923      	ldr	r3, [r4, #16]
 8002756:	b95b      	cbnz	r3, 8002770 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002758:	f835 3b02 	ldrh.w	r3, [r5], #2
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002762:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002766:	3b01      	subs	r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800276e:	e7d1      	b.n	8002714 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002770:	782b      	ldrb	r3, [r5, #0]
 8002772:	8513      	strh	r3, [r2, #40]	; 0x28
 8002774:	3501      	adds	r5, #1
 8002776:	e7f4      	b.n	8002762 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002778:	2001      	movs	r0, #1
 800277a:	e7e3      	b.n	8002744 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800277c:	2002      	movs	r0, #2
 800277e:	e7e1      	b.n	8002744 <HAL_UART_Transmit+0x72>

08002780 <UART_CheckIdleState>:
{
 8002780:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002782:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	2600      	movs	r6, #0
 8002786:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002788:	f7fe fc14 	bl	8000fb4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002792:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002794:	d417      	bmi.n	80027c6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	075b      	lsls	r3, r3, #29
 800279c:	d50a      	bpl.n	80027b4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	462b      	mov	r3, r5
 80027a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ff5f 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 80027b2:	b9a0      	cbnz	r0, 80027de <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80027b4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80027b6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80027bc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80027c4:	e00c      	b.n	80027e0 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	4632      	mov	r2, r6
 80027ce:	4603      	mov	r3, r0
 80027d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7ff ff4b 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 80027da:	2800      	cmp	r0, #0
 80027dc:	d0db      	beq.n	8002796 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027de:	2003      	movs	r0, #3
}
 80027e0:	b002      	add	sp, #8
 80027e2:	bd70      	pop	{r4, r5, r6, pc}

080027e4 <HAL_UART_Init>:
{
 80027e4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80027e6:	4604      	mov	r4, r0
 80027e8:	b360      	cbz	r0, 8002844 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80027ea:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80027ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027f2:	b91b      	cbnz	r3, 80027fc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027f4:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80027f8:	f000 fa54 	bl	8002ca4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027fc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027fe:	2324      	movs	r3, #36	; 0x24
 8002800:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff fdb9 	bl	8002384 <UART_SetConfig>
 8002812:	2801      	cmp	r0, #1
 8002814:	d016      	beq.n	8002844 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002818:	b113      	cbz	r3, 8002820 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff fed4 	bl	80025c8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002828:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002830:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002838:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002840:	f7ff bf9e 	b.w	8002780 <UART_CheckIdleState>
}
 8002844:	2001      	movs	r0, #1
 8002846:	bd10      	pop	{r4, pc}

08002848 <dtostrf>:
#include <string.h>
#include <stdio.h>

// function from https://github.com/stm32duino/Arduino_Core_STM32/blob/master/cores/arduino/avr/dtostrf.c
void dtostrf (double val, signed char width, unsigned char prec, char *sout)
{
 8002848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800284c:	ec59 8b10 	vmov	r8, r9, d0
 8002850:	b0a2      	sub	sp, #136	; 0x88
 8002852:	4604      	mov	r4, r0
 8002854:	460f      	mov	r7, r1
 8002856:	4615      	mov	r5, r2
  sprintf(sout, fmt, val);
  return sout;*/

  // Handle negative numbers
  unsigned int negative = 0;
  if (val < 0.0)
 8002858:	2300      	movs	r3, #0
 800285a:	2200      	movs	r2, #0
 800285c:	ee10 0a10 	vmov	r0, s0
 8002860:	4649      	mov	r1, r9
 8002862:	f7fe f937 	bl	8000ad4 <__aeabi_dcmplt>
 8002866:	2800      	cmp	r0, #0
 8002868:	d063      	beq.n	8002932 <dtostrf+0xea>
  {
     negative = 1;
     val = -val;
 800286a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800286e:	4699      	mov	r9, r3
     negative = 1;
 8002870:	2601      	movs	r6, #1
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8002872:	493b      	ldr	r1, [pc, #236]	; (8002960 <dtostrf+0x118>)
  for (int i=0; i<prec; ++i)
 8002874:	f04f 0a00 	mov.w	sl, #0
  double rounding = 0.5;
 8002878:	2000      	movs	r0, #0
  for (int i=0; i<prec; ++i)
 800287a:	45ba      	cmp	sl, r7
 800287c:	db5b      	blt.n	8002936 <dtostrf+0xee>
    rounding /= 10.0;

  val += rounding;
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4640      	mov	r0, r8
 8002884:	4649      	mov	r1, r9
 8002886:	f7fd fd01 	bl	800028c <__adddf3>
 800288a:	4689      	mov	r9, r1
 800288c:	4680      	mov	r8, r0

  // Extract the integer part of the number
  unsigned long int_part = (unsigned long)val;
 800288e:	f7fe f971 	bl	8000b74 <__aeabi_d2uiz>
 8002892:	4682      	mov	sl, r0
  double remainder = val - (double)int_part;
 8002894:	f7fd fe36 	bl	8000504 <__aeabi_ui2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4640      	mov	r0, r8
 800289e:	4649      	mov	r1, r9
 80028a0:	f7fd fcf2 	bl	8000288 <__aeabi_dsub>
 80028a4:	4680      	mov	r8, r0
 80028a6:	4689      	mov	r9, r1

  if(negative)
 80028a8:	b10e      	cbz	r6, 80028ae <dtostrf+0x66>
    int_part = -int_part;
 80028aa:	f1ca 0a00 	rsb	sl, sl, #0

  // Extract digits from the remainder
  unsigned long dec_part = 0;
  double decade = 1.0;
 80028ae:	492d      	ldr	r1, [pc, #180]	; (8002964 <dtostrf+0x11c>)
  for(int i=0; i < prec; i++)
 80028b0:	2600      	movs	r6, #0
  double decade = 1.0;
 80028b2:	2000      	movs	r0, #0
  for(int i=0; i < prec; i++)
 80028b4:	42be      	cmp	r6, r7
 80028b6:	db45      	blt.n	8002944 <dtostrf+0xfc>
    decade *= 10.0;
  remainder *= decade;
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	f7fd fe98 	bl	80005f0 <__aeabi_dmul>
  dec_part = (int)remainder;
 80028c0:	f7fe f930 	bl	8000b24 <__aeabi_d2iz>
  sprintf(sout, "%ld.%ld", int_part, dec_part);

  // Handle minimum field width of the output string
  // width is signed value, negative for left adjustment.
  // Range -128,127
  char fmt[129] = "";
 80028c4:	2600      	movs	r6, #0
  sprintf(sout, "%ld.%ld", int_part, dec_part);
 80028c6:	4603      	mov	r3, r0
 80028c8:	4652      	mov	r2, sl
 80028ca:	4927      	ldr	r1, [pc, #156]	; (8002968 <dtostrf+0x120>)
 80028cc:	4628      	mov	r0, r5
 80028ce:	f000 fbdf 	bl	8003090 <siprintf>
  char fmt[129] = "";
 80028d2:	4631      	mov	r1, r6
 80028d4:	227d      	movs	r2, #125	; 0x7d
 80028d6:	a802      	add	r0, sp, #8
 80028d8:	9601      	str	r6, [sp, #4]
 80028da:	f000 fb15 	bl	8002f08 <memset>
  unsigned int w = width;
  if (width < 0) {
 80028de:	42b4      	cmp	r4, r6
    w = -width;
  } else {
    negative = 0;
  }

  if(strlen(sout) < w) {
 80028e0:	4628      	mov	r0, r5
    w = -width;
 80028e2:	bfbc      	itt	lt
 80028e4:	4264      	neglt	r4, r4
    negative = 1;
 80028e6:	2601      	movlt	r6, #1
  if(strlen(sout) < w) {
 80028e8:	f7fd fc72 	bl	80001d0 <strlen>
 80028ec:	4284      	cmp	r4, r0
 80028ee:	d933      	bls.n	8002958 <dtostrf+0x110>
    memset(fmt, ' ', 128);
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	2120      	movs	r1, #32
 80028f4:	a801      	add	r0, sp, #4
 80028f6:	f000 fb07 	bl	8002f08 <memset>
    fmt[w-strlen(sout)] = '\0';
 80028fa:	4628      	mov	r0, r5
 80028fc:	f7fd fc68 	bl	80001d0 <strlen>
 8002900:	ab22      	add	r3, sp, #136	; 0x88
 8002902:	1a24      	subs	r4, r4, r0
 8002904:	441c      	add	r4, r3
 8002906:	2300      	movs	r3, #0
 8002908:	f804 3c84 	strb.w	r3, [r4, #-132]
	if(negative == 0) {
 800290c:	bb06      	cbnz	r6, 8002950 <dtostrf+0x108>
      char *tmp = strdup(sout);
 800290e:	4628      	mov	r0, r5
 8002910:	f000 fbfa 	bl	8003108 <strdup>
      strcpy(sout,fmt);
 8002914:	a901      	add	r1, sp, #4
      char *tmp = strdup(sout);
 8002916:	4604      	mov	r4, r0
      strcpy(sout,fmt);
 8002918:	4628      	mov	r0, r5
 800291a:	f000 fbec 	bl	80030f6 <strcpy>
      strcat(sout, tmp);
 800291e:	4621      	mov	r1, r4
 8002920:	4628      	mov	r0, r5
 8002922:	f000 fbd9 	bl	80030d8 <strcat>
      free(tmp);
 8002926:	4620      	mov	r0, r4
    } else {
      // left adjustment
       strcat(sout, fmt);
    }
  }
}
 8002928:	b022      	add	sp, #136	; 0x88
 800292a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      free(tmp);
 800292e:	f000 bae3 	b.w	8002ef8 <free>
  unsigned int negative = 0;
 8002932:	4606      	mov	r6, r0
 8002934:	e79d      	b.n	8002872 <dtostrf+0x2a>
    rounding /= 10.0;
 8002936:	2200      	movs	r2, #0
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <dtostrf+0x124>)
 800293a:	f7fd ff83 	bl	8000844 <__aeabi_ddiv>
  for (int i=0; i<prec; ++i)
 800293e:	f10a 0a01 	add.w	sl, sl, #1
 8002942:	e79a      	b.n	800287a <dtostrf+0x32>
    decade *= 10.0;
 8002944:	2200      	movs	r2, #0
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <dtostrf+0x124>)
 8002948:	f7fd fe52 	bl	80005f0 <__aeabi_dmul>
  for(int i=0; i < prec; i++)
 800294c:	3601      	adds	r6, #1
 800294e:	e7b1      	b.n	80028b4 <dtostrf+0x6c>
       strcat(sout, fmt);
 8002950:	a901      	add	r1, sp, #4
 8002952:	4628      	mov	r0, r5
 8002954:	f000 fbc0 	bl	80030d8 <strcat>
}
 8002958:	b022      	add	sp, #136	; 0x88
 800295a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295e:	bf00      	nop
 8002960:	3fe00000 	.word	0x3fe00000
 8002964:	3ff00000 	.word	0x3ff00000
 8002968:	080037fd 	.word	0x080037fd
 800296c:	40240000 	.word	0x40240000

08002970 <HS_Serial_UART_Send>:
}

/* UART Function for Sending over PC Terminal */
void HS_Serial_UART_Send(char *data, int dataLen)
{
	HAL_UART_Transmit(&huart1, (uint8_t *)data, dataLen, 10);
 8002970:	b28a      	uxth	r2, r1
 8002972:	230a      	movs	r3, #10
 8002974:	4601      	mov	r1, r0
 8002976:	4801      	ldr	r0, [pc, #4]	; (800297c <HS_Serial_UART_Send+0xc>)
 8002978:	f7ff beab 	b.w	80026d2 <HAL_UART_Transmit>
 800297c:	200000e4 	.word	0x200000e4

08002980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002980:	b510      	push	{r4, lr}
 8002982:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002984:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002986:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002988:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800298a:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800298c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800298e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002990:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002992:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002994:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002996:	2220      	movs	r2, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002998:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 32;
 800299a:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800299c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800299e:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029a4:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029a6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029a8:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029aa:	f7ff f807 	bl	80019bc <HAL_RCC_OscConfig>
 80029ae:	b100      	cbz	r0, 80029b2 <SystemClock_Config+0x32>
 80029b0:	e7fe      	b.n	80029b0 <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b4:	2103      	movs	r1, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ba:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80029bc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029be:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c0:	9102      	str	r1, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80029c2:	f7ff fa59 	bl	8001e78 <HAL_RCC_ClockConfig>
 80029c6:	b100      	cbz	r0, 80029ca <SystemClock_Config+0x4a>
 80029c8:	e7fe      	b.n	80029c8 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80029ca:	2341      	movs	r3, #65	; 0x41
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029cc:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029ce:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d0:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80029d2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d4:	f7ff fb94 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 80029d8:	b100      	cbz	r0, 80029dc <SystemClock_Config+0x5c>
 80029da:	e7fe      	b.n	80029da <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029e0:	f7fe ff0e 	bl	8001800 <HAL_PWREx_ControlVoltageScaling>
 80029e4:	4604      	mov	r4, r0
 80029e6:	b100      	cbz	r0, 80029ea <SystemClock_Config+0x6a>
 80029e8:	e7fe      	b.n	80029e8 <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80029ea:	f7ff fad7 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f6:	f7fe fb37 	bl	8001068 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029fa:	2004      	movs	r0, #4
 80029fc:	f7fe fb4a 	bl	8001094 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a00:	4622      	mov	r2, r4
 8002a02:	4621      	mov	r1, r4
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f7fe fafa 	bl	8001000 <HAL_NVIC_SetPriority>
}
 8002a0c:	b02c      	add	sp, #176	; 0xb0
 8002a0e:	bd10      	pop	{r4, pc}

08002a10 <main>:
{
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t HelloMSG[] = "Hello UART";
 8002a12:	4a62      	ldr	r2, [pc, #392]	; (8002b9c <main+0x18c>)

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002a14:	4d62      	ldr	r5, [pc, #392]	; (8002ba0 <main+0x190>)
	uint8_t HelloMSG[] = "Hello UART";
 8002a16:	6851      	ldr	r1, [r2, #4]
 8002a18:	6810      	ldr	r0, [r2, #0]
{
 8002a1a:	b095      	sub	sp, #84	; 0x54
	uint8_t HelloMSG[] = "Hello UART";
 8002a1c:	ab04      	add	r3, sp, #16
 8002a1e:	c303      	stmia	r3!, {r0, r1}
 8002a20:	8911      	ldrh	r1, [r2, #8]
 8002a22:	7a92      	ldrb	r2, [r2, #10]
 8002a24:	8019      	strh	r1, [r3, #0]
 8002a26:	709a      	strb	r2, [r3, #2]
	float tempC = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9300      	str	r3, [sp, #0]
	float rHum = 0;
 8002a2c:	9301      	str	r3, [sp, #4]
  HAL_Init();
 8002a2e:	f7fe faad 	bl	8000f8c <HAL_Init>
  SystemClock_Config();
 8002a32:	f7ff ffa5 	bl	8002980 <SystemClock_Config>

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <main+0x194>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a38:	485b      	ldr	r0, [pc, #364]	; (8002ba8 <main+0x198>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a44:	f002 0201 	and.w	r2, r2, #1
 8002a48:	9202      	str	r2, [sp, #8]
 8002a4a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a4e:	f042 0202 	orr.w	r2, r2, #2
 8002a52:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a5e:	2108      	movs	r1, #8

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a66:	f7fe fbdb 	bl	8001220 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a6a:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	484e      	ldr	r0, [pc, #312]	; (8002ba8 <main+0x198>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a6e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a78:	f7fe fb1e 	bl	80010b8 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <main+0x19c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7e:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 8002a80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a84:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a88:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a8a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a8c:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8e:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a90:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a94:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a96:	622c      	str	r4, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a98:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a9a:	f7ff fea3 	bl	80027e4 <HAL_UART_Init>
 8002a9e:	b100      	cbz	r0, 8002aa2 <main+0x92>
 8002aa0:	e7fe      	b.n	8002aa0 <main+0x90>
  hi2c1.Instance = I2C1;
 8002aa2:	4c43      	ldr	r4, [pc, #268]	; (8002bb0 <main+0x1a0>)
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <main+0x1a4>)
 8002aa6:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002aa8:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 8002aac:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8002ab0:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
  hi2c1.Init.OwnAddress1 = 0;
 8002ab4:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab6:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab8:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002aba:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002abc:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002abe:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac0:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10707DBC;
 8002ac2:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ac4:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac6:	f7fe fccf 	bl	8001468 <HAL_I2C_Init>
 8002aca:	4601      	mov	r1, r0
 8002acc:	b100      	cbz	r0, 8002ad0 <main+0xc0>
 8002ace:	e7fe      	b.n	8002ace <main+0xbe>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7fe fe41 	bl	8001758 <HAL_I2CEx_ConfigAnalogFilter>
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	b100      	cbz	r0, 8002adc <main+0xcc>
 8002ada:	e7fe      	b.n	8002ada <main+0xca>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7fe fe61 	bl	80017a4 <HAL_I2CEx_ConfigDigitalFilter>
 8002ae2:	4606      	mov	r6, r0
 8002ae4:	b100      	cbz	r0, 8002ae8 <main+0xd8>
 8002ae6:	e7fe      	b.n	8002ae6 <main+0xd6>
  SHTx_Init(0x45);
 8002ae8:	2045      	movs	r0, #69	; 0x45
 8002aea:	f000 f935 	bl	8002d58 <SHTx_Init>
   HAL_UART_Transmit(&huart1, HelloMSG, sizeof(HelloMSG), 10);
 8002aee:	230a      	movs	r3, #10
 8002af0:	220b      	movs	r2, #11
 8002af2:	a904      	add	r1, sp, #16
 8002af4:	4628      	mov	r0, r5
 8002af6:	f7ff fdec 	bl	80026d2 <HAL_UART_Transmit>
   memset(outBuff, 0, sizeof(outBuff));
 8002afa:	2232      	movs	r2, #50	; 0x32
 8002afc:	4631      	mov	r1, r6
 8002afe:	a807      	add	r0, sp, #28
 8002b00:	f000 fa02 	bl	8002f08 <memset>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8002b04:	4f28      	ldr	r7, [pc, #160]	; (8002ba8 <main+0x198>)
	int count = 0;
 8002b06:	4632      	mov	r2, r6
	 sprintf(outBuff, "\r\nCount: %d", count++);
 8002b08:	4e2b      	ldr	r6, [pc, #172]	; (8002bb8 <main+0x1a8>)
 8002b0a:	4631      	mov	r1, r6
 8002b0c:	a807      	add	r0, sp, #28
 8002b0e:	1c55      	adds	r5, r2, #1
 8002b10:	f000 fabe 	bl	8003090 <siprintf>
	 HS_Serial_UART_Send(outBuff, strlen(outBuff));
 8002b14:	a807      	add	r0, sp, #28
 8002b16:	f7fd fb5b 	bl	80001d0 <strlen>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	a807      	add	r0, sp, #28
 8002b1e:	f7ff ff27 	bl	8002970 <HS_Serial_UART_Send>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8002b22:	2108      	movs	r1, #8
 8002b24:	4638      	mov	r0, r7
 8002b26:	f7fe fb80 	bl	800122a <HAL_GPIO_TogglePin>
	 HAL_Delay(1000);
 8002b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b2e:	f7fe fa47 	bl	8000fc0 <HAL_Delay>
	 if(SHTx_Read(&hi2c1, &tempC, &rHum))
 8002b32:	aa01      	add	r2, sp, #4
 8002b34:	4669      	mov	r1, sp
 8002b36:	4620      	mov	r0, r4
 8002b38:	f000 f916 	bl	8002d68 <SHTx_Read>
 8002b3c:	b358      	cbz	r0, 8002b96 <main+0x186>
		 dtostrf(tempC, 4, 2, outBuff);
 8002b3e:	9800      	ldr	r0, [sp, #0]
 8002b40:	f7fd fd02 	bl	8000548 <__aeabi_f2d>
 8002b44:	aa07      	add	r2, sp, #28
 8002b46:	ec41 0b10 	vmov	d0, r0, r1
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	2004      	movs	r0, #4
 8002b4e:	f7ff fe7b 	bl	8002848 <dtostrf>
		 HS_Serial_UART_Send(", Temp:", strlen(", Temp:"));
 8002b52:	2107      	movs	r1, #7
 8002b54:	4819      	ldr	r0, [pc, #100]	; (8002bbc <main+0x1ac>)
 8002b56:	f7ff ff0b 	bl	8002970 <HS_Serial_UART_Send>
		 HS_Serial_UART_Send(outBuff, strlen(outBuff));
 8002b5a:	a807      	add	r0, sp, #28
 8002b5c:	f7fd fb38 	bl	80001d0 <strlen>
 8002b60:	4601      	mov	r1, r0
 8002b62:	a807      	add	r0, sp, #28
 8002b64:	f7ff ff04 	bl	8002970 <HS_Serial_UART_Send>
		 dtostrf(rHum, 4, 2, outBuff);
 8002b68:	9801      	ldr	r0, [sp, #4]
 8002b6a:	f7fd fced 	bl	8000548 <__aeabi_f2d>
 8002b6e:	aa07      	add	r2, sp, #28
 8002b70:	ec41 0b10 	vmov	d0, r0, r1
 8002b74:	2102      	movs	r1, #2
 8002b76:	2004      	movs	r0, #4
 8002b78:	f7ff fe66 	bl	8002848 <dtostrf>
		 HS_Serial_UART_Send(", RH:", strlen(", RH:"));
 8002b7c:	2105      	movs	r1, #5
 8002b7e:	4810      	ldr	r0, [pc, #64]	; (8002bc0 <main+0x1b0>)
 8002b80:	f7ff fef6 	bl	8002970 <HS_Serial_UART_Send>
		 HS_Serial_UART_Send(outBuff, strlen(outBuff));
 8002b84:	a807      	add	r0, sp, #28
 8002b86:	f7fd fb23 	bl	80001d0 <strlen>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	a807      	add	r0, sp, #28
		 HS_Serial_UART_Send(", SHTx failed\r\n", strlen(", SHTx failed\r\n"));
 8002b8e:	f7ff feef 	bl	8002970 <HS_Serial_UART_Send>
{
 8002b92:	462a      	mov	r2, r5
 8002b94:	e7b9      	b.n	8002b0a <main+0xfa>
		 HS_Serial_UART_Send(", SHTx failed\r\n", strlen(", SHTx failed\r\n"));
 8002b96:	210f      	movs	r1, #15
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <main+0x1b4>)
 8002b9a:	e7f8      	b.n	8002b8e <main+0x17e>
 8002b9c:	0800382f 	.word	0x0800382f
 8002ba0:	200000e4 	.word	0x200000e4
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	20000098 	.word	0x20000098
 8002bb4:	40005400 	.word	0x40005400
 8002bb8:	08003805 	.word	0x08003805
 8002bbc:	08003811 	.word	0x08003811
 8002bc0:	08003819 	.word	0x08003819
 8002bc4:	0800381f 	.word	0x0800381f

08002bc8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_MspInit+0x88>)
{
 8002bca:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	661a      	str	r2, [r3, #96]	; 0x60
 8002bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bd6:	f002 0201 	and.w	r2, r2, #1
 8002bda:	9200      	str	r2, [sp, #0]
 8002bdc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002be0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002be4:	659a      	str	r2, [r3, #88]	; 0x58
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bee:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf2:	f7fe f9f3 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	f06f 000b 	mvn.w	r0, #11
 8002bfe:	f7fe f9ff 	bl	8001000 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	4611      	mov	r1, r2
 8002c06:	f06f 000a 	mvn.w	r0, #10
 8002c0a:	f7fe f9f9 	bl	8001000 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4611      	mov	r1, r2
 8002c12:	f06f 0009 	mvn.w	r0, #9
 8002c16:	f7fe f9f3 	bl	8001000 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	f06f 0004 	mvn.w	r0, #4
 8002c22:	f7fe f9ed 	bl	8001000 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	4611      	mov	r1, r2
 8002c2a:	f06f 0003 	mvn.w	r0, #3
 8002c2e:	f7fe f9e7 	bl	8001000 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	4611      	mov	r1, r2
 8002c36:	f06f 0001 	mvn.w	r0, #1
 8002c3a:	f7fe f9e1 	bl	8001000 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4611      	mov	r1, r2
 8002c42:	f04f 30ff 	mov.w	r0, #4294967295
 8002c46:	f7fe f9db 	bl	8001000 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4a:	b003      	add	sp, #12
 8002c4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002c56:	6802      	ldr	r2, [r0, #0]
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_I2C_MspInit+0x44>)
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d118      	bne.n	8002c90 <HAL_I2C_MspInit+0x3c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c5e:	23c0      	movs	r3, #192	; 0xc0
 8002c60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c62:	2312      	movs	r3, #18
 8002c64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c6e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c70:	eb0d 0103 	add.w	r1, sp, r3
 8002c74:	4809      	ldr	r0, [pc, #36]	; (8002c9c <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c76:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	f7fe fa1e 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_I2C_MspInit+0x4c>)
 8002c7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c80:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c84:	659a      	str	r2, [r3, #88]	; 0x58
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c90:	b007      	add	sp, #28
 8002c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c96:	bf00      	nop
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_UART_MspInit+0x48>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d11a      	bne.n	8002ce4 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cdc:	2307      	movs	r3, #7
 8002cde:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	f7fe f9ea 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ce4:	b007      	add	sp, #28
 8002ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cea:	bf00      	nop
 8002cec:	40013800 	.word	0x40013800

08002cf0 <NMI_Handler>:
 8002cf0:	4770      	bx	lr

08002cf2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002cf2:	e7fe      	b.n	8002cf2 <HardFault_Handler>

08002cf4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler>

08002cf6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler>

08002cf8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler>

08002cfa <SVC_Handler>:
 8002cfa:	4770      	bx	lr

08002cfc <DebugMon_Handler>:
 8002cfc:	4770      	bx	lr

08002cfe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002cfe:	4770      	bx	lr

08002d00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d02:	f7fe f94f 	bl	8000fa4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002d0a:	f7fe b9d0 	b.w	80010ae <HAL_SYSTICK_IRQHandler>
	...

08002d10 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d10:	490f      	ldr	r1, [pc, #60]	; (8002d50 <SystemInit+0x40>)
 8002d12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <SystemInit+0x44>)
 8002d20:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d22:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002d2a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002d32:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002d36:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d44:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d46:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d4c:	608b      	str	r3, [r1, #8]
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00
 8002d54:	40021000 	.word	0x40021000

08002d58 <SHTx_Init>:
void SHTx_Init(uint8_t addr)
{
  /* Initialize I2Cx if not done in main() */

  /* Asssign the addres of SHTx module */
  _address = addr;
 8002d58:	4b01      	ldr	r3, [pc, #4]	; (8002d60 <SHTx_Init+0x8>)
 8002d5a:	7018      	strb	r0, [r3, #0]
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000015c 	.word	0x2000015c
 8002d64:	00000000 	.word	0x00000000

08002d68 <SHTx_Read>:

/*
 * Read Temperature and Humidity, return 1 if success, return 0 if fails
 */
uint8_t SHTx_Read(I2C_HandleTypeDef *hi2c, float *temperature, float *humidity)
{
 8002d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t  buffer[6];
	float cTemp, rH;
	//long wait_counter = 0;

	if(HAL_I2C_Master_Transmit(hi2c, (_address<<1), CMD_MEASURE_HPM, 2, 100)  != HAL_OK)
 8002d6c:	4d36      	ldr	r5, [pc, #216]	; (8002e48 <SHTx_Read+0xe0>)
{
 8002d6e:	b085      	sub	sp, #20
 8002d70:	460f      	mov	r7, r1
	if(HAL_I2C_Master_Transmit(hi2c, (_address<<1), CMD_MEASURE_HPM, 2, 100)  != HAL_OK)
 8002d72:	7829      	ldrb	r1, [r5, #0]
 8002d74:	2464      	movs	r4, #100	; 0x64
{
 8002d76:	4616      	mov	r6, r2
	if(HAL_I2C_Master_Transmit(hi2c, (_address<<1), CMD_MEASURE_HPM, 2, 100)  != HAL_OK)
 8002d78:	9400      	str	r4, [sp, #0]
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <SHTx_Read+0xe4>)
 8002d7e:	0049      	lsls	r1, r1, #1
{
 8002d80:	4680      	mov	r8, r0
	if(HAL_I2C_Master_Transmit(hi2c, (_address<<1), CMD_MEASURE_HPM, 2, 100)  != HAL_OK)
 8002d82:	f7fe fbc1 	bl	8001508 <HAL_I2C_Master_Transmit>
 8002d86:	b118      	cbz	r0, 8002d90 <SHTx_Read+0x28>
	{
		return SHTx_ERROR;
 8002d88:	2000      	movs	r0, #0
	*temperature = cTemp;
	*humidity    = rH;

	return (uint8_t) SHTx_OK;

}
 8002d8a:	b005      	add	sp, #20
 8002d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(HAL_I2C_Master_Receive(hi2c, (_address<<1), buffer, 6, 100) != HAL_OK) {
 8002d90:	7829      	ldrb	r1, [r5, #0]
 8002d92:	9400      	str	r4, [sp, #0]
 8002d94:	2306      	movs	r3, #6
 8002d96:	aa02      	add	r2, sp, #8
 8002d98:	0049      	lsls	r1, r1, #1
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	f7fe fc48 	bl	8001630 <HAL_I2C_Master_Receive>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d1f1      	bne.n	8002d88 <SHTx_Read+0x20>
	rH = ((((buffer[3] * 256.0) + buffer[4]) * 100) / 65535.0);
 8002da4:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8002da8:	f7fd fbbc 	bl	8000524 <__aeabi_i2d>
 8002dac:	2200      	movs	r2, #0
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <SHTx_Read+0xe8>)
 8002db0:	f7fd fc1e 	bl	80005f0 <__aeabi_dmul>
 8002db4:	4604      	mov	r4, r0
 8002db6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002dba:	460d      	mov	r5, r1
 8002dbc:	f7fd fbb2 	bl	8000524 <__aeabi_i2d>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fa60 	bl	800028c <__adddf3>
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <SHTx_Read+0xec>)
 8002dd0:	f7fd fc0e 	bl	80005f0 <__aeabi_dmul>
 8002dd4:	a318      	add	r3, pc, #96	; (adr r3, 8002e38 <SHTx_Read+0xd0>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fd33 	bl	8000844 <__aeabi_ddiv>
 8002dde:	f7fd fee9 	bl	8000bb4 <__aeabi_d2f>
 8002de2:	4604      	mov	r4, r0
	cTemp = ((((buffer[0] * 256.0) + buffer[1]) * 175) / 65535.0) - 45;
 8002de4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002de8:	f7fd fb9c 	bl	8000524 <__aeabi_i2d>
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <SHTx_Read+0xe8>)
 8002df0:	f7fd fbfe 	bl	80005f0 <__aeabi_dmul>
 8002df4:	4680      	mov	r8, r0
 8002df6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002dfa:	4689      	mov	r9, r1
 8002dfc:	f7fd fb92 	bl	8000524 <__aeabi_i2d>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4640      	mov	r0, r8
 8002e06:	4649      	mov	r1, r9
 8002e08:	f7fd fa40 	bl	800028c <__adddf3>
 8002e0c:	a30c      	add	r3, pc, #48	; (adr r3, 8002e40 <SHTx_Read+0xd8>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd fbed 	bl	80005f0 <__aeabi_dmul>
 8002e16:	a308      	add	r3, pc, #32	; (adr r3, 8002e38 <SHTx_Read+0xd0>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fd12 	bl	8000844 <__aeabi_ddiv>
 8002e20:	2200      	movs	r2, #0
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <SHTx_Read+0xf0>)
 8002e24:	f7fd fa30 	bl	8000288 <__aeabi_dsub>
 8002e28:	f7fd fec4 	bl	8000bb4 <__aeabi_d2f>
 8002e2c:	6038      	str	r0, [r7, #0]
	*humidity    = rH;
 8002e2e:	6034      	str	r4, [r6, #0]
	return (uint8_t) SHTx_OK;
 8002e30:	2001      	movs	r0, #1
 8002e32:	e7aa      	b.n	8002d8a <SHTx_Read+0x22>
 8002e34:	f3af 8000 	nop.w
 8002e38:	00000000 	.word	0x00000000
 8002e3c:	40efffe0 	.word	0x40efffe0
 8002e40:	00000000 	.word	0x00000000
 8002e44:	4065e000 	.word	0x4065e000
 8002e48:	2000015c 	.word	0x2000015c
 8002e4c:	20000004 	.word	0x20000004
 8002e50:	40700000 	.word	0x40700000
 8002e54:	40590000 	.word	0x40590000
 8002e58:	40468000 	.word	0x40468000

08002e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e62:	e003      	b.n	8002e6c <LoopCopyDataInit>

08002e64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e6a:	3104      	adds	r1, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e6c:	480b      	ldr	r0, [pc, #44]	; (8002e9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e74:	d3f6      	bcc.n	8002e64 <CopyDataInit>
	ldr	r2, =_sbss
 8002e76:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002e78:	e002      	b.n	8002e80 <LoopFillZerobss>

08002e7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e7c:	f842 3b04 	str.w	r3, [r2], #4

08002e80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <LoopForever+0x16>)
	cmp	r2, r3
 8002e82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e84:	d3f9      	bcc.n	8002e7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e86:	f7ff ff43 	bl	8002d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f000 f811 	bl	8002eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e8e:	f7ff fdbf 	bl	8002a10 <main>

08002e92 <LoopForever>:

LoopForever:
    b LoopForever
 8002e92:	e7fe      	b.n	8002e92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e94:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002e98:	080038c8 	.word	0x080038c8
	ldr	r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ea0:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8002ea4:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8002ea8:	20000164 	.word	0x20000164

08002eac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC1_IRQHandler>
	...

08002eb0 <__libc_init_array>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4e0d      	ldr	r6, [pc, #52]	; (8002ee8 <__libc_init_array+0x38>)
 8002eb4:	4c0d      	ldr	r4, [pc, #52]	; (8002eec <__libc_init_array+0x3c>)
 8002eb6:	1ba4      	subs	r4, r4, r6
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	2500      	movs	r5, #0
 8002ebc:	42a5      	cmp	r5, r4
 8002ebe:	d109      	bne.n	8002ed4 <__libc_init_array+0x24>
 8002ec0:	4e0b      	ldr	r6, [pc, #44]	; (8002ef0 <__libc_init_array+0x40>)
 8002ec2:	4c0c      	ldr	r4, [pc, #48]	; (8002ef4 <__libc_init_array+0x44>)
 8002ec4:	f000 fc86 	bl	80037d4 <_init>
 8002ec8:	1ba4      	subs	r4, r4, r6
 8002eca:	10a4      	asrs	r4, r4, #2
 8002ecc:	2500      	movs	r5, #0
 8002ece:	42a5      	cmp	r5, r4
 8002ed0:	d105      	bne.n	8002ede <__libc_init_array+0x2e>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed8:	4798      	blx	r3
 8002eda:	3501      	adds	r5, #1
 8002edc:	e7ee      	b.n	8002ebc <__libc_init_array+0xc>
 8002ede:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ee2:	4798      	blx	r3
 8002ee4:	3501      	adds	r5, #1
 8002ee6:	e7f2      	b.n	8002ece <__libc_init_array+0x1e>
 8002ee8:	080038c0 	.word	0x080038c0
 8002eec:	080038c0 	.word	0x080038c0
 8002ef0:	080038c0 	.word	0x080038c0
 8002ef4:	080038c4 	.word	0x080038c4

08002ef8 <free>:
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <free+0xc>)
 8002efa:	4601      	mov	r1, r0
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	f000 b80b 	b.w	8002f18 <_free_r>
 8002f02:	bf00      	nop
 8002f04:	20000008 	.word	0x20000008

08002f08 <memset>:
 8002f08:	4402      	add	r2, r0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d100      	bne.n	8002f12 <memset+0xa>
 8002f10:	4770      	bx	lr
 8002f12:	f803 1b01 	strb.w	r1, [r3], #1
 8002f16:	e7f9      	b.n	8002f0c <memset+0x4>

08002f18 <_free_r>:
 8002f18:	b538      	push	{r3, r4, r5, lr}
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	d045      	beq.n	8002fac <_free_r+0x94>
 8002f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f24:	1f0c      	subs	r4, r1, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bfb8      	it	lt
 8002f2a:	18e4      	addlt	r4, r4, r3
 8002f2c:	f000 f912 	bl	8003154 <__malloc_lock>
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <_free_r+0x98>)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	4610      	mov	r0, r2
 8002f36:	b933      	cbnz	r3, 8002f46 <_free_r+0x2e>
 8002f38:	6063      	str	r3, [r4, #4]
 8002f3a:	6014      	str	r4, [r2, #0]
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f42:	f000 b908 	b.w	8003156 <__malloc_unlock>
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	d90c      	bls.n	8002f64 <_free_r+0x4c>
 8002f4a:	6821      	ldr	r1, [r4, #0]
 8002f4c:	1862      	adds	r2, r4, r1
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	bf04      	itt	eq
 8002f52:	681a      	ldreq	r2, [r3, #0]
 8002f54:	685b      	ldreq	r3, [r3, #4]
 8002f56:	6063      	str	r3, [r4, #4]
 8002f58:	bf04      	itt	eq
 8002f5a:	1852      	addeq	r2, r2, r1
 8002f5c:	6022      	streq	r2, [r4, #0]
 8002f5e:	6004      	str	r4, [r0, #0]
 8002f60:	e7ec      	b.n	8002f3c <_free_r+0x24>
 8002f62:	4613      	mov	r3, r2
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	b10a      	cbz	r2, 8002f6c <_free_r+0x54>
 8002f68:	42a2      	cmp	r2, r4
 8002f6a:	d9fa      	bls.n	8002f62 <_free_r+0x4a>
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	1858      	adds	r0, r3, r1
 8002f70:	42a0      	cmp	r0, r4
 8002f72:	d10b      	bne.n	8002f8c <_free_r+0x74>
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	4401      	add	r1, r0
 8002f78:	1858      	adds	r0, r3, r1
 8002f7a:	4282      	cmp	r2, r0
 8002f7c:	6019      	str	r1, [r3, #0]
 8002f7e:	d1dd      	bne.n	8002f3c <_free_r+0x24>
 8002f80:	6810      	ldr	r0, [r2, #0]
 8002f82:	6852      	ldr	r2, [r2, #4]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	4401      	add	r1, r0
 8002f88:	6019      	str	r1, [r3, #0]
 8002f8a:	e7d7      	b.n	8002f3c <_free_r+0x24>
 8002f8c:	d902      	bls.n	8002f94 <_free_r+0x7c>
 8002f8e:	230c      	movs	r3, #12
 8002f90:	602b      	str	r3, [r5, #0]
 8002f92:	e7d3      	b.n	8002f3c <_free_r+0x24>
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	1821      	adds	r1, r4, r0
 8002f98:	428a      	cmp	r2, r1
 8002f9a:	bf04      	itt	eq
 8002f9c:	6811      	ldreq	r1, [r2, #0]
 8002f9e:	6852      	ldreq	r2, [r2, #4]
 8002fa0:	6062      	str	r2, [r4, #4]
 8002fa2:	bf04      	itt	eq
 8002fa4:	1809      	addeq	r1, r1, r0
 8002fa6:	6021      	streq	r1, [r4, #0]
 8002fa8:	605c      	str	r4, [r3, #4]
 8002faa:	e7c7      	b.n	8002f3c <_free_r+0x24>
 8002fac:	bd38      	pop	{r3, r4, r5, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000088 	.word	0x20000088

08002fb4 <_malloc_r>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	1ccd      	adds	r5, r1, #3
 8002fb8:	f025 0503 	bic.w	r5, r5, #3
 8002fbc:	3508      	adds	r5, #8
 8002fbe:	2d0c      	cmp	r5, #12
 8002fc0:	bf38      	it	cc
 8002fc2:	250c      	movcc	r5, #12
 8002fc4:	2d00      	cmp	r5, #0
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	db01      	blt.n	8002fce <_malloc_r+0x1a>
 8002fca:	42a9      	cmp	r1, r5
 8002fcc:	d903      	bls.n	8002fd6 <_malloc_r+0x22>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	6033      	str	r3, [r6, #0]
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	bd70      	pop	{r4, r5, r6, pc}
 8002fd6:	f000 f8bd 	bl	8003154 <__malloc_lock>
 8002fda:	4a23      	ldr	r2, [pc, #140]	; (8003068 <_malloc_r+0xb4>)
 8002fdc:	6814      	ldr	r4, [r2, #0]
 8002fde:	4621      	mov	r1, r4
 8002fe0:	b991      	cbnz	r1, 8003008 <_malloc_r+0x54>
 8002fe2:	4c22      	ldr	r4, [pc, #136]	; (800306c <_malloc_r+0xb8>)
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	b91b      	cbnz	r3, 8002ff0 <_malloc_r+0x3c>
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f000 f841 	bl	8003070 <_sbrk_r>
 8002fee:	6020      	str	r0, [r4, #0]
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f000 f83c 	bl	8003070 <_sbrk_r>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d126      	bne.n	800304a <_malloc_r+0x96>
 8002ffc:	230c      	movs	r3, #12
 8002ffe:	6033      	str	r3, [r6, #0]
 8003000:	4630      	mov	r0, r6
 8003002:	f000 f8a8 	bl	8003156 <__malloc_unlock>
 8003006:	e7e4      	b.n	8002fd2 <_malloc_r+0x1e>
 8003008:	680b      	ldr	r3, [r1, #0]
 800300a:	1b5b      	subs	r3, r3, r5
 800300c:	d41a      	bmi.n	8003044 <_malloc_r+0x90>
 800300e:	2b0b      	cmp	r3, #11
 8003010:	d90f      	bls.n	8003032 <_malloc_r+0x7e>
 8003012:	600b      	str	r3, [r1, #0]
 8003014:	50cd      	str	r5, [r1, r3]
 8003016:	18cc      	adds	r4, r1, r3
 8003018:	4630      	mov	r0, r6
 800301a:	f000 f89c 	bl	8003156 <__malloc_unlock>
 800301e:	f104 000b 	add.w	r0, r4, #11
 8003022:	1d23      	adds	r3, r4, #4
 8003024:	f020 0007 	bic.w	r0, r0, #7
 8003028:	1ac3      	subs	r3, r0, r3
 800302a:	d01b      	beq.n	8003064 <_malloc_r+0xb0>
 800302c:	425a      	negs	r2, r3
 800302e:	50e2      	str	r2, [r4, r3]
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	428c      	cmp	r4, r1
 8003034:	bf0d      	iteet	eq
 8003036:	6863      	ldreq	r3, [r4, #4]
 8003038:	684b      	ldrne	r3, [r1, #4]
 800303a:	6063      	strne	r3, [r4, #4]
 800303c:	6013      	streq	r3, [r2, #0]
 800303e:	bf18      	it	ne
 8003040:	460c      	movne	r4, r1
 8003042:	e7e9      	b.n	8003018 <_malloc_r+0x64>
 8003044:	460c      	mov	r4, r1
 8003046:	6849      	ldr	r1, [r1, #4]
 8003048:	e7ca      	b.n	8002fe0 <_malloc_r+0x2c>
 800304a:	1cc4      	adds	r4, r0, #3
 800304c:	f024 0403 	bic.w	r4, r4, #3
 8003050:	42a0      	cmp	r0, r4
 8003052:	d005      	beq.n	8003060 <_malloc_r+0xac>
 8003054:	1a21      	subs	r1, r4, r0
 8003056:	4630      	mov	r0, r6
 8003058:	f000 f80a 	bl	8003070 <_sbrk_r>
 800305c:	3001      	adds	r0, #1
 800305e:	d0cd      	beq.n	8002ffc <_malloc_r+0x48>
 8003060:	6025      	str	r5, [r4, #0]
 8003062:	e7d9      	b.n	8003018 <_malloc_r+0x64>
 8003064:	bd70      	pop	{r4, r5, r6, pc}
 8003066:	bf00      	nop
 8003068:	20000088 	.word	0x20000088
 800306c:	2000008c 	.word	0x2000008c

08003070 <_sbrk_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	4c06      	ldr	r4, [pc, #24]	; (800308c <_sbrk_r+0x1c>)
 8003074:	2300      	movs	r3, #0
 8003076:	4605      	mov	r5, r0
 8003078:	4608      	mov	r0, r1
 800307a:	6023      	str	r3, [r4, #0]
 800307c:	f000 fb9c 	bl	80037b8 <_sbrk>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d102      	bne.n	800308a <_sbrk_r+0x1a>
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	b103      	cbz	r3, 800308a <_sbrk_r+0x1a>
 8003088:	602b      	str	r3, [r5, #0]
 800308a:	bd38      	pop	{r3, r4, r5, pc}
 800308c:	20000160 	.word	0x20000160

08003090 <siprintf>:
 8003090:	b40e      	push	{r1, r2, r3}
 8003092:	b500      	push	{lr}
 8003094:	b09c      	sub	sp, #112	; 0x70
 8003096:	f44f 7102 	mov.w	r1, #520	; 0x208
 800309a:	ab1d      	add	r3, sp, #116	; 0x74
 800309c:	f8ad 1014 	strh.w	r1, [sp, #20]
 80030a0:	9002      	str	r0, [sp, #8]
 80030a2:	9006      	str	r0, [sp, #24]
 80030a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030a8:	480a      	ldr	r0, [pc, #40]	; (80030d4 <siprintf+0x44>)
 80030aa:	9104      	str	r1, [sp, #16]
 80030ac:	9107      	str	r1, [sp, #28]
 80030ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80030b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	a902      	add	r1, sp, #8
 80030c0:	f000 f8a6 	bl	8003210 <_svfiprintf_r>
 80030c4:	9b02      	ldr	r3, [sp, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	b01c      	add	sp, #112	; 0x70
 80030cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80030d0:	b003      	add	sp, #12
 80030d2:	4770      	bx	lr
 80030d4:	20000008 	.word	0x20000008

080030d8 <strcat>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	4602      	mov	r2, r0
 80030dc:	4613      	mov	r3, r2
 80030de:	3201      	adds	r2, #1
 80030e0:	781c      	ldrb	r4, [r3, #0]
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	d1fa      	bne.n	80030dc <strcat+0x4>
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030f0:	2a00      	cmp	r2, #0
 80030f2:	d1f9      	bne.n	80030e8 <strcat+0x10>
 80030f4:	bd10      	pop	{r4, pc}

080030f6 <strcpy>:
 80030f6:	4603      	mov	r3, r0
 80030f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030fc:	f803 2b01 	strb.w	r2, [r3], #1
 8003100:	2a00      	cmp	r2, #0
 8003102:	d1f9      	bne.n	80030f8 <strcpy+0x2>
 8003104:	4770      	bx	lr
	...

08003108 <strdup>:
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <strdup+0xc>)
 800310a:	4601      	mov	r1, r0
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	f000 b803 	b.w	8003118 <_strdup_r>
 8003112:	bf00      	nop
 8003114:	20000008 	.word	0x20000008

08003118 <_strdup_r>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	4606      	mov	r6, r0
 800311c:	4608      	mov	r0, r1
 800311e:	460c      	mov	r4, r1
 8003120:	f7fd f856 	bl	80001d0 <strlen>
 8003124:	1c45      	adds	r5, r0, #1
 8003126:	4629      	mov	r1, r5
 8003128:	4630      	mov	r0, r6
 800312a:	f7ff ff43 	bl	8002fb4 <_malloc_r>
 800312e:	4606      	mov	r6, r0
 8003130:	b118      	cbz	r0, 800313a <_strdup_r+0x22>
 8003132:	462a      	mov	r2, r5
 8003134:	4621      	mov	r1, r4
 8003136:	f000 f802 	bl	800313e <memcpy>
 800313a:	4630      	mov	r0, r6
 800313c:	bd70      	pop	{r4, r5, r6, pc}

0800313e <memcpy>:
 800313e:	b510      	push	{r4, lr}
 8003140:	1e43      	subs	r3, r0, #1
 8003142:	440a      	add	r2, r1
 8003144:	4291      	cmp	r1, r2
 8003146:	d100      	bne.n	800314a <memcpy+0xc>
 8003148:	bd10      	pop	{r4, pc}
 800314a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800314e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003152:	e7f7      	b.n	8003144 <memcpy+0x6>

08003154 <__malloc_lock>:
 8003154:	4770      	bx	lr

08003156 <__malloc_unlock>:
 8003156:	4770      	bx	lr

08003158 <__ssputs_r>:
 8003158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800315c:	688e      	ldr	r6, [r1, #8]
 800315e:	429e      	cmp	r6, r3
 8003160:	4682      	mov	sl, r0
 8003162:	460c      	mov	r4, r1
 8003164:	4691      	mov	r9, r2
 8003166:	4698      	mov	r8, r3
 8003168:	d835      	bhi.n	80031d6 <__ssputs_r+0x7e>
 800316a:	898a      	ldrh	r2, [r1, #12]
 800316c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003170:	d031      	beq.n	80031d6 <__ssputs_r+0x7e>
 8003172:	6825      	ldr	r5, [r4, #0]
 8003174:	6909      	ldr	r1, [r1, #16]
 8003176:	1a6f      	subs	r7, r5, r1
 8003178:	6965      	ldr	r5, [r4, #20]
 800317a:	2302      	movs	r3, #2
 800317c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003180:	fb95 f5f3 	sdiv	r5, r5, r3
 8003184:	f108 0301 	add.w	r3, r8, #1
 8003188:	443b      	add	r3, r7
 800318a:	429d      	cmp	r5, r3
 800318c:	bf38      	it	cc
 800318e:	461d      	movcc	r5, r3
 8003190:	0553      	lsls	r3, r2, #21
 8003192:	d531      	bpl.n	80031f8 <__ssputs_r+0xa0>
 8003194:	4629      	mov	r1, r5
 8003196:	f7ff ff0d 	bl	8002fb4 <_malloc_r>
 800319a:	4606      	mov	r6, r0
 800319c:	b950      	cbnz	r0, 80031b4 <__ssputs_r+0x5c>
 800319e:	230c      	movs	r3, #12
 80031a0:	f8ca 3000 	str.w	r3, [sl]
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031aa:	81a3      	strh	r3, [r4, #12]
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295
 80031b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b4:	463a      	mov	r2, r7
 80031b6:	6921      	ldr	r1, [r4, #16]
 80031b8:	f7ff ffc1 	bl	800313e <memcpy>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	6126      	str	r6, [r4, #16]
 80031ca:	6165      	str	r5, [r4, #20]
 80031cc:	443e      	add	r6, r7
 80031ce:	1bed      	subs	r5, r5, r7
 80031d0:	6026      	str	r6, [r4, #0]
 80031d2:	60a5      	str	r5, [r4, #8]
 80031d4:	4646      	mov	r6, r8
 80031d6:	4546      	cmp	r6, r8
 80031d8:	bf28      	it	cs
 80031da:	4646      	movcs	r6, r8
 80031dc:	4632      	mov	r2, r6
 80031de:	4649      	mov	r1, r9
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	f000 fa9f 	bl	8003724 <memmove>
 80031e6:	68a3      	ldr	r3, [r4, #8]
 80031e8:	1b9b      	subs	r3, r3, r6
 80031ea:	60a3      	str	r3, [r4, #8]
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	441e      	add	r6, r3
 80031f0:	6026      	str	r6, [r4, #0]
 80031f2:	2000      	movs	r0, #0
 80031f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f8:	462a      	mov	r2, r5
 80031fa:	f000 faad 	bl	8003758 <_realloc_r>
 80031fe:	4606      	mov	r6, r0
 8003200:	2800      	cmp	r0, #0
 8003202:	d1e1      	bne.n	80031c8 <__ssputs_r+0x70>
 8003204:	6921      	ldr	r1, [r4, #16]
 8003206:	4650      	mov	r0, sl
 8003208:	f7ff fe86 	bl	8002f18 <_free_r>
 800320c:	e7c7      	b.n	800319e <__ssputs_r+0x46>
	...

08003210 <_svfiprintf_r>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	b09d      	sub	sp, #116	; 0x74
 8003216:	4680      	mov	r8, r0
 8003218:	9303      	str	r3, [sp, #12]
 800321a:	898b      	ldrh	r3, [r1, #12]
 800321c:	061c      	lsls	r4, r3, #24
 800321e:	460d      	mov	r5, r1
 8003220:	4616      	mov	r6, r2
 8003222:	d50f      	bpl.n	8003244 <_svfiprintf_r+0x34>
 8003224:	690b      	ldr	r3, [r1, #16]
 8003226:	b96b      	cbnz	r3, 8003244 <_svfiprintf_r+0x34>
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	f7ff fec3 	bl	8002fb4 <_malloc_r>
 800322e:	6028      	str	r0, [r5, #0]
 8003230:	6128      	str	r0, [r5, #16]
 8003232:	b928      	cbnz	r0, 8003240 <_svfiprintf_r+0x30>
 8003234:	230c      	movs	r3, #12
 8003236:	f8c8 3000 	str.w	r3, [r8]
 800323a:	f04f 30ff 	mov.w	r0, #4294967295
 800323e:	e0c5      	b.n	80033cc <_svfiprintf_r+0x1bc>
 8003240:	2340      	movs	r3, #64	; 0x40
 8003242:	616b      	str	r3, [r5, #20]
 8003244:	2300      	movs	r3, #0
 8003246:	9309      	str	r3, [sp, #36]	; 0x24
 8003248:	2320      	movs	r3, #32
 800324a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800324e:	2330      	movs	r3, #48	; 0x30
 8003250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003254:	f04f 0b01 	mov.w	fp, #1
 8003258:	4637      	mov	r7, r6
 800325a:	463c      	mov	r4, r7
 800325c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d13c      	bne.n	80032de <_svfiprintf_r+0xce>
 8003264:	ebb7 0a06 	subs.w	sl, r7, r6
 8003268:	d00b      	beq.n	8003282 <_svfiprintf_r+0x72>
 800326a:	4653      	mov	r3, sl
 800326c:	4632      	mov	r2, r6
 800326e:	4629      	mov	r1, r5
 8003270:	4640      	mov	r0, r8
 8003272:	f7ff ff71 	bl	8003158 <__ssputs_r>
 8003276:	3001      	adds	r0, #1
 8003278:	f000 80a3 	beq.w	80033c2 <_svfiprintf_r+0x1b2>
 800327c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800327e:	4453      	add	r3, sl
 8003280:	9309      	str	r3, [sp, #36]	; 0x24
 8003282:	783b      	ldrb	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 809c 	beq.w	80033c2 <_svfiprintf_r+0x1b2>
 800328a:	2300      	movs	r3, #0
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	9304      	str	r3, [sp, #16]
 8003292:	9307      	str	r3, [sp, #28]
 8003294:	9205      	str	r2, [sp, #20]
 8003296:	9306      	str	r3, [sp, #24]
 8003298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800329c:	931a      	str	r3, [sp, #104]	; 0x68
 800329e:	2205      	movs	r2, #5
 80032a0:	7821      	ldrb	r1, [r4, #0]
 80032a2:	4850      	ldr	r0, [pc, #320]	; (80033e4 <_svfiprintf_r+0x1d4>)
 80032a4:	f7fc ff9c 	bl	80001e0 <memchr>
 80032a8:	1c67      	adds	r7, r4, #1
 80032aa:	9b04      	ldr	r3, [sp, #16]
 80032ac:	b9d8      	cbnz	r0, 80032e6 <_svfiprintf_r+0xd6>
 80032ae:	06d9      	lsls	r1, r3, #27
 80032b0:	bf44      	itt	mi
 80032b2:	2220      	movmi	r2, #32
 80032b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032b8:	071a      	lsls	r2, r3, #28
 80032ba:	bf44      	itt	mi
 80032bc:	222b      	movmi	r2, #43	; 0x2b
 80032be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032c2:	7822      	ldrb	r2, [r4, #0]
 80032c4:	2a2a      	cmp	r2, #42	; 0x2a
 80032c6:	d016      	beq.n	80032f6 <_svfiprintf_r+0xe6>
 80032c8:	9a07      	ldr	r2, [sp, #28]
 80032ca:	2100      	movs	r1, #0
 80032cc:	200a      	movs	r0, #10
 80032ce:	4627      	mov	r7, r4
 80032d0:	3401      	adds	r4, #1
 80032d2:	783b      	ldrb	r3, [r7, #0]
 80032d4:	3b30      	subs	r3, #48	; 0x30
 80032d6:	2b09      	cmp	r3, #9
 80032d8:	d951      	bls.n	800337e <_svfiprintf_r+0x16e>
 80032da:	b1c9      	cbz	r1, 8003310 <_svfiprintf_r+0x100>
 80032dc:	e011      	b.n	8003302 <_svfiprintf_r+0xf2>
 80032de:	2b25      	cmp	r3, #37	; 0x25
 80032e0:	d0c0      	beq.n	8003264 <_svfiprintf_r+0x54>
 80032e2:	4627      	mov	r7, r4
 80032e4:	e7b9      	b.n	800325a <_svfiprintf_r+0x4a>
 80032e6:	4a3f      	ldr	r2, [pc, #252]	; (80033e4 <_svfiprintf_r+0x1d4>)
 80032e8:	1a80      	subs	r0, r0, r2
 80032ea:	fa0b f000 	lsl.w	r0, fp, r0
 80032ee:	4318      	orrs	r0, r3
 80032f0:	9004      	str	r0, [sp, #16]
 80032f2:	463c      	mov	r4, r7
 80032f4:	e7d3      	b.n	800329e <_svfiprintf_r+0x8e>
 80032f6:	9a03      	ldr	r2, [sp, #12]
 80032f8:	1d11      	adds	r1, r2, #4
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	9103      	str	r1, [sp, #12]
 80032fe:	2a00      	cmp	r2, #0
 8003300:	db01      	blt.n	8003306 <_svfiprintf_r+0xf6>
 8003302:	9207      	str	r2, [sp, #28]
 8003304:	e004      	b.n	8003310 <_svfiprintf_r+0x100>
 8003306:	4252      	negs	r2, r2
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	9207      	str	r2, [sp, #28]
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	783b      	ldrb	r3, [r7, #0]
 8003312:	2b2e      	cmp	r3, #46	; 0x2e
 8003314:	d10e      	bne.n	8003334 <_svfiprintf_r+0x124>
 8003316:	787b      	ldrb	r3, [r7, #1]
 8003318:	2b2a      	cmp	r3, #42	; 0x2a
 800331a:	f107 0101 	add.w	r1, r7, #1
 800331e:	d132      	bne.n	8003386 <_svfiprintf_r+0x176>
 8003320:	9b03      	ldr	r3, [sp, #12]
 8003322:	1d1a      	adds	r2, r3, #4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	9203      	str	r2, [sp, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	bfb8      	it	lt
 800332c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003330:	3702      	adds	r7, #2
 8003332:	9305      	str	r3, [sp, #20]
 8003334:	4c2c      	ldr	r4, [pc, #176]	; (80033e8 <_svfiprintf_r+0x1d8>)
 8003336:	7839      	ldrb	r1, [r7, #0]
 8003338:	2203      	movs	r2, #3
 800333a:	4620      	mov	r0, r4
 800333c:	f7fc ff50 	bl	80001e0 <memchr>
 8003340:	b138      	cbz	r0, 8003352 <_svfiprintf_r+0x142>
 8003342:	2340      	movs	r3, #64	; 0x40
 8003344:	1b00      	subs	r0, r0, r4
 8003346:	fa03 f000 	lsl.w	r0, r3, r0
 800334a:	9b04      	ldr	r3, [sp, #16]
 800334c:	4303      	orrs	r3, r0
 800334e:	9304      	str	r3, [sp, #16]
 8003350:	3701      	adds	r7, #1
 8003352:	7839      	ldrb	r1, [r7, #0]
 8003354:	4825      	ldr	r0, [pc, #148]	; (80033ec <_svfiprintf_r+0x1dc>)
 8003356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800335a:	2206      	movs	r2, #6
 800335c:	1c7e      	adds	r6, r7, #1
 800335e:	f7fc ff3f 	bl	80001e0 <memchr>
 8003362:	2800      	cmp	r0, #0
 8003364:	d035      	beq.n	80033d2 <_svfiprintf_r+0x1c2>
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <_svfiprintf_r+0x1e0>)
 8003368:	b9fb      	cbnz	r3, 80033aa <_svfiprintf_r+0x19a>
 800336a:	9b03      	ldr	r3, [sp, #12]
 800336c:	3307      	adds	r3, #7
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	3308      	adds	r3, #8
 8003374:	9303      	str	r3, [sp, #12]
 8003376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003378:	444b      	add	r3, r9
 800337a:	9309      	str	r3, [sp, #36]	; 0x24
 800337c:	e76c      	b.n	8003258 <_svfiprintf_r+0x48>
 800337e:	fb00 3202 	mla	r2, r0, r2, r3
 8003382:	2101      	movs	r1, #1
 8003384:	e7a3      	b.n	80032ce <_svfiprintf_r+0xbe>
 8003386:	2300      	movs	r3, #0
 8003388:	9305      	str	r3, [sp, #20]
 800338a:	4618      	mov	r0, r3
 800338c:	240a      	movs	r4, #10
 800338e:	460f      	mov	r7, r1
 8003390:	3101      	adds	r1, #1
 8003392:	783a      	ldrb	r2, [r7, #0]
 8003394:	3a30      	subs	r2, #48	; 0x30
 8003396:	2a09      	cmp	r2, #9
 8003398:	d903      	bls.n	80033a2 <_svfiprintf_r+0x192>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ca      	beq.n	8003334 <_svfiprintf_r+0x124>
 800339e:	9005      	str	r0, [sp, #20]
 80033a0:	e7c8      	b.n	8003334 <_svfiprintf_r+0x124>
 80033a2:	fb04 2000 	mla	r0, r4, r0, r2
 80033a6:	2301      	movs	r3, #1
 80033a8:	e7f1      	b.n	800338e <_svfiprintf_r+0x17e>
 80033aa:	ab03      	add	r3, sp, #12
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	462a      	mov	r2, r5
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <_svfiprintf_r+0x1e4>)
 80033b2:	a904      	add	r1, sp, #16
 80033b4:	4640      	mov	r0, r8
 80033b6:	f3af 8000 	nop.w
 80033ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033be:	4681      	mov	r9, r0
 80033c0:	d1d9      	bne.n	8003376 <_svfiprintf_r+0x166>
 80033c2:	89ab      	ldrh	r3, [r5, #12]
 80033c4:	065b      	lsls	r3, r3, #25
 80033c6:	f53f af38 	bmi.w	800323a <_svfiprintf_r+0x2a>
 80033ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033cc:	b01d      	add	sp, #116	; 0x74
 80033ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d2:	ab03      	add	r3, sp, #12
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	462a      	mov	r2, r5
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <_svfiprintf_r+0x1e4>)
 80033da:	a904      	add	r1, sp, #16
 80033dc:	4640      	mov	r0, r8
 80033de:	f000 f881 	bl	80034e4 <_printf_i>
 80033e2:	e7ea      	b.n	80033ba <_svfiprintf_r+0x1aa>
 80033e4:	08003884 	.word	0x08003884
 80033e8:	0800388a 	.word	0x0800388a
 80033ec:	0800388e 	.word	0x0800388e
 80033f0:	00000000 	.word	0x00000000
 80033f4:	08003159 	.word	0x08003159

080033f8 <_printf_common>:
 80033f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033fc:	4691      	mov	r9, r2
 80033fe:	461f      	mov	r7, r3
 8003400:	688a      	ldr	r2, [r1, #8]
 8003402:	690b      	ldr	r3, [r1, #16]
 8003404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003408:	4293      	cmp	r3, r2
 800340a:	bfb8      	it	lt
 800340c:	4613      	movlt	r3, r2
 800340e:	f8c9 3000 	str.w	r3, [r9]
 8003412:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003416:	4606      	mov	r6, r0
 8003418:	460c      	mov	r4, r1
 800341a:	b112      	cbz	r2, 8003422 <_printf_common+0x2a>
 800341c:	3301      	adds	r3, #1
 800341e:	f8c9 3000 	str.w	r3, [r9]
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	0699      	lsls	r1, r3, #26
 8003426:	bf42      	ittt	mi
 8003428:	f8d9 3000 	ldrmi.w	r3, [r9]
 800342c:	3302      	addmi	r3, #2
 800342e:	f8c9 3000 	strmi.w	r3, [r9]
 8003432:	6825      	ldr	r5, [r4, #0]
 8003434:	f015 0506 	ands.w	r5, r5, #6
 8003438:	d107      	bne.n	800344a <_printf_common+0x52>
 800343a:	f104 0a19 	add.w	sl, r4, #25
 800343e:	68e3      	ldr	r3, [r4, #12]
 8003440:	f8d9 2000 	ldr.w	r2, [r9]
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	429d      	cmp	r5, r3
 8003448:	db29      	blt.n	800349e <_printf_common+0xa6>
 800344a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800344e:	6822      	ldr	r2, [r4, #0]
 8003450:	3300      	adds	r3, #0
 8003452:	bf18      	it	ne
 8003454:	2301      	movne	r3, #1
 8003456:	0692      	lsls	r2, r2, #26
 8003458:	d42e      	bmi.n	80034b8 <_printf_common+0xc0>
 800345a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800345e:	4639      	mov	r1, r7
 8003460:	4630      	mov	r0, r6
 8003462:	47c0      	blx	r8
 8003464:	3001      	adds	r0, #1
 8003466:	d021      	beq.n	80034ac <_printf_common+0xb4>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	68e5      	ldr	r5, [r4, #12]
 800346c:	f8d9 2000 	ldr.w	r2, [r9]
 8003470:	f003 0306 	and.w	r3, r3, #6
 8003474:	2b04      	cmp	r3, #4
 8003476:	bf08      	it	eq
 8003478:	1aad      	subeq	r5, r5, r2
 800347a:	68a3      	ldr	r3, [r4, #8]
 800347c:	6922      	ldr	r2, [r4, #16]
 800347e:	bf0c      	ite	eq
 8003480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003484:	2500      	movne	r5, #0
 8003486:	4293      	cmp	r3, r2
 8003488:	bfc4      	itt	gt
 800348a:	1a9b      	subgt	r3, r3, r2
 800348c:	18ed      	addgt	r5, r5, r3
 800348e:	f04f 0900 	mov.w	r9, #0
 8003492:	341a      	adds	r4, #26
 8003494:	454d      	cmp	r5, r9
 8003496:	d11b      	bne.n	80034d0 <_printf_common+0xd8>
 8003498:	2000      	movs	r0, #0
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	2301      	movs	r3, #1
 80034a0:	4652      	mov	r2, sl
 80034a2:	4639      	mov	r1, r7
 80034a4:	4630      	mov	r0, r6
 80034a6:	47c0      	blx	r8
 80034a8:	3001      	adds	r0, #1
 80034aa:	d103      	bne.n	80034b4 <_printf_common+0xbc>
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b4:	3501      	adds	r5, #1
 80034b6:	e7c2      	b.n	800343e <_printf_common+0x46>
 80034b8:	18e1      	adds	r1, r4, r3
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	2030      	movs	r0, #48	; 0x30
 80034be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034c2:	4422      	add	r2, r4
 80034c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034cc:	3302      	adds	r3, #2
 80034ce:	e7c4      	b.n	800345a <_printf_common+0x62>
 80034d0:	2301      	movs	r3, #1
 80034d2:	4622      	mov	r2, r4
 80034d4:	4639      	mov	r1, r7
 80034d6:	4630      	mov	r0, r6
 80034d8:	47c0      	blx	r8
 80034da:	3001      	adds	r0, #1
 80034dc:	d0e6      	beq.n	80034ac <_printf_common+0xb4>
 80034de:	f109 0901 	add.w	r9, r9, #1
 80034e2:	e7d7      	b.n	8003494 <_printf_common+0x9c>

080034e4 <_printf_i>:
 80034e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034e8:	4617      	mov	r7, r2
 80034ea:	7e0a      	ldrb	r2, [r1, #24]
 80034ec:	b085      	sub	sp, #20
 80034ee:	2a6e      	cmp	r2, #110	; 0x6e
 80034f0:	4698      	mov	r8, r3
 80034f2:	4606      	mov	r6, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034f8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80034fc:	f000 80bc 	beq.w	8003678 <_printf_i+0x194>
 8003500:	d81a      	bhi.n	8003538 <_printf_i+0x54>
 8003502:	2a63      	cmp	r2, #99	; 0x63
 8003504:	d02e      	beq.n	8003564 <_printf_i+0x80>
 8003506:	d80a      	bhi.n	800351e <_printf_i+0x3a>
 8003508:	2a00      	cmp	r2, #0
 800350a:	f000 80c8 	beq.w	800369e <_printf_i+0x1ba>
 800350e:	2a58      	cmp	r2, #88	; 0x58
 8003510:	f000 808a 	beq.w	8003628 <_printf_i+0x144>
 8003514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003518:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800351c:	e02a      	b.n	8003574 <_printf_i+0x90>
 800351e:	2a64      	cmp	r2, #100	; 0x64
 8003520:	d001      	beq.n	8003526 <_printf_i+0x42>
 8003522:	2a69      	cmp	r2, #105	; 0x69
 8003524:	d1f6      	bne.n	8003514 <_printf_i+0x30>
 8003526:	6821      	ldr	r1, [r4, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800352e:	d023      	beq.n	8003578 <_printf_i+0x94>
 8003530:	1d11      	adds	r1, r2, #4
 8003532:	6019      	str	r1, [r3, #0]
 8003534:	6813      	ldr	r3, [r2, #0]
 8003536:	e027      	b.n	8003588 <_printf_i+0xa4>
 8003538:	2a73      	cmp	r2, #115	; 0x73
 800353a:	f000 80b4 	beq.w	80036a6 <_printf_i+0x1c2>
 800353e:	d808      	bhi.n	8003552 <_printf_i+0x6e>
 8003540:	2a6f      	cmp	r2, #111	; 0x6f
 8003542:	d02a      	beq.n	800359a <_printf_i+0xb6>
 8003544:	2a70      	cmp	r2, #112	; 0x70
 8003546:	d1e5      	bne.n	8003514 <_printf_i+0x30>
 8003548:	680a      	ldr	r2, [r1, #0]
 800354a:	f042 0220 	orr.w	r2, r2, #32
 800354e:	600a      	str	r2, [r1, #0]
 8003550:	e003      	b.n	800355a <_printf_i+0x76>
 8003552:	2a75      	cmp	r2, #117	; 0x75
 8003554:	d021      	beq.n	800359a <_printf_i+0xb6>
 8003556:	2a78      	cmp	r2, #120	; 0x78
 8003558:	d1dc      	bne.n	8003514 <_printf_i+0x30>
 800355a:	2278      	movs	r2, #120	; 0x78
 800355c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003560:	496e      	ldr	r1, [pc, #440]	; (800371c <_printf_i+0x238>)
 8003562:	e064      	b.n	800362e <_printf_i+0x14a>
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800356a:	1d11      	adds	r1, r2, #4
 800356c:	6019      	str	r1, [r3, #0]
 800356e:	6813      	ldr	r3, [r2, #0]
 8003570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003574:	2301      	movs	r3, #1
 8003576:	e0a3      	b.n	80036c0 <_printf_i+0x1dc>
 8003578:	f011 0f40 	tst.w	r1, #64	; 0x40
 800357c:	f102 0104 	add.w	r1, r2, #4
 8003580:	6019      	str	r1, [r3, #0]
 8003582:	d0d7      	beq.n	8003534 <_printf_i+0x50>
 8003584:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003588:	2b00      	cmp	r3, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xb0>
 800358c:	222d      	movs	r2, #45	; 0x2d
 800358e:	425b      	negs	r3, r3
 8003590:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003594:	4962      	ldr	r1, [pc, #392]	; (8003720 <_printf_i+0x23c>)
 8003596:	220a      	movs	r2, #10
 8003598:	e017      	b.n	80035ca <_printf_i+0xe6>
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80035a2:	d003      	beq.n	80035ac <_printf_i+0xc8>
 80035a4:	1d08      	adds	r0, r1, #4
 80035a6:	6018      	str	r0, [r3, #0]
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	e006      	b.n	80035ba <_printf_i+0xd6>
 80035ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035b0:	f101 0004 	add.w	r0, r1, #4
 80035b4:	6018      	str	r0, [r3, #0]
 80035b6:	d0f7      	beq.n	80035a8 <_printf_i+0xc4>
 80035b8:	880b      	ldrh	r3, [r1, #0]
 80035ba:	4959      	ldr	r1, [pc, #356]	; (8003720 <_printf_i+0x23c>)
 80035bc:	2a6f      	cmp	r2, #111	; 0x6f
 80035be:	bf14      	ite	ne
 80035c0:	220a      	movne	r2, #10
 80035c2:	2208      	moveq	r2, #8
 80035c4:	2000      	movs	r0, #0
 80035c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80035ca:	6865      	ldr	r5, [r4, #4]
 80035cc:	60a5      	str	r5, [r4, #8]
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	f2c0 809c 	blt.w	800370c <_printf_i+0x228>
 80035d4:	6820      	ldr	r0, [r4, #0]
 80035d6:	f020 0004 	bic.w	r0, r0, #4
 80035da:	6020      	str	r0, [r4, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13f      	bne.n	8003660 <_printf_i+0x17c>
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	f040 8095 	bne.w	8003710 <_printf_i+0x22c>
 80035e6:	4675      	mov	r5, lr
 80035e8:	2a08      	cmp	r2, #8
 80035ea:	d10b      	bne.n	8003604 <_printf_i+0x120>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	07da      	lsls	r2, r3, #31
 80035f0:	d508      	bpl.n	8003604 <_printf_i+0x120>
 80035f2:	6923      	ldr	r3, [r4, #16]
 80035f4:	6862      	ldr	r2, [r4, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	bfde      	ittt	le
 80035fa:	2330      	movle	r3, #48	; 0x30
 80035fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003604:	ebae 0305 	sub.w	r3, lr, r5
 8003608:	6123      	str	r3, [r4, #16]
 800360a:	f8cd 8000 	str.w	r8, [sp]
 800360e:	463b      	mov	r3, r7
 8003610:	aa03      	add	r2, sp, #12
 8003612:	4621      	mov	r1, r4
 8003614:	4630      	mov	r0, r6
 8003616:	f7ff feef 	bl	80033f8 <_printf_common>
 800361a:	3001      	adds	r0, #1
 800361c:	d155      	bne.n	80036ca <_printf_i+0x1e6>
 800361e:	f04f 30ff 	mov.w	r0, #4294967295
 8003622:	b005      	add	sp, #20
 8003624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003628:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800362c:	493c      	ldr	r1, [pc, #240]	; (8003720 <_printf_i+0x23c>)
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003636:	f100 0504 	add.w	r5, r0, #4
 800363a:	601d      	str	r5, [r3, #0]
 800363c:	d001      	beq.n	8003642 <_printf_i+0x15e>
 800363e:	6803      	ldr	r3, [r0, #0]
 8003640:	e002      	b.n	8003648 <_printf_i+0x164>
 8003642:	0655      	lsls	r5, r2, #25
 8003644:	d5fb      	bpl.n	800363e <_printf_i+0x15a>
 8003646:	8803      	ldrh	r3, [r0, #0]
 8003648:	07d0      	lsls	r0, r2, #31
 800364a:	bf44      	itt	mi
 800364c:	f042 0220 	orrmi.w	r2, r2, #32
 8003650:	6022      	strmi	r2, [r4, #0]
 8003652:	b91b      	cbnz	r3, 800365c <_printf_i+0x178>
 8003654:	6822      	ldr	r2, [r4, #0]
 8003656:	f022 0220 	bic.w	r2, r2, #32
 800365a:	6022      	str	r2, [r4, #0]
 800365c:	2210      	movs	r2, #16
 800365e:	e7b1      	b.n	80035c4 <_printf_i+0xe0>
 8003660:	4675      	mov	r5, lr
 8003662:	fbb3 f0f2 	udiv	r0, r3, r2
 8003666:	fb02 3310 	mls	r3, r2, r0, r3
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003670:	4603      	mov	r3, r0
 8003672:	2800      	cmp	r0, #0
 8003674:	d1f5      	bne.n	8003662 <_printf_i+0x17e>
 8003676:	e7b7      	b.n	80035e8 <_printf_i+0x104>
 8003678:	6808      	ldr	r0, [r1, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	6949      	ldr	r1, [r1, #20]
 800367e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003682:	d004      	beq.n	800368e <_printf_i+0x1aa>
 8003684:	1d10      	adds	r0, r2, #4
 8003686:	6018      	str	r0, [r3, #0]
 8003688:	6813      	ldr	r3, [r2, #0]
 800368a:	6019      	str	r1, [r3, #0]
 800368c:	e007      	b.n	800369e <_printf_i+0x1ba>
 800368e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003692:	f102 0004 	add.w	r0, r2, #4
 8003696:	6018      	str	r0, [r3, #0]
 8003698:	6813      	ldr	r3, [r2, #0]
 800369a:	d0f6      	beq.n	800368a <_printf_i+0x1a6>
 800369c:	8019      	strh	r1, [r3, #0]
 800369e:	2300      	movs	r3, #0
 80036a0:	6123      	str	r3, [r4, #16]
 80036a2:	4675      	mov	r5, lr
 80036a4:	e7b1      	b.n	800360a <_printf_i+0x126>
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	1d11      	adds	r1, r2, #4
 80036aa:	6019      	str	r1, [r3, #0]
 80036ac:	6815      	ldr	r5, [r2, #0]
 80036ae:	6862      	ldr	r2, [r4, #4]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4628      	mov	r0, r5
 80036b4:	f7fc fd94 	bl	80001e0 <memchr>
 80036b8:	b108      	cbz	r0, 80036be <_printf_i+0x1da>
 80036ba:	1b40      	subs	r0, r0, r5
 80036bc:	6060      	str	r0, [r4, #4]
 80036be:	6863      	ldr	r3, [r4, #4]
 80036c0:	6123      	str	r3, [r4, #16]
 80036c2:	2300      	movs	r3, #0
 80036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c8:	e79f      	b.n	800360a <_printf_i+0x126>
 80036ca:	6923      	ldr	r3, [r4, #16]
 80036cc:	462a      	mov	r2, r5
 80036ce:	4639      	mov	r1, r7
 80036d0:	4630      	mov	r0, r6
 80036d2:	47c0      	blx	r8
 80036d4:	3001      	adds	r0, #1
 80036d6:	d0a2      	beq.n	800361e <_printf_i+0x13a>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	079b      	lsls	r3, r3, #30
 80036dc:	d507      	bpl.n	80036ee <_printf_i+0x20a>
 80036de:	2500      	movs	r5, #0
 80036e0:	f104 0919 	add.w	r9, r4, #25
 80036e4:	68e3      	ldr	r3, [r4, #12]
 80036e6:	9a03      	ldr	r2, [sp, #12]
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	429d      	cmp	r5, r3
 80036ec:	db05      	blt.n	80036fa <_printf_i+0x216>
 80036ee:	68e0      	ldr	r0, [r4, #12]
 80036f0:	9b03      	ldr	r3, [sp, #12]
 80036f2:	4298      	cmp	r0, r3
 80036f4:	bfb8      	it	lt
 80036f6:	4618      	movlt	r0, r3
 80036f8:	e793      	b.n	8003622 <_printf_i+0x13e>
 80036fa:	2301      	movs	r3, #1
 80036fc:	464a      	mov	r2, r9
 80036fe:	4639      	mov	r1, r7
 8003700:	4630      	mov	r0, r6
 8003702:	47c0      	blx	r8
 8003704:	3001      	adds	r0, #1
 8003706:	d08a      	beq.n	800361e <_printf_i+0x13a>
 8003708:	3501      	adds	r5, #1
 800370a:	e7eb      	b.n	80036e4 <_printf_i+0x200>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1a7      	bne.n	8003660 <_printf_i+0x17c>
 8003710:	780b      	ldrb	r3, [r1, #0]
 8003712:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003716:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800371a:	e765      	b.n	80035e8 <_printf_i+0x104>
 800371c:	080038a6 	.word	0x080038a6
 8003720:	08003895 	.word	0x08003895

08003724 <memmove>:
 8003724:	4288      	cmp	r0, r1
 8003726:	b510      	push	{r4, lr}
 8003728:	eb01 0302 	add.w	r3, r1, r2
 800372c:	d803      	bhi.n	8003736 <memmove+0x12>
 800372e:	1e42      	subs	r2, r0, #1
 8003730:	4299      	cmp	r1, r3
 8003732:	d10c      	bne.n	800374e <memmove+0x2a>
 8003734:	bd10      	pop	{r4, pc}
 8003736:	4298      	cmp	r0, r3
 8003738:	d2f9      	bcs.n	800372e <memmove+0xa>
 800373a:	1881      	adds	r1, r0, r2
 800373c:	1ad2      	subs	r2, r2, r3
 800373e:	42d3      	cmn	r3, r2
 8003740:	d100      	bne.n	8003744 <memmove+0x20>
 8003742:	bd10      	pop	{r4, pc}
 8003744:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003748:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800374c:	e7f7      	b.n	800373e <memmove+0x1a>
 800374e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003752:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003756:	e7eb      	b.n	8003730 <memmove+0xc>

08003758 <_realloc_r>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	4607      	mov	r7, r0
 800375c:	4614      	mov	r4, r2
 800375e:	460e      	mov	r6, r1
 8003760:	b921      	cbnz	r1, 800376c <_realloc_r+0x14>
 8003762:	4611      	mov	r1, r2
 8003764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003768:	f7ff bc24 	b.w	8002fb4 <_malloc_r>
 800376c:	b922      	cbnz	r2, 8003778 <_realloc_r+0x20>
 800376e:	f7ff fbd3 	bl	8002f18 <_free_r>
 8003772:	4625      	mov	r5, r4
 8003774:	4628      	mov	r0, r5
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003778:	f000 f814 	bl	80037a4 <_malloc_usable_size_r>
 800377c:	4284      	cmp	r4, r0
 800377e:	d90f      	bls.n	80037a0 <_realloc_r+0x48>
 8003780:	4621      	mov	r1, r4
 8003782:	4638      	mov	r0, r7
 8003784:	f7ff fc16 	bl	8002fb4 <_malloc_r>
 8003788:	4605      	mov	r5, r0
 800378a:	2800      	cmp	r0, #0
 800378c:	d0f2      	beq.n	8003774 <_realloc_r+0x1c>
 800378e:	4631      	mov	r1, r6
 8003790:	4622      	mov	r2, r4
 8003792:	f7ff fcd4 	bl	800313e <memcpy>
 8003796:	4631      	mov	r1, r6
 8003798:	4638      	mov	r0, r7
 800379a:	f7ff fbbd 	bl	8002f18 <_free_r>
 800379e:	e7e9      	b.n	8003774 <_realloc_r+0x1c>
 80037a0:	4635      	mov	r5, r6
 80037a2:	e7e7      	b.n	8003774 <_realloc_r+0x1c>

080037a4 <_malloc_usable_size_r>:
 80037a4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80037a8:	2800      	cmp	r0, #0
 80037aa:	f1a0 0004 	sub.w	r0, r0, #4
 80037ae:	bfbc      	itt	lt
 80037b0:	580b      	ldrlt	r3, [r1, r0]
 80037b2:	18c0      	addlt	r0, r0, r3
 80037b4:	4770      	bx	lr
	...

080037b8 <_sbrk>:
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <_sbrk+0x14>)
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	4602      	mov	r2, r0
 80037be:	b909      	cbnz	r1, 80037c4 <_sbrk+0xc>
 80037c0:	4903      	ldr	r1, [pc, #12]	; (80037d0 <_sbrk+0x18>)
 80037c2:	6019      	str	r1, [r3, #0]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	4402      	add	r2, r0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	4770      	bx	lr
 80037cc:	20000090 	.word	0x20000090
 80037d0:	20000164 	.word	0x20000164

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
